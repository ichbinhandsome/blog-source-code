{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Duplicates.md","hash":"9e1870e5d460d2ee3559a0620b650fc3a2dc103f","modified":1601569517704},{"_id":"source/_posts/trie.md","hash":"f2cfded4a71d2694872674783b1187d00d8b344b","modified":1601569548625},{"_id":"source/_posts/解决搭建博客中tags和categories页面404.md","hash":"5fd1768683bae4e79f2daab2515bb87bb9547a55","modified":1596731463487},{"_id":"source/categories/index.md","hash":"f8d2c2d33da3db974f47931673fe9e0155c68ae3","modified":1596651267756},{"_id":"source/about/index.md","hash":"1a22384c84365ec68f5f514c15b85d93e30eb2d1","modified":1606487384695},{"_id":"source/tags/index.md","hash":"63dc25aa280f312aa70bf64c4b8ce97c80f1c93c","modified":1596651360093},{"_id":"source/_posts/hello-world.md","hash":"45aac96035f254771e8dc36f06bb780afeb8e5eb","modified":1596731476548},{"_id":"themes/next/layout/_scripts/schemes/gemini.njk","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596575088856},{"_id":"themes/next/layout/_scripts/schemes/pisces.njk","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596575088856},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1596575088793},{"_id":"themes/next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1596575088793},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1596575088793},{"_id":"themes/next/.gitignore","hash":"03012748b175434345643bfe11515b4ad22a5be8","modified":1596575088809},{"_id":"themes/next/.npmignore","hash":"e726ec1241bfaed670bc6059172e048a53ad970d","modified":1596575088809},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1596575088809},{"_id":"themes/next/LICENSE.md","hash":"2f8a566ace11a7042e18555041625017242d969e","modified":1596575088809},{"_id":"themes/next/_vendors.yml","hash":"43c7c87a76ecf7a2269353d7de277ea4773acd6f","modified":1596575088809},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1596575088809},{"_id":"themes/next/_config.yml","hash":"a2d41070904e8f487fedf6b0e99d3b4eb9eacf11","modified":1596828481797},{"_id":"themes/next/package.json","hash":"8b3703692fb2a373d1b53178e1d3f473ba6dcf5d","modified":1596575088871},{"_id":"themes/next/README.md","hash":"179370fd0a75e0d44a6254ad493ac03b4fa32893","modified":1596575088809},{"_id":"themes/next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1596575088871},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"39dbcf7c6d4c22c96bf7b52d9d776e4ecba35603","modified":1596575088793},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"8e2135c86a1c5cd283c82a425a52cb5e5fbe64db","modified":1596575088793},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21a29e519823840b7fe254f19e42ac265d15e3ae","modified":1596575088793},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1596575088809},{"_id":"themes/next/.github/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1596575088793},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"418da9a47cfce5c14f2b4b762fb243609a4b77ea","modified":1596575088809},{"_id":"themes/next/.github/labeler.yml","hash":"8c85edfe39afb306b1b4d511ad72d1bb9c74bf8f","modified":1596575088809},{"_id":"themes/next/.github/release-drafter.yml","hash":"6737b76b184d8e73dcd96972e47edbfcbedbfaa4","modified":1596575088809},{"_id":"themes/next/scripts/renderer.js","hash":"478275ebf0a8867b473b172dda812ea3d18a3518","modified":1596575088934},{"_id":"themes/next/.github/stale.yml","hash":"9492dbba804035e458054ffbbf8e1f085e91cd70","modified":1596575088809},{"_id":"themes/next/layout/archive.njk","hash":"c76d344cde19a5a67429d1402228ce33086e5c33","modified":1596575088871},{"_id":"themes/next/layout/_layout.njk","hash":"bc7569cb224cd7138a0ef0476670c67574760987","modified":1596575088824},{"_id":"themes/next/layout/category.njk","hash":"222fc92c4b9f5721a1d477d53cd0cf98535dd26c","modified":1596575088871},{"_id":"themes/next/layout/index.njk","hash":"a5e09e4406286ce7cb82f792f627218f9a3258b5","modified":1596575088871},{"_id":"themes/next/layout/post.njk","hash":"707a50e50b90df5fbeaf8407d12895d04163a290","modified":1596575088871},{"_id":"themes/next/languages/README.md","hash":"d7ba442586bba4ee0f955c05d0b05a7e98f2e854","modified":1596575088824},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1596575088824},{"_id":"themes/next/layout/page.njk","hash":"33567f80f13d5f70f075859ac6932b1e93bdb8f5","modified":1596575088871},{"_id":"themes/next/languages/de.yml","hash":"1182965c709f06d416ca4e815b1154e4193af2b6","modified":1596575088824},{"_id":"themes/next/layout/tag.njk","hash":"185b2aa3492773156dd9bc44fed50005d108dce4","modified":1596575088871},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1596575088824},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1596575088824},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1596575088824},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1596575088824},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1596575088824},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1596575088824},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1596575088824},{"_id":"themes/next/languages/ja.yml","hash":"f9c00d9fda3707ba57a01b174e233c565d7ba2d9","modified":1596575088824},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1596575088824},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1596575088824},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1596575088824},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1596575088824},{"_id":"themes/next/languages/tr.yml","hash":"8b00ca99ad063d81908b2c2f5bf3b683c1515f80","modified":1596575088824},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1596575088824},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1596575088824},{"_id":"themes/next/languages/zh-CN.yml","hash":"1dc2f39341cd9b0a042c1a721babd2fc313348e8","modified":1596575088824},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1596575088809},{"_id":"themes/next/languages/zh-TW.yml","hash":"363419eb08086215714cfe93092b0fadd5693112","modified":1596575088824},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1596575088824},{"_id":"themes/next/languages/zh-HK.yml","hash":"b7e45ef40835e6b0e32fc93bbd255b902bff6c41","modified":1596575088824},{"_id":"themes/next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1596575088809},{"_id":"themes/next/docs/LICENSE.txt","hash":"71bcc7017bd259ac52f171b23530ab35ce810f6c","modified":1596575088809},{"_id":"themes/next/scripts/events/index.js","hash":"fb3feea03bacd679bccc1ec0a1ddeede5d2703df","modified":1596575088871},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"a56d75bb5aea8bdd1642f84372e011e21ca21ad9","modified":1596575088793},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"1b5c6f126e4e1a1f02d41072ad68b120a455f3ca","modified":1596575088809},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"a1c997c4987ece0696fc4e00fae3f53e96e86099","modified":1596575088809},{"_id":"themes/next/.github/workflows/linter.yml","hash":"c14c2cee4ac921f9f1dbdda47e013baa657688c8","modified":1596575088809},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"f3fd4fa1e51c661dbaea954b7e59d228b2208159","modified":1596575088793},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"359b74890a47d784e35a5cc3c7885d5cdf302e82","modified":1596575088809},{"_id":"themes/next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1596575089043},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"3d0eb79d1430dd785aecad40b08ed199130cd463","modified":1596575088793},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"ce3f611dbd35306ef15332da0356a0943cd6fd24","modified":1596575088793},{"_id":"themes/next/.github/workflows/lock.yml","hash":"8198c68a613d1a1e2a09f2cbecd0a53697b61962","modified":1596575088809},{"_id":"themes/next/scripts/helpers/engine.js","hash":"a77e7304468f4ade4d41da51b8e5ec03cca8c9b2","modified":1596575088918},{"_id":"themes/next/.github/workflows/tester.yml","hash":"1f4f24bad91b1cb483c78c80e69ff467173b8aec","modified":1596575088809},{"_id":"themes/next/scripts/helpers/font.js","hash":"45490ac0527ca4e613d8dd950e24501744e24942","modified":1596575088918},{"_id":"themes/next/scripts/filters/locals.js","hash":"d1bf3624d8ff8cd8600791ece6a30b8bef72a90e","modified":1596575088902},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"ce3ea97dc80a9813f50a8db707063656c552ce89","modified":1596575088918},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"9ecce323df3361d20731573b27b1e6e804dfdf92","modified":1596575088918},{"_id":"themes/next/scripts/filters/minify.js","hash":"61d4554630c089f1879d3ecd8574cad15416a7a4","modified":1596575088902},{"_id":"themes/next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1596575088934},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1596575088824},{"_id":"themes/next/layout/_macro/post.njk","hash":"1e692fd5e24ae7d296ad17a8969eaf818300d411","modified":1596575088824},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1596575088934},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"25653ae9d17a8055f4dcef867afa74b0f700c95d","modified":1596575088824},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"a7fcf6e89fe195893ad9a924421d459b06d74b91","modified":1596575088934},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"ca429d2025746b902776c63d0848e7d4cfc227c8","modified":1596575088934},{"_id":"themes/next/scripts/tags/label.js","hash":"ccc9f3c463e34c10a7b4c5ccc4cc5dba350d2562","modified":1596575088949},{"_id":"themes/next/scripts/filters/post.js","hash":"11f64f95837d0d44245768e0b72dc97b7e56d01f","modified":1596575088918},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"3bff7474fac86599496a39566a454720a2b03093","modified":1596575088949},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"feaa18a130eb8a9ef798d5ee3850a32340975d35","modified":1596575088949},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"6720973ce5d51ce136454133492a890922c7675a","modified":1596575088918},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"2c5d2e672a84286039955058feee37d406e388da","modified":1596575088902},{"_id":"themes/next/scripts/tags/pdf.js","hash":"7cfc7a582f44594be3a194917bc4e95b05f9dd4e","modified":1596575088949},{"_id":"themes/next/scripts/tags/video.js","hash":"2b075ad9eff9456c3b875ca60339b41e6714a3f3","modified":1596575088949},{"_id":"themes/next/scripts/tags/tabs.js","hash":"95735f652c974f9ed6849476a8375f9d7888a625","modified":1596575088949},{"_id":"themes/next/layout/_partials/languages.njk","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1596575088840},{"_id":"themes/next/layout/_partials/comments.njk","hash":"ee03381c536c9d0fa81df0dcd7d46011d34bdf57","modified":1596575088824},{"_id":"themes/next/scripts/tags/index.js","hash":"255dd1090e8319b557eeca43571f0e4f8aab013b","modified":1596575088934},{"_id":"themes/next/layout/_partials/footer.njk","hash":"aff79f64ebcdae67bdaabdfc1e19bbcc1a6d1a46","modified":1596575088840},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1596575088840},{"_id":"themes/next/layout/_third-party/baidu-push.njk","hash":"bd9ba0bf60cc3008ee14339fa395ee6af188e879","modified":1596575088856},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"f13bd9da7de2fc7424585d114daa2acb490d309d","modified":1596575088840},{"_id":"themes/next/layout/_third-party/index.njk","hash":"42a81c4224663d6b4348957062ea62cfa049bd6f","modified":1596575088856},{"_id":"themes/next/scripts/tags/note.js","hash":"b8669e3afc97188df46ca31997b6b205b79b6943","modified":1596575088949},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"ec4b66205248ee53ee7914847e73f02b73cdddf8","modified":1596575088856},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1596575088856},{"_id":"themes/next/layout/_scripts/index.njk","hash":"02cb845886a836cd27b3de9fcb6caeab5914907a","modified":1596575088840},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"6914d0bbba2bdc1fedbb30a8a17f539d75e2a047","modified":1596575088856},{"_id":"themes/next/layout/_scripts/noscript.njk","hash":"8da7b29b265669465fa77896384207d60e0f6e02","modified":1596575088840},{"_id":"themes/next/layout/_scripts/pjax.njk","hash":"fe3fee2415e3c6893707a68f4254aa354a3c4f1a","modified":1596575088856},{"_id":"themes/next/docs/ru/README.md","hash":"adac6b2aa723d0b468e5bdec2a957a157e71e002","modified":1596575088809},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"582f5f6b839a21e7498ca523c8c83178a0fda51b","modified":1596575088809},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bb057a78e905173fc4eb93988e7d4da924f660a5","modified":1596575088809},{"_id":"themes/next/docs/zh-CN/README.md","hash":"0707ca4b6bf9cf697f4f12fea659fca02217c120","modified":1596575088809},{"_id":"themes/next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1596575089043},{"_id":"themes/next/test/helpers/font.js","hash":"7e44ac17d0f8efce19c38bfff332439cf8a2eb30","modified":1596575089043},{"_id":"themes/next/test/helpers/next-url.js","hash":"2dd87fe2acb9554ec5cf0ff6b818207c3a48efdb","modified":1596575089043},{"_id":"themes/next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1596575089059},{"_id":"themes/next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1596575089059},{"_id":"themes/next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1596575089059},{"_id":"themes/next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1596575089059},{"_id":"themes/next/test/tags/mermaid.js","hash":"e1864bfef9a673b012dba0c5b3d096ee6b15cc91","modified":1596575089074},{"_id":"themes/next/test/tags/label.js","hash":"4709db83cf7362f9a3fe96ad50a7819d1e4b41ae","modified":1596575089059},{"_id":"themes/next/test/tags/group-pictures.js","hash":"498e9563f2d03e51726a305523d9a0cc4c55d8e2","modified":1596575089059},{"_id":"themes/next/test/tags/link-grid.js","hash":"05c368349a5ebb385a0e6382ad19cab5e3d6528b","modified":1596575089059},{"_id":"themes/next/test/tags/video.js","hash":"246f9f212259f4eaa3f510c78f40a622bd67ec98","modified":1596575089074},{"_id":"themes/next/source/css/_colors.styl","hash":"f3368760774a02969bca9f99a97b5650be7daa88","modified":1596575088949},{"_id":"themes/next/test/tags/pdf.js","hash":"161285ef5750de45c8ae5a3e01ad5c5abab5c6d9","modified":1596575089074},{"_id":"themes/next/source/css/_mixins.styl","hash":"fe9cdeed3489d493e53c81762ba2cd231309fa8c","modified":1596575088996},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1596575089012},{"_id":"themes/next/test/validate/index.js","hash":"e02ff921a05dfd6e5bae7558ca14705db9f57846","modified":1596575089074},{"_id":"themes/next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1596575089074},{"_id":"themes/next/test/tags/note.js","hash":"d1d918fa0c52efe3b4763927460310e752f5b8e0","modified":1596575089074},{"_id":"themes/next/source/js/algolia-search.js","hash":"208907a039a39be468991cd7d50758b109d7a6fa","modified":1596575089012},{"_id":"themes/next/source/js/motion.js","hash":"20b979ebe3671cb415e6e7171485d65cc347086e","modified":1596575089027},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1596575089012},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1596575089012},{"_id":"themes/next/source/js/bookmark.js","hash":"e808854cb650f5cd8b4ed97f41df122328b5bf08","modified":1596575089027},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1596575089012},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1596575089012},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1596575089012},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1596575089012},{"_id":"themes/next/source/js/utils.js","hash":"2c54d71d3c99500f12c5fc515b9552e30d4042e6","modified":1596575089043},{"_id":"themes/next/source/js/local-search.js","hash":"1cf37cee6842f87e39b36528b5efb75342700624","modified":1596575089027},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1596575089012},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1596575089012},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1596575089012},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1596575089012},{"_id":"themes/next/source/js/next-boot.js","hash":"dbdb886c44f48255c8ff3859e55a1d3cac50bbf2","modified":1596575089027},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1596575089012},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1596575089012},{"_id":"themes/next/scripts/events/lib/config.js","hash":"31c5a9639d1734b83cc7368b0e99536ad92fcadc","modified":1596575088871},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1596575089012},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"2fb2c53779a07e187399c94356ba62a0154b9aba","modified":1596575088887},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1596575088887},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"98ad29fd98815ccb6d441f9eff84d8ca9decd27e","modified":1596575088887},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1596575088887},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"55a07dae094045c50cc2b0bf6bb4a1554dfac6f2","modified":1596575088887},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1596575088887},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"84390c685ecb891fe15a382b69425ef526516d0f","modified":1596575088887},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"6f5135856163282c093fe54aa56fcbb5f920eb4d","modified":1596575088902},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"1d9cb9dec0ec4e26d9ef3ae36e11b38e9cec7383","modified":1596575088902},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"df5a9998231008fd22bc903daa30a5453dd15ebd","modified":1596575088902},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"2f550b53372ec150c2538f216399995b8c003a21","modified":1596575088840},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"fcb3ae62c0dff03e79ac109bfdcea85b5430e3aa","modified":1596575088887},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"111f2a1fcbc52738ba0dc86b0e6e20169db6ad42","modified":1596575088840},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"2c8f68be77c9299a2eb598c2cdf21b25596a9dfc","modified":1596575088840},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"7b5429d77b499c416c7ae8bfd8e4ab3e84ee6570","modified":1596575088840},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1596575088840},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"e0b77118de4d262a388ed919eb0b57fbbdbba380","modified":1596575088902},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"ff156aaa0ffa313500ea1f21ec81a0391e57b258","modified":1596575088840},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1596575088840},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"cc69e8674dfbd73797a6311c1bc4fcb4156814ec","modified":1596575088840},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1596575088840},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"82267432c84e2c4454aa8259d6aa05391cbed5ab","modified":1596575088840},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1596575088840},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1596575088840},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1596575088840},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"4a86897a7c32b1b1bc1b3ee3e26b01eb37033626","modified":1596575088840},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"0716eeaebc1b74ecd9d9cd6fd62e14bdd278a5b3","modified":1596575088840},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"5a4b1cd1ffd5fd042c3d0db4a7374371eedac553","modified":1596575088840},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"d96a58fe535f93e54d0d3a40319faeb8f264e631","modified":1596575088840},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1596575088856},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1596575088856},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"cc6572832d90d85b8cb403db9d812e813f3e49ab","modified":1596575088840},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"693bd3f472d4080ba5a46b8671e5c04e2d88a6f7","modified":1596575088856},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1596575088856},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"df02e478cebee56dcae1ce6db9513e859e591227","modified":1596575088856},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1596575088856},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1596575088856},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"bd483e33585e511b4f2729a363813da395e49cad","modified":1596575088856},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"71c728a386b8423b0926baea2de844943b5d77d8","modified":1596575088856},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"5bdaeb104371b0184062d4a8ad1b820eb12f2ba5","modified":1596575088856},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b2e31a508277d67d645bb9f7146c978a08954c3","modified":1596575088856},{"_id":"themes/next/layout/_third-party/comments/valine.njk","hash":"ed618be764132377502f10aaca0213d08c7b649f","modified":1596575088856},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"7a542a566a6d7da4ff0a16c2aaff8e144879a438","modified":1596575088856},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"6eb39df7c30a17f1800897701cfc25403745fe49","modified":1596575088856},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1596575088871},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.njk","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1596575088871},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"e241f08fde2aefebe958fa6f62c8e7225f5270ad","modified":1596575088856},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"f84eaab792ce5a929d781483597782eddb4d1495","modified":1596575088856},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"b066cc2371c7eecc843418c2681401e90958805d","modified":1596575088871},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"21e8a183c516ccfc05651da64a55331416792d57","modified":1596575088871},{"_id":"themes/next/layout/_third-party/search/swiftype.njk","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1596575088856},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"fb4bad3574c1f737d7a9f016ab7cd75d506a66d3","modified":1596575088871},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"9542e63463b2df978090eb8e95c6fffde9417903","modified":1596575088871},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1596575088856},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"72140447d129688a4913561875b04561aba8c548","modified":1596575088871},{"_id":"themes/next/layout/_scripts/pages/schedule.njk","hash":"9492eb9b19f59ad5ec02ee4c276af918b8962e64","modified":1596575088840},{"_id":"themes/next/layout/_scripts/schemes/mist.njk","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1596575088856},{"_id":"themes/next/layout/_scripts/schemes/muse.njk","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1596575088856},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1596575089012},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c0c22796b550de5ec657d97aec23cb4300445334","modified":1596575089012},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"58014a2d087c4126058a99b5b1cb7d8a2eb6224d","modified":1596575089012},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1596575089012},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ad044edaf6d3d9402559129841061e3eaea173cb","modified":1596575088949},{"_id":"themes/next/source/css/_variables/base.styl","hash":"9a74e42ec096fc838337c27f65c4b138d11dbd5c","modified":1596575089012},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"90fc140917c49285bfa873b1f5b590405b851c23","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e9cb5ba70c17e3fbdffb1796210f22a1c7d8d12","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"166300c5bcab8dec0fc37c5a8a9193569281bb76","modified":1596575088965},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"c7ee5e02ee42d9c211d0a9660821bae96b9a42bc","modified":1596575088981},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"e7d321f804f577a021673d8c5bc31a765f96c9fd","modified":1596575088981},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1596575088981},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4aa11cb90a60e839921959be215c215bf7b51343","modified":1596575088981},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1596575088981},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1596575088981},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1596575088981},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"1d3e11d1b39cf3d3196b74f83dbfe6de0f4209bc","modified":1596575088981},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"d1c782c458de2a81918edd2c399defe731de5212","modified":1596575088996},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1596575088981},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"90f7d3baab061e860172b536c9edc38c7fd2ef5c","modified":1596575088996},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"0d044e57d56b10a02b76d22611cfcb85fdacc575","modified":1596575088996},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"d369ec6137f37169b7232d1c7f89d2d717f9bedd","modified":1596575088996},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b0c959561487976131edf28b1a487f5b283b09f5","modified":1596575088996},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"9f3780cfabcd2b5c30e54c53a5e07b4a5034d529","modified":1596575088996},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1596575088996},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"eaec2d883d45e22ae73c0a5514d03e6ac68a9a97","modified":1596575088996},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"c66b13c7496088cd97fee1217339f9c92bec774b","modified":1596575088996},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"07fb7aba11843d43835e4de078492c848a508283","modified":1596575088996},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"411b6b5802a4a1c68765b93c6632f5163567e985","modified":1596575088996},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"814027f713ba79b58bb51ef9e7e2a01482cacd56","modified":1596575088996},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1596575088996},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"16ede27f3ede8b93ad8f8b05a20e4eed2e8daa53","modified":1596575088996},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1596575088996},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"03228ff5ccb4236b99f33dbaeb848283252210a7","modified":1596575088996},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"970e5cbf9b8a8a0ab8787c5c63bac79293435802","modified":1596575088996},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"4dbedfec61cdb75cc54662ca8d721cb18c068729","modified":1596575089012},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1596575089012},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"d9409fee88f44901896d636761ea89226285eb20","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8a204edd922332a196ef4ed1ce6c6bffb3ee4803","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"146bac96eea5f035e3fddb677c84b4412759e164","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"9f63c87bc2825102f93d025c45eb3d52969f3dfb","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"d2c5eb52f41b3c19917efa73ccf6e4f6218a77e7","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"6e042da2fbae43cdc42e333e625464c41baca96a","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"017e0b0554c8107766b12afe727d31fdbefe826c","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"4937269a511484c368c45b86ac98283722cad2fc","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"973d4946ccca51e787ebaf827c4a62f9f1ae9c0e","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"9c2feb2a446856bb6abcae32567a1d0c80fee2ad","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"88f1b0e9034f6ef0a78ab61c7cbc02f4d65a4d83","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"fe0f1edf277b0cd23a8a4635cb0f476d165c17b7","modified":1596575088965},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"93dd1ea94fc4f2b2337b5ae5f0a8f7772b45b93e","modified":1596575088965},{"_id":"themes/next/source/js/schemes/muse.js","hash":"7bad151ba39438181884849868967d42fe71ede7","modified":1596575089043},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"1411f325a8e5c907b02eba576533047cd0f4413f","modified":1596575088965},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e56c5f475ed450becba48b19f2531e074538f2ec","modified":1596575088981},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"477302e20a15549e598f831a8906afffbfe2e1ca","modified":1596575088965},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"46567765e0617189e09893ce017db01526bf3d2c","modified":1596575088981},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"d5039344c977b41365310b52c924deabe5f4af4f","modified":1596575088981},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2ce8d9b01e7ee52de4d2ac6956b5f7280b3ec356","modified":1596575088981},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"af223db94a0785a2b308e222c5bb538f800a7a2f","modified":1596575088981},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"3e48bed4d04339e9b2637481d2aff11454665317","modified":1596575088981},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1596575088981},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a9df1a22a0225a96face4a5360de5ef485216e73","modified":1596575088981},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1596575088981},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1596575088981},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"93ca56a67b505e8a3c29dd271117c2263b381a1e","modified":1596575088981},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"782b06aad720a6225776a0c72e4a8b04633606ae","modified":1596575088981},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"d42685ed9ac9222435b36ea8b0b14e5005ec9634","modified":1596575088981},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"432a92fe9962c0babaf40f4c68c593459d5dd1b3","modified":1596575088981},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"5601535203f2913d9f3446aba96805a7a9f989ed","modified":1596575088981},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"9e1d2760486c20c430190036b4c74434ca8abded","modified":1596575088981},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"fdba57be0d4f0e17f4b34ef81932caf2316d0a2c","modified":1596575088981},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"38d7669843a36e37042e9a8e62993bfd51bff06d","modified":1596575088981},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"899fed183460e4648f1ffc5fab16909c70c022b7","modified":1596575088996},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"1142e8ce345249242d74947c80b0d0161a425da5","modified":1596575088996},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"474669399c6b4cca9f7a6c638eee196f4c8d479d","modified":1596575088996},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1596575088996},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"2ca413420f1ce534f08ada8d23215df0afa21ee7","modified":1596575088996},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"2109f6cc249e9b504c9f9df1511e31a9cad0a740","modified":1596575088996},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"1a020d6cb9b88e9d3b3013c335fb3fcd112f73f1","modified":1596575088996},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"b2082ff4535d6d5b7ab3b84ad1590127844374bf","modified":1596575088996},{"_id":"public/categories/index.html","hash":"c0673944a7028e9ebc6fa7cc90d168f4dbfb5dcf","modified":1605269840961},{"_id":"public/tags/index.html","hash":"5856423c8fb7ab9b53335a895d93a784e2020946","modified":1605269840961},{"_id":"public/categories/Hello-World/index.html","hash":"449456f2df76508c0167f9ab59c493867eb365ef","modified":1605269840961},{"_id":"public/categories/Data-structure-Algorithm/index.html","hash":"7c5c357349a6b8d506dcd13aa30381659ca6b740","modified":1605269840961},{"_id":"public/categories/hexo/index.html","hash":"52beb0b9eb78b39b887c865ad9f968f4a8670308","modified":1605269840961},{"_id":"public/tags/Hello-World/index.html","hash":"c515f661ce7c92283037c0d26ec61c1c46c08a31","modified":1605269840961},{"_id":"public/tags/leetcode/index.html","hash":"3d4fdb142113d21f0f06d1f2e9a2b5311a4d7ff6","modified":1605269840961},{"_id":"public/tags/hexo/index.html","hash":"11214cbeaa635337c73f8f32cc7743724255e746","modified":1605269840961},{"_id":"public/archives/index.html","hash":"1b20302b2ea08dc03c1b642481ecfe3c4c280560","modified":1605600365644},{"_id":"public/archives/2020/index.html","hash":"9955abb610c6a0ee1bb9c71a6114eec828faaa04","modified":1605600365644},{"_id":"public/archives/2020/08/index.html","hash":"3188ebfb9cc2b02151f9438d4f823d36784a4c83","modified":1605269840961},{"_id":"public/about/index.html","hash":"844a5a47e4546e123a204d27b6113f62932fe345","modified":1606487405131},{"_id":"public/2020/08/07/Duplicates/index.html","hash":"bee999c77be81314109b747f5863dc02cfcda918","modified":1605269840961},{"_id":"public/2020/08/06/trie/index.html","hash":"22e6be4f745c5ae8cadf25ec1625cb90fb37f91c","modified":1605269840961},{"_id":"public/2020/08/05/解决搭建博客中tags和categories页面404/index.html","hash":"0745cf9e626c4317fdf8e47996f92ac574c14a16","modified":1600129175819},{"_id":"public/2020/08/04/hello-world/index.html","hash":"7bd8b9566ab716311cdac91a103cb2c39e1b9d82","modified":1600129175819},{"_id":"public/index.html","hash":"97969437513b2d4b88ee03c9d03316a375704fe8","modified":1605603821349},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1596755374541},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1596755374541},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1596755374541},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1596755374541},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1596755374541},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1596755374541},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1596755374541},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1596755374541},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1596755374541},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1596755374541},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1596755374541},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1596755374541},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1596755374541},{"_id":"public/css/main.css","hash":"a00bcfb16bcc34d47f141b69b277583ae3036b45","modified":1596755374541},{"_id":"public/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1596755374541},{"_id":"public/js/local-search.js","hash":"482832ec93ad33b90c771c289d91df4d7a50f1f1","modified":1596755374541},{"_id":"public/js/algolia-search.js","hash":"a57360afb1113b2fc85fc19aed9cc40078df18cc","modified":1596755374541},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1596755374541},{"_id":"public/js/next-boot.js","hash":"3d64244a158b96a10f7ad7605597bc3a7eeff540","modified":1596755374541},{"_id":"public/js/utils.js","hash":"49c30e714e12201725172ad40116038e1ad779b4","modified":1596755374541},{"_id":"public/js/schemes/muse.js","hash":"dcec9c76989977a151d8df81b9444ee1c747e4ee","modified":1596755374541},{"_id":"source/_posts/快速幂.md","hash":"dd2f27273b90d158ba776e85b329991d7e9eec45","modified":1601569506683},{"_id":"public/2020/08/07/快速幂/index.html","hash":"b4ef72e0fec7f29e5288e08747b459b16f62f95d","modified":1605269840961},{"_id":"source/_posts/populate-tree.md","hash":"aa85a0a4bb2fdb62cdf83820242d2179cc8a485e","modified":1601569526202},{"_id":"public/2020/08/25/populate-tree/index.html","hash":"a1ae13e9e513f8c9535c0ee6eb9099ce1fdd795c","modified":1605269840961},{"_id":"source/_posts/datawahle01.md","hash":"fba415d37f8a6aeff7015895550b7a68a2ed4532","modified":1601569804686},{"_id":"public/2020/09/15/datawahle01/index.html","hash":"c29bad8366a1967c0a8d073862d2c0b40b8672dc","modified":1605269840961},{"_id":"public/categories/Machine-Learning/index.html","hash":"e0b74767c6688035c62d5669991b87c8af333cb4","modified":1605269840961},{"_id":"public/archives/2020/09/index.html","hash":"6eef539616dd285a431419902972b34b1416c156","modified":1605269840961},{"_id":"public/tags/DataWhale/index.html","hash":"65470bd19c9b14dcbcf7dffc73604f9a74f15219","modified":1600129175819},{"_id":"public/tags/TIANCHI/index.html","hash":"13b11fb5aec542262abd7a4ea9148c750e2a78b1","modified":1605269840961},{"_id":"public/2020/08/05/hello-world/index.html","hash":"98ec3326744f8d3a0c0dbbbfd00a87dda8cb3fb6","modified":1605269840961},{"_id":"public/2020/08/06/解决搭建博客中tags和categories页面404/index.html","hash":"6906b0a0370003850e55b496f7e07dea486720d6","modified":1605269840961},{"_id":"source/_posts/kmp.md","hash":"c7df784a882423cc35ebc77933f30b5e2547d349","modified":1601985788243},{"_id":"public/2020/08/07/kmp/index.html","hash":"2569ab1756c2f56cfd1c5f6dbcf9edef67a32236","modified":1601978601305},{"_id":"public/archives/2020/10/index.html","hash":"9741646977a2083800602211f5dee331184ab706","modified":1605269840961},{"_id":"public/2020/10/06/kmp/index.html","hash":"f7058604bc03e1dfa647819b073e989177712a55","modified":1605269840961},{"_id":"source/_posts/docker.md","hash":"9ac2130ffa0df9a9809b7274e17234fb6a333fab","modified":1604055033842},{"_id":"public/categories/tools/index.html","hash":"955b3138361c323a0e2bd801890da07f0f2b33c5","modified":1605269840961},{"_id":"public/2020/10/30/docker/index.html","hash":"5488dd6f951ff7cdeab52dd878e9157c3c2df1b3","modified":1605269840961},{"_id":"public/tags/tools/index.html","hash":"db826080afd33317150323dea6ea221373533b9a","modified":1605269840961},{"_id":"source/_posts/快速选择.md","hash":"4d7d227aed485aa2e4ccd53d2dda620675125cc8","modified":1604135421548},{"_id":"public/2020/10/31/快速选择/index.html","hash":"b733b5745628b8a8dc05d2a80be10204c34d5f15","modified":1605269840961},{"_id":"source/_posts/FastAndSlow.md","hash":"58008b341387de2d3293e86599cf4fddde9a48e1","modified":1604672503414},{"_id":"public/archives/page/2/index.html","hash":"7d8f30415fc4a1844f398568fbb66254dd9a626e","modified":1605269840961},{"_id":"public/archives/2020/page/2/index.html","hash":"d28cb7a0a5a6616a989def3607da01f12ca56465","modified":1605269840961},{"_id":"public/archives/2020/11/index.html","hash":"a049318fcf4798777877359b0f0e7ccfc5407746","modified":1605600365644},{"_id":"public/2020/11/06/FastAndSlow/index.html","hash":"a2427aa515e7c2e823c4f3f14063db6e041eb325","modified":1605600365644},{"_id":"public/page/2/index.html","hash":"8fe9635f7848519307608c78058b1d33ef73e46a","modified":1605269840961},{"_id":"source/_posts/exper.md","hash":"9d260d15d4d7c56c4b3d1409df4739112c5a0862","modified":1605603809993},{"_id":"public/categories/Experience/index.html","hash":"0ed4b13c3d50c358a51b832c9758b891ddb1b954","modified":1605600365644},{"_id":"public/tags/面试经历/index.html","hash":"67f0176c61fc9d543c212d6a92504af98d3518b5","modified":1605600365644},{"_id":"public/2020/11/12/exper/index.html","hash":"ea4b5552b3feb47fd896175b9f4641ded90fcc6d","modified":1605603821349},{"_id":"source/_posts/smartQandA.md","hash":"e1b6f2555713053f3b4c82cb93ebeaceb7f175a2","modified":1605269829725},{"_id":"public/categories/NLP/index.html","hash":"44b2b43de3657c20cb364cdaa36ff49ac1fe1e4e","modified":1605269840961},{"_id":"public/tags/智能问答/index.html","hash":"7747abe6319573a97a9b6b2026e5f6bb81421000","modified":1605269840961},{"_id":"public/2020/11/13/smartQandA/index.html","hash":"328b1315fc0cc042a254983601b8fae5da65e6b9","modified":1605600365644}],"Category":[{"name":"Hello World","_id":"ckdjex8tb0004pstocf8f5pr4"},{"name":"Data structure & Algorithm","_id":"ckdjex8tf0009pstoacq49b20"},{"name":"hexo","_id":"ckdjex8tj000gpsto53wbgtoo"},{"name":"Machine Learning","_id":"ckf37lil40001sktobsm257o2"},{"name":"tools","_id":"ckgw39c3b0001kwto1xsv8bb4"},{"name":"Experience","_id":"ckhdo4spc0001ckto7v8ual7h"},{"name":"NLP","_id":"ckhg87t4i0001m4toeeyredcr"}],"Data":[],"Page":[{"title":"About Me","date":"2020-08-04T16:04:05.000Z","tags":["Self Introdution"],"categories":["Introduction"],"_content":"**Ruixiang Wang** (*Chinese:* **王睿翔**)\n\n#### Education:\n* M.S. in Computer Science @**[RWTH-Aachen University](https://www.rwth-aachen.de/go/id/a/?lidx=1)**, Germany\n* B.Eng. in Software Engineering @**[Xidian University](https://en.xidian.edu.cn/)**, China\n\n#### Experience:\n\n* NLP Engineer intern @**[Kwai](http://www.kwai.com/)**, China, Beijing\n* Machine Learning Engineer intern @**[Tencent](https://www.tencent.com/en-us/about.html)**, China, Shenzhen\n* Software Engineer intern @**[Essex Lake Group](https://essexlg.com/)**, China, Xi'an\n* Software Engineer intern @**[Danale,Inc](https://intl.danale.com/)**, China, Shenzhen\n\n#### Skills:\n\n* Machine Learning & NLP (Natural Language Processing) & Deep Learning\n* Data Mining, Text Mining, Web Mining\n* Algorithm & Data Structure\n* Parallel Programming, High Performance Computing\n* Python, C++\n* Github, Linux, LaTex\n\n#### Social Meida:\n* [Github](https://github.com/ichbinhandsome)\n* [LinkedIn](https://www.linkedin.com/in/ruixiang-wang-85769a199/)\n* [LeetCode](https://leetcode.com/ruixiangwang/)\n* [Kaggle](https://www.kaggle.com/wangruixiang07)\n* [ZhiHu](https://www.zhihu.com/people/besser-46)\n* [力扣](https://leetcode-cn.com/u/ichbinhandsome/)\n* [天池](https://tianchi.aliyun.com/home/science/scienceDetail?userId=1095279604977)\n","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2020-08-05 00:04:05\ntags: \n    - Self Introdution\ncategories: \n    - Introduction\n---\n**Ruixiang Wang** (*Chinese:* **王睿翔**)\n\n#### Education:\n* M.S. in Computer Science @**[RWTH-Aachen University](https://www.rwth-aachen.de/go/id/a/?lidx=1)**, Germany\n* B.Eng. in Software Engineering @**[Xidian University](https://en.xidian.edu.cn/)**, China\n\n#### Experience:\n\n* NLP Engineer intern @**[Kwai](http://www.kwai.com/)**, China, Beijing\n* Machine Learning Engineer intern @**[Tencent](https://www.tencent.com/en-us/about.html)**, China, Shenzhen\n* Software Engineer intern @**[Essex Lake Group](https://essexlg.com/)**, China, Xi'an\n* Software Engineer intern @**[Danale,Inc](https://intl.danale.com/)**, China, Shenzhen\n\n#### Skills:\n\n* Machine Learning & NLP (Natural Language Processing) & Deep Learning\n* Data Mining, Text Mining, Web Mining\n* Algorithm & Data Structure\n* Parallel Programming, High Performance Computing\n* Python, C++\n* Github, Linux, LaTex\n\n#### Social Meida:\n* [Github](https://github.com/ichbinhandsome)\n* [LinkedIn](https://www.linkedin.com/in/ruixiang-wang-85769a199/)\n* [LeetCode](https://leetcode.com/ruixiangwang/)\n* [Kaggle](https://www.kaggle.com/wangruixiang07)\n* [ZhiHu](https://www.zhihu.com/people/besser-46)\n* [力扣](https://leetcode-cn.com/u/ichbinhandsome/)\n* [天池](https://tianchi.aliyun.com/home/science/scienceDetail?userId=1095279604977)\n","updated":"2020-11-27T14:29:44.695Z","path":"about/index.html","_id":"ckdjex8t00000psto6g075x9w","comments":1,"layout":"page","content":"<p><strong>Ruixiang Wang</strong> (<em>Chinese:</em> <strong>王睿翔</strong>)</p>\n<h4 id=\"Education\"><a href=\"#Education\" class=\"headerlink\" title=\"Education:\"></a>Education:</h4><ul>\n<li>M.S. in Computer Science @<strong><a href=\"https://www.rwth-aachen.de/go/id/a/?lidx=1\">RWTH-Aachen University</a></strong>, Germany</li>\n<li>B.Eng. in Software Engineering @<strong><a href=\"https://en.xidian.edu.cn/\">Xidian University</a></strong>, China</li>\n</ul>\n<h4 id=\"Experience\"><a href=\"#Experience\" class=\"headerlink\" title=\"Experience:\"></a>Experience:</h4><ul>\n<li>NLP Engineer intern @<strong><a href=\"http://www.kwai.com/\">Kwai</a></strong>, China, Beijing</li>\n<li>Machine Learning Engineer intern @<strong><a href=\"https://www.tencent.com/en-us/about.html\">Tencent</a></strong>, China, Shenzhen</li>\n<li>Software Engineer intern @<strong><a href=\"https://essexlg.com/\">Essex Lake Group</a></strong>, China, Xi’an</li>\n<li>Software Engineer intern @<strong><a href=\"https://intl.danale.com/\">Danale,Inc</a></strong>, China, Shenzhen</li>\n</ul>\n<h4 id=\"Skills\"><a href=\"#Skills\" class=\"headerlink\" title=\"Skills:\"></a>Skills:</h4><ul>\n<li>Machine Learning &amp; NLP (Natural Language Processing) &amp; Deep Learning</li>\n<li>Data Mining, Text Mining, Web Mining</li>\n<li>Algorithm &amp; Data Structure</li>\n<li>Parallel Programming, High Performance Computing</li>\n<li>Python, C++</li>\n<li>Github, Linux, LaTex</li>\n</ul>\n<h4 id=\"Social-Meida\"><a href=\"#Social-Meida\" class=\"headerlink\" title=\"Social Meida:\"></a>Social Meida:</h4><ul>\n<li><a href=\"https://github.com/ichbinhandsome\">Github</a></li>\n<li><a href=\"https://www.linkedin.com/in/ruixiang-wang-85769a199/\">LinkedIn</a></li>\n<li><a href=\"https://leetcode.com/ruixiangwang/\">LeetCode</a></li>\n<li><a href=\"https://www.kaggle.com/wangruixiang07\">Kaggle</a></li>\n<li><a href=\"https://www.zhihu.com/people/besser-46\">ZhiHu</a></li>\n<li><a href=\"https://leetcode-cn.com/u/ichbinhandsome/\">力扣</a></li>\n<li><a href=\"https://tianchi.aliyun.com/home/science/scienceDetail?userId=1095279604977\">天池</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Ruixiang Wang</strong> (<em>Chinese:</em> <strong>王睿翔</strong>)</p>\n<h4 id=\"Education\"><a href=\"#Education\" class=\"headerlink\" title=\"Education:\"></a>Education:</h4><ul>\n<li>M.S. in Computer Science @<strong><a href=\"https://www.rwth-aachen.de/go/id/a/?lidx=1\">RWTH-Aachen University</a></strong>, Germany</li>\n<li>B.Eng. in Software Engineering @<strong><a href=\"https://en.xidian.edu.cn/\">Xidian University</a></strong>, China</li>\n</ul>\n<h4 id=\"Experience\"><a href=\"#Experience\" class=\"headerlink\" title=\"Experience:\"></a>Experience:</h4><ul>\n<li>NLP Engineer intern @<strong><a href=\"http://www.kwai.com/\">Kwai</a></strong>, China, Beijing</li>\n<li>Machine Learning Engineer intern @<strong><a href=\"https://www.tencent.com/en-us/about.html\">Tencent</a></strong>, China, Shenzhen</li>\n<li>Software Engineer intern @<strong><a href=\"https://essexlg.com/\">Essex Lake Group</a></strong>, China, Xi’an</li>\n<li>Software Engineer intern @<strong><a href=\"https://intl.danale.com/\">Danale,Inc</a></strong>, China, Shenzhen</li>\n</ul>\n<h4 id=\"Skills\"><a href=\"#Skills\" class=\"headerlink\" title=\"Skills:\"></a>Skills:</h4><ul>\n<li>Machine Learning &amp; NLP (Natural Language Processing) &amp; Deep Learning</li>\n<li>Data Mining, Text Mining, Web Mining</li>\n<li>Algorithm &amp; Data Structure</li>\n<li>Parallel Programming, High Performance Computing</li>\n<li>Python, C++</li>\n<li>Github, Linux, LaTex</li>\n</ul>\n<h4 id=\"Social-Meida\"><a href=\"#Social-Meida\" class=\"headerlink\" title=\"Social Meida:\"></a>Social Meida:</h4><ul>\n<li><a href=\"https://github.com/ichbinhandsome\">Github</a></li>\n<li><a href=\"https://www.linkedin.com/in/ruixiang-wang-85769a199/\">LinkedIn</a></li>\n<li><a href=\"https://leetcode.com/ruixiangwang/\">LeetCode</a></li>\n<li><a href=\"https://www.kaggle.com/wangruixiang07\">Kaggle</a></li>\n<li><a href=\"https://www.zhihu.com/people/besser-46\">ZhiHu</a></li>\n<li><a href=\"https://leetcode-cn.com/u/ichbinhandsome/\">力扣</a></li>\n<li><a href=\"https://tianchi.aliyun.com/home/science/scienceDetail?userId=1095279604977\">天池</a></li>\n</ul>\n"},{"date":"2020-08-05T16:39:48.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\n# title: categories\ndate: 2020-08-05 18:39:48\ntype: categories\n# layout: categories\n---\n","updated":"2020-08-05T18:14:27.756Z","path":"categories/index.html","title":"","comments":1,"layout":"page","_id":"ckdjex8t80002pstoakbqdhu1","content":"","site":{"data":{}},"excerpt":"","more":""},{"date":"2020-08-05T16:39:20.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\n# title: tags\ndate: 2020-08-05 18:39:20\ntype: tags\n---\n","updated":"2020-08-05T18:16:00.093Z","path":"tags/index.html","title":"","comments":1,"layout":"page","_id":"ckdjex8td0006psto04qt9c41","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\nThis is a test file to check weather the configuration of this hexo blog works.\n\n<!-- more -->\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: \n    - Hello World\ncategories: \n    - Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\nThis is a test file to check weather the configuration of this hexo blog works.\n\n<!-- more -->\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2020-08-04T21:02:42.573Z","updated":"2020-08-06T16:31:16.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdjex8t40001pstobfok2j6l","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>This is a test file to check weather the configuration of this hexo blog works.</p>\n<a id=\"more\"></a>\n\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><p>This is a test file to check weather the configuration of this hexo blog works.</p>","more":"<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"【leetcode】Find All Duplicates in an Array","date":"2020-08-06T16:35:26.000Z","_content":"\n### Problem:\n\nGiven an array of integers, 1 ≤ a[i] ≤ *n* (*n* = size of array), some elements appear **twice** and others appear **once**.\n\nFind all the elements that appear **twice** in this array.\n\nCould you do it without extra space and in O(*n*) runtime?\n\n*Example:*\n\n```python\nInput:\n[4,3,2,7,8,2,3,1]\n\nOutput:\n[2,3]\n```\n\n### Solutions:\n\nThis is a very confusing question, since we must solve it in  O(*n*) runtime without extra space. Obviously, the easiest way is to use `hash set`, which needs extra space. Here we will construct two different tricky hash functions within the original array, which will  simulate the process of `hash set`.\n\n<!-- more -->\n\n* negative-positive hash function\n\n  ```\n  Traverse the array. Do following for every index i of A[].\n  {\n  // Since 1 ≤ a[i] ≤ n (n = size of array), so we must use abs(A[i])-1 as target index for element A[i], otherwise, list index out of range\n  check for sign of A[abs(A[i])-1] ;\n  if positive then\n     make it negative by   A[abs(A[i])-1]= -A[abs(A[i])-1];\n  else  // i.e., A[abs(A[i])-1] is negative\n     this   element (ith element of list) is a repetition\n  }\n  ```\n\n  ```\n  Example: A[] =  {1, 1, 2, 3, 2}\n  i=0; \n  Check sign of A[abs(A[0])-1] which is A[0].  A[0] is positive, so make it negative. \n  Array now becomes {-1, 1, 2, 3, 2}\n  \n  i=1; \n  Check sign of A[abs(A[1])-1] which is A[0].  A[0] is negative, so A[1] is a repetition.\n  \n  i=2; \n  Check sign of A[abs(A[2])-1] which is A[1].  A[1] is  positive, so make it negative. '\n  Array now becomes {1, -1, 2, 3, 2}\n  \n  i=3; \n  Check sign of A[abs(A[3])-1] which is A[2].  A[2] is  positive, so make it negative. \n  Array now becomes {1, -1, -2, 3, 2}\n  \n  i=4; \n  Check sign of A[abs(A[4])-1] which is A[1].  A[1] is negative, so A[4] is a repetition.\n  ```\n\n  ```python\n  class Solution:\n      def findDuplicates(self, nums: List[int]) -> List[int]:\n          res = []\n          for x in nums:\n               if nums[abs(x)-1] < 0:\n                   res.append(abs(x))\n               else:\n                   nums[abs(x)-1] *= -1\n           return res\n  ```\n\n<br>\n\n* add-length hash function\n\n  This idea of this method is similar to the first one, which also construct a hash function within the array. Instead of making target index for element A[i] negative, we add the `len(A)` into it,  i.e. `A[A[i] % len(A)] += len(A)`. If one element occurs twice, so `A[A[i] % len(A)] > 2*len(A)`. We use two loops, the first loop we add `len(A)` to the corresponding target of `A[i]`, the second loop we will traverse the modified `A`, and find all elements satisfied `A[A[i] % len(A)] > 2*len(A)` as result.\n\n  ```python\n  class Solution:\n      def findDuplicates(self, nums: List[int]) -> List[int]:\n          res = []\n          for i in range(len(nums)):\n              nums[(nums[i]-1) % len(nums)] += len(nums)\n          for i in range(len(nums)):\n              if nums[i] > 2*len(nums):\n                  res.append(i+1)\n          return res\n  ```\n\n  \n\n  ","source":"_posts/Duplicates.md","raw":"---\ntitle: 【leetcode】Find All Duplicates in an Array\ndate: 2020-08-07 00:35:26\ntags: leetcode\ncategories: Data structure & Algorithm\n---\n\n### Problem:\n\nGiven an array of integers, 1 ≤ a[i] ≤ *n* (*n* = size of array), some elements appear **twice** and others appear **once**.\n\nFind all the elements that appear **twice** in this array.\n\nCould you do it without extra space and in O(*n*) runtime?\n\n*Example:*\n\n```python\nInput:\n[4,3,2,7,8,2,3,1]\n\nOutput:\n[2,3]\n```\n\n### Solutions:\n\nThis is a very confusing question, since we must solve it in  O(*n*) runtime without extra space. Obviously, the easiest way is to use `hash set`, which needs extra space. Here we will construct two different tricky hash functions within the original array, which will  simulate the process of `hash set`.\n\n<!-- more -->\n\n* negative-positive hash function\n\n  ```\n  Traverse the array. Do following for every index i of A[].\n  {\n  // Since 1 ≤ a[i] ≤ n (n = size of array), so we must use abs(A[i])-1 as target index for element A[i], otherwise, list index out of range\n  check for sign of A[abs(A[i])-1] ;\n  if positive then\n     make it negative by   A[abs(A[i])-1]= -A[abs(A[i])-1];\n  else  // i.e., A[abs(A[i])-1] is negative\n     this   element (ith element of list) is a repetition\n  }\n  ```\n\n  ```\n  Example: A[] =  {1, 1, 2, 3, 2}\n  i=0; \n  Check sign of A[abs(A[0])-1] which is A[0].  A[0] is positive, so make it negative. \n  Array now becomes {-1, 1, 2, 3, 2}\n  \n  i=1; \n  Check sign of A[abs(A[1])-1] which is A[0].  A[0] is negative, so A[1] is a repetition.\n  \n  i=2; \n  Check sign of A[abs(A[2])-1] which is A[1].  A[1] is  positive, so make it negative. '\n  Array now becomes {1, -1, 2, 3, 2}\n  \n  i=3; \n  Check sign of A[abs(A[3])-1] which is A[2].  A[2] is  positive, so make it negative. \n  Array now becomes {1, -1, -2, 3, 2}\n  \n  i=4; \n  Check sign of A[abs(A[4])-1] which is A[1].  A[1] is negative, so A[4] is a repetition.\n  ```\n\n  ```python\n  class Solution:\n      def findDuplicates(self, nums: List[int]) -> List[int]:\n          res = []\n          for x in nums:\n               if nums[abs(x)-1] < 0:\n                   res.append(abs(x))\n               else:\n                   nums[abs(x)-1] *= -1\n           return res\n  ```\n\n<br>\n\n* add-length hash function\n\n  This idea of this method is similar to the first one, which also construct a hash function within the array. Instead of making target index for element A[i] negative, we add the `len(A)` into it,  i.e. `A[A[i] % len(A)] += len(A)`. If one element occurs twice, so `A[A[i] % len(A)] > 2*len(A)`. We use two loops, the first loop we add `len(A)` to the corresponding target of `A[i]`, the second loop we will traverse the modified `A`, and find all elements satisfied `A[A[i] % len(A)] > 2*len(A)` as result.\n\n  ```python\n  class Solution:\n      def findDuplicates(self, nums: List[int]) -> List[int]:\n          res = []\n          for i in range(len(nums)):\n              nums[(nums[i]-1) % len(nums)] += len(nums)\n          for i in range(len(nums)):\n              if nums[i] > 2*len(nums):\n                  res.append(i+1)\n          return res\n  ```\n\n  \n\n  ","slug":"Duplicates","published":1,"updated":"2020-10-01T16:25:17.704Z","_id":"ckdjex8t90003pstofkqd73vh","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h3><p>Given an array of integers, 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> = size of array), some elements appear <strong>twice</strong> and others appear <strong>once</strong>.</p>\n<p>Find all the elements that appear <strong>twice</strong> in this array.</p>\n<p>Could you do it without extra space and in O(<em>n</em>) runtime?</p>\n<p><em>Example:</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input:</span><br><span class=\"line\">[<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">Output:</span><br><span class=\"line\">[<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions:\"></a>Solutions:</h3><p>This is a very confusing question, since we must solve it in  O(<em>n</em>) runtime without extra space. Obviously, the easiest way is to use <code>hash set</code>, which needs extra space. Here we will construct two different tricky hash functions within the original array, which will  simulate the process of <code>hash set</code>.</p>\n<a id=\"more\"></a>\n\n<ul>\n<li><p>negative-positive hash function</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traverse the array. Do following for every index i of A[].</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#x2F;&#x2F; Since 1 ≤ a[i] ≤ n (n &#x3D; size of array), so we must use abs(A[i])-1 as target index for element A[i], otherwise, list index out of range</span><br><span class=\"line\">check for sign of A[abs(A[i])-1] ;</span><br><span class=\"line\">if positive then</span><br><span class=\"line\">   make it negative by   A[abs(A[i])-1]&#x3D; -A[abs(A[i])-1];</span><br><span class=\"line\">else  &#x2F;&#x2F; i.e., A[abs(A[i])-1] is negative</span><br><span class=\"line\">   this   element (ith element of list) is a repetition</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example: A[] &#x3D;  &#123;1, 1, 2, 3, 2&#125;</span><br><span class=\"line\">i&#x3D;0; </span><br><span class=\"line\">Check sign of A[abs(A[0])-1] which is A[0].  A[0] is positive, so make it negative. </span><br><span class=\"line\">Array now becomes &#123;-1, 1, 2, 3, 2&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">i&#x3D;1; </span><br><span class=\"line\">Check sign of A[abs(A[1])-1] which is A[0].  A[0] is negative, so A[1] is a repetition.</span><br><span class=\"line\"></span><br><span class=\"line\">i&#x3D;2; </span><br><span class=\"line\">Check sign of A[abs(A[2])-1] which is A[1].  A[1] is  positive, so make it negative. &#39;</span><br><span class=\"line\">Array now becomes &#123;1, -1, 2, 3, 2&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">i&#x3D;3; </span><br><span class=\"line\">Check sign of A[abs(A[3])-1] which is A[2].  A[2] is  positive, so make it negative. </span><br><span class=\"line\">Array now becomes &#123;1, -1, -2, 3, 2&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">i&#x3D;4; </span><br><span class=\"line\">Check sign of A[abs(A[4])-1] which is A[1].  A[1] is negative, so A[4] is a repetition.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findDuplicates</span>(<span class=\"params\">self, nums: List[int]</span>) -&gt; List[int]:</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">             <span class=\"keyword\">if</span> nums[abs(x)<span class=\"number\">-1</span>] &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                 res.append(abs(x))</span><br><span class=\"line\">             <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                 nums[abs(x)<span class=\"number\">-1</span>] *= <span class=\"number\">-1</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<br>\n\n<ul>\n<li><p>add-length hash function</p>\n<p>This idea of this method is similar to the first one, which also construct a hash function within the array. Instead of making target index for element A[i] negative, we add the <code>len(A)</code> into it,  i.e. <code>A[A[i] % len(A)] += len(A)</code>. If one element occurs twice, so <code>A[A[i] % len(A)] &gt; 2*len(A)</code>. We use two loops, the first loop we add <code>len(A)</code> to the corresponding target of <code>A[i]</code>, the second loop we will traverse the modified <code>A</code>, and find all elements satisfied <code>A[A[i] % len(A)] &gt; 2*len(A)</code> as result.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findDuplicates</span>(<span class=\"params\">self, nums: List[int]</span>) -&gt; List[int]:</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">            nums[(nums[i]<span class=\"number\">-1</span>) % len(nums)] += len(nums)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] &gt; <span class=\"number\">2</span>*len(nums):</span><br><span class=\"line\">                res.append(i+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h3><p>Given an array of integers, 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> = size of array), some elements appear <strong>twice</strong> and others appear <strong>once</strong>.</p>\n<p>Find all the elements that appear <strong>twice</strong> in this array.</p>\n<p>Could you do it without extra space and in O(<em>n</em>) runtime?</p>\n<p><em>Example:</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input:</span><br><span class=\"line\">[<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">Output:</span><br><span class=\"line\">[<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Solutions\"><a href=\"#Solutions\" class=\"headerlink\" title=\"Solutions:\"></a>Solutions:</h3><p>This is a very confusing question, since we must solve it in  O(<em>n</em>) runtime without extra space. Obviously, the easiest way is to use <code>hash set</code>, which needs extra space. Here we will construct two different tricky hash functions within the original array, which will  simulate the process of <code>hash set</code>.</p>","more":"<ul>\n<li><p>negative-positive hash function</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traverse the array. Do following for every index i of A[].</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#x2F;&#x2F; Since 1 ≤ a[i] ≤ n (n &#x3D; size of array), so we must use abs(A[i])-1 as target index for element A[i], otherwise, list index out of range</span><br><span class=\"line\">check for sign of A[abs(A[i])-1] ;</span><br><span class=\"line\">if positive then</span><br><span class=\"line\">   make it negative by   A[abs(A[i])-1]&#x3D; -A[abs(A[i])-1];</span><br><span class=\"line\">else  &#x2F;&#x2F; i.e., A[abs(A[i])-1] is negative</span><br><span class=\"line\">   this   element (ith element of list) is a repetition</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example: A[] &#x3D;  &#123;1, 1, 2, 3, 2&#125;</span><br><span class=\"line\">i&#x3D;0; </span><br><span class=\"line\">Check sign of A[abs(A[0])-1] which is A[0].  A[0] is positive, so make it negative. </span><br><span class=\"line\">Array now becomes &#123;-1, 1, 2, 3, 2&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">i&#x3D;1; </span><br><span class=\"line\">Check sign of A[abs(A[1])-1] which is A[0].  A[0] is negative, so A[1] is a repetition.</span><br><span class=\"line\"></span><br><span class=\"line\">i&#x3D;2; </span><br><span class=\"line\">Check sign of A[abs(A[2])-1] which is A[1].  A[1] is  positive, so make it negative. &#39;</span><br><span class=\"line\">Array now becomes &#123;1, -1, 2, 3, 2&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">i&#x3D;3; </span><br><span class=\"line\">Check sign of A[abs(A[3])-1] which is A[2].  A[2] is  positive, so make it negative. </span><br><span class=\"line\">Array now becomes &#123;1, -1, -2, 3, 2&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">i&#x3D;4; </span><br><span class=\"line\">Check sign of A[abs(A[4])-1] which is A[1].  A[1] is negative, so A[4] is a repetition.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findDuplicates</span>(<span class=\"params\">self, nums: List[int]</span>) -&gt; List[int]:</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">             <span class=\"keyword\">if</span> nums[abs(x)<span class=\"number\">-1</span>] &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                 res.append(abs(x))</span><br><span class=\"line\">             <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                 nums[abs(x)<span class=\"number\">-1</span>] *= <span class=\"number\">-1</span></span><br><span class=\"line\">         <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<br>\n\n<ul>\n<li><p>add-length hash function</p>\n<p>This idea of this method is similar to the first one, which also construct a hash function within the array. Instead of making target index for element A[i] negative, we add the <code>len(A)</code> into it,  i.e. <code>A[A[i] % len(A)] += len(A)</code>. If one element occurs twice, so <code>A[A[i] % len(A)] &gt; 2*len(A)</code>. We use two loops, the first loop we add <code>len(A)</code> to the corresponding target of <code>A[i]</code>, the second loop we will traverse the modified <code>A</code>, and find all elements satisfied <code>A[A[i] % len(A)] &gt; 2*len(A)</code> as result.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findDuplicates</span>(<span class=\"params\">self, nums: List[int]</span>) -&gt; List[int]:</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">            nums[(nums[i]<span class=\"number\">-1</span>) % len(nums)] += len(nums)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] &gt; <span class=\"number\">2</span>*len(nums):</span><br><span class=\"line\">                res.append(i+<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>"},{"title":"【leetcode】Implement Trie (Prefix Tree)","date":"2020-08-06T10:25:16.000Z","_content":"\n### Problem:\n\nImplement a trie with `insert`, `search`, and `startsWith` methods.\n\n*Example:*\n\n```java\nTrie trie = new Trie();\n\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // returns true\ntrie.search(\"app\");     // returns false\ntrie.startsWith(\"app\"); // returns true\ntrie.insert(\"app\");   \ntrie.search(\"app\");     // returns true\n```\n\n### Methods & Solutions:\n\n<!-- more -->\n\n* **Frist method using `TrieNode`**\n\n1. First define a `TrieNode` class, it has two attributes, one is `children`, the other is `isWord`. Attribute `children`  represents  the sub nodes of  parent node.  Since one node may have many different sub nodes, I set  `children`   into `dict()` or `collections.defaultdict()`.  Attribute `isWord` means weather this character is the end of inserted word, it will be used in  `trie.serach()`. we initialize `isWord = False` , then if the character is the end of word, we set it into `True`.    \n\n   ```python\n   class TrieNode:\n       \n       def __init__(self):\n           self.children  = {} # store characters of a word according ro their indices\n           # self.children  = collections.defaultdict(TrieNode)\n           self.isWord = False\n   ```\n\n2. Define `__init__` in class `Trie`\n\n   ```python\n   class Trie:\n   \tdef __init__(self):\n       \t\"\"\"\n       \tInitialize your data structure here.\n       \t\"\"\"\n       \tself.root = TrieNode() # root node is an empty node.\n   ```\n\n3. Define `insert` in class `Trie`\n\n   ```python\n   def insert(self, word: str) -> None:\n           \"\"\"\n           Inserts a word into the trie.\n           \"\"\"\n           node  = self.root # begin from root node in Trie\n           \n           for w in word:\n               if w not in node.children:\n                   node.children[w] = TrieNode() # store character in node.children\n               node  = node.children[w] # update current node into its children node\n               \n           node.isWord = True # this node represent the last character of word\n   ```\n\n4. Define `search` in class `Trie`\n\n   ```python\n   def search(self, word: str) -> bool:\n           \"\"\"\n           Returns if the word is in the trie.\n           \"\"\"\n           node  = self.root # begin from root node, which is empty\n           for w in word:\n               # if character w not in inserted word, return False\n               if w not in node.children: return False \n               node = node.children[w] # update current node\n           return node.isWord # judge if it is the end character\n   ```\n\n5. Define `startsWith` in class `Trie`\n\n   ```python\n   def startsWith(self, prefix: str) -> bool:\n           \"\"\"\n           Returns if there is any word in the trie that starts with the given prefix.\n           \"\"\"\n           node = self.root # begin from root node, which is empty\n           \n           for w in prefix:\n               if w not in node.children: return False\n               node = node.children[w]\n           return True\n   ```\n\n* **Second method using `dict()` from python**\n\nInstead of creating new `TrieNode` class, we just use `dict` here. Each `dict` represents a node.\n\n```python\nclass Trie:\n    # use dict to implement Trie\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = {} # root node\n\n    def insert(self, word: str) -> None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n        p = self.root # begin from root node\n        for w in word:\n            if w not in p:\n                p[w] = {} # add new node into current node\n            p = p[w] # update current node\n            \n        # set '#' as the end signal, add into current node\n        p['#'] = True \n\n    def find(self, prefix): # helper fuction to judge if the prefix in Trie\n        p = self.root\n        for w in prefix:\n            if w not in p: return None\n            p = p[w]\n        return p\n           \n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n        return self.find(word) is not None and '#' in self.find(word)  \n\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\"\n        return self.find(prefix) is not None\n```\n\n","source":"_posts/trie.md","raw":"---\ntitle: 【leetcode】Implement Trie (Prefix Tree)\ndate: 2020-08-06 18:25:16\ntags: leetcode\ncategories: Data structure & Algorithm\n---\n\n### Problem:\n\nImplement a trie with `insert`, `search`, and `startsWith` methods.\n\n*Example:*\n\n```java\nTrie trie = new Trie();\n\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // returns true\ntrie.search(\"app\");     // returns false\ntrie.startsWith(\"app\"); // returns true\ntrie.insert(\"app\");   \ntrie.search(\"app\");     // returns true\n```\n\n### Methods & Solutions:\n\n<!-- more -->\n\n* **Frist method using `TrieNode`**\n\n1. First define a `TrieNode` class, it has two attributes, one is `children`, the other is `isWord`. Attribute `children`  represents  the sub nodes of  parent node.  Since one node may have many different sub nodes, I set  `children`   into `dict()` or `collections.defaultdict()`.  Attribute `isWord` means weather this character is the end of inserted word, it will be used in  `trie.serach()`. we initialize `isWord = False` , then if the character is the end of word, we set it into `True`.    \n\n   ```python\n   class TrieNode:\n       \n       def __init__(self):\n           self.children  = {} # store characters of a word according ro their indices\n           # self.children  = collections.defaultdict(TrieNode)\n           self.isWord = False\n   ```\n\n2. Define `__init__` in class `Trie`\n\n   ```python\n   class Trie:\n   \tdef __init__(self):\n       \t\"\"\"\n       \tInitialize your data structure here.\n       \t\"\"\"\n       \tself.root = TrieNode() # root node is an empty node.\n   ```\n\n3. Define `insert` in class `Trie`\n\n   ```python\n   def insert(self, word: str) -> None:\n           \"\"\"\n           Inserts a word into the trie.\n           \"\"\"\n           node  = self.root # begin from root node in Trie\n           \n           for w in word:\n               if w not in node.children:\n                   node.children[w] = TrieNode() # store character in node.children\n               node  = node.children[w] # update current node into its children node\n               \n           node.isWord = True # this node represent the last character of word\n   ```\n\n4. Define `search` in class `Trie`\n\n   ```python\n   def search(self, word: str) -> bool:\n           \"\"\"\n           Returns if the word is in the trie.\n           \"\"\"\n           node  = self.root # begin from root node, which is empty\n           for w in word:\n               # if character w not in inserted word, return False\n               if w not in node.children: return False \n               node = node.children[w] # update current node\n           return node.isWord # judge if it is the end character\n   ```\n\n5. Define `startsWith` in class `Trie`\n\n   ```python\n   def startsWith(self, prefix: str) -> bool:\n           \"\"\"\n           Returns if there is any word in the trie that starts with the given prefix.\n           \"\"\"\n           node = self.root # begin from root node, which is empty\n           \n           for w in prefix:\n               if w not in node.children: return False\n               node = node.children[w]\n           return True\n   ```\n\n* **Second method using `dict()` from python**\n\nInstead of creating new `TrieNode` class, we just use `dict` here. Each `dict` represents a node.\n\n```python\nclass Trie:\n    # use dict to implement Trie\n\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = {} # root node\n\n    def insert(self, word: str) -> None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n        p = self.root # begin from root node\n        for w in word:\n            if w not in p:\n                p[w] = {} # add new node into current node\n            p = p[w] # update current node\n            \n        # set '#' as the end signal, add into current node\n        p['#'] = True \n\n    def find(self, prefix): # helper fuction to judge if the prefix in Trie\n        p = self.root\n        for w in prefix:\n            if w not in p: return None\n            p = p[w]\n        return p\n           \n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n        return self.find(word) is not None and '#' in self.find(word)  \n\n    def startsWith(self, prefix: str) -> bool:\n        \"\"\"\n        Returns if there is any word in the trie that starts with the given prefix.\n        \"\"\"\n        return self.find(prefix) is not None\n```\n\n","slug":"trie","published":1,"updated":"2020-10-01T16:25:48.625Z","_id":"ckdjex8td0007psto7yuk7fcc","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h3><p>Implement a trie with <code>insert</code>, <code>search</code>, and <code>startsWith</code> methods.</p>\n<p><em>Example:</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Trie trie = <span class=\"keyword\">new</span> Trie();</span><br><span class=\"line\"></span><br><span class=\"line\">trie.insert(<span class=\"string\">&quot;apple&quot;</span>);</span><br><span class=\"line\">trie.search(<span class=\"string\">&quot;apple&quot;</span>);   <span class=\"comment\">// returns true</span></span><br><span class=\"line\">trie.search(<span class=\"string\">&quot;app&quot;</span>);     <span class=\"comment\">// returns false</span></span><br><span class=\"line\">trie.startsWith(<span class=\"string\">&quot;app&quot;</span>); <span class=\"comment\">// returns true</span></span><br><span class=\"line\">trie.insert(<span class=\"string\">&quot;app&quot;</span>);   </span><br><span class=\"line\">trie.search(<span class=\"string\">&quot;app&quot;</span>);     <span class=\"comment\">// returns true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Methods-amp-Solutions\"><a href=\"#Methods-amp-Solutions\" class=\"headerlink\" title=\"Methods &amp; Solutions:\"></a>Methods &amp; Solutions:</h3><a id=\"more\"></a>\n\n<ul>\n<li><strong>Frist method using <code>TrieNode</code></strong></li>\n</ul>\n<ol>\n<li><p>First define a <code>TrieNode</code> class, it has two attributes, one is <code>children</code>, the other is <code>isWord</code>. Attribute <code>children</code>  represents  the sub nodes of  parent node.  Since one node may have many different sub nodes, I set  <code>children</code>   into <code>dict()</code> or <code>collections.defaultdict()</code>.  Attribute <code>isWord</code> means weather this character is the end of inserted word, it will be used in  <code>trie.serach()</code>. we initialize <code>isWord = False</code> , then if the character is the end of word, we set it into <code>True</code>.    </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.children  = &#123;&#125; <span class=\"comment\"># store characters of a word according ro their indices</span></span><br><span class=\"line\">        <span class=\"comment\"># self.children  = collections.defaultdict(TrieNode)</span></span><br><span class=\"line\">        self.isWord = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Define <code>__init__</code> in class <code>Trie</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.root = TrieNode() <span class=\"comment\"># root node is an empty node.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Define <code>insert</code> in class <code>Trie</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span>(<span class=\"params\">self, word: str</span>) -&gt; <span class=\"keyword\">None</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a word into the trie.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        node  = self.root <span class=\"comment\"># begin from root node in Trie</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> w <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node.children:</span><br><span class=\"line\">                node.children[w] = TrieNode() <span class=\"comment\"># store character in node.children</span></span><br><span class=\"line\">            node  = node.children[w] <span class=\"comment\"># update current node into its children node</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        node.isWord = <span class=\"literal\">True</span> <span class=\"comment\"># this node represent the last character of word</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Define <code>search</code> in class <code>Trie</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span>(<span class=\"params\">self, word: str</span>) -&gt; bool:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Returns if the word is in the trie.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        node  = self.root <span class=\"comment\"># begin from root node, which is empty</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"comment\"># if character w not in inserted word, return False</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> w <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node.children: <span class=\"keyword\">return</span> <span class=\"literal\">False</span> </span><br><span class=\"line\">            node = node.children[w] <span class=\"comment\"># update current node</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.isWord <span class=\"comment\"># judge if it is the end character</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Define <code>startsWith</code> in class <code>Trie</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">startsWith</span>(<span class=\"params\">self, prefix: str</span>) -&gt; bool:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Returns if there is any word in the trie that starts with the given prefix.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        node = self.root <span class=\"comment\"># begin from root node, which is empty</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> prefix:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> w <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node.children: <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            node = node.children[w]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><strong>Second method using <code>dict()</code> from python</strong></li>\n</ul>\n<p>Instead of creating new <code>TrieNode</code> class, we just use <code>dict</code> here. Each <code>dict</code> represents a node.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># use dict to implement Trie</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.root = &#123;&#125; <span class=\"comment\"># root node</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span>(<span class=\"params\">self, word: str</span>) -&gt; <span class=\"keyword\">None</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a word into the trie.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        p = self.root <span class=\"comment\"># begin from root node</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> w <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> p:</span><br><span class=\"line\">                p[w] = &#123;&#125; <span class=\"comment\"># add new node into current node</span></span><br><span class=\"line\">            p = p[w] <span class=\"comment\"># update current node</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\"># set &#x27;#&#x27; as the end signal, add into current node</span></span><br><span class=\"line\">        p[<span class=\"string\">&#x27;#&#x27;</span>] = <span class=\"literal\">True</span> </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span>(<span class=\"params\">self, prefix</span>):</span> <span class=\"comment\"># helper fuction to judge if the prefix in Trie</span></span><br><span class=\"line\">        p = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> prefix:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> w <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> p: <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">            p = p[w]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p</span><br><span class=\"line\">           </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span>(<span class=\"params\">self, word: str</span>) -&gt; bool:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Returns if the word is in the trie.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.find(word) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;#&#x27;</span> <span class=\"keyword\">in</span> self.find(word)  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">startsWith</span>(<span class=\"params\">self, prefix: str</span>) -&gt; bool:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Returns if there is any word in the trie that starts with the given prefix.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.find(prefix) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h3 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h3><p>Implement a trie with <code>insert</code>, <code>search</code>, and <code>startsWith</code> methods.</p>\n<p><em>Example:</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Trie trie = <span class=\"keyword\">new</span> Trie();</span><br><span class=\"line\"></span><br><span class=\"line\">trie.insert(<span class=\"string\">&quot;apple&quot;</span>);</span><br><span class=\"line\">trie.search(<span class=\"string\">&quot;apple&quot;</span>);   <span class=\"comment\">// returns true</span></span><br><span class=\"line\">trie.search(<span class=\"string\">&quot;app&quot;</span>);     <span class=\"comment\">// returns false</span></span><br><span class=\"line\">trie.startsWith(<span class=\"string\">&quot;app&quot;</span>); <span class=\"comment\">// returns true</span></span><br><span class=\"line\">trie.insert(<span class=\"string\">&quot;app&quot;</span>);   </span><br><span class=\"line\">trie.search(<span class=\"string\">&quot;app&quot;</span>);     <span class=\"comment\">// returns true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Methods-amp-Solutions\"><a href=\"#Methods-amp-Solutions\" class=\"headerlink\" title=\"Methods &amp; Solutions:\"></a>Methods &amp; Solutions:</h3>","more":"<ul>\n<li><strong>Frist method using <code>TrieNode</code></strong></li>\n</ul>\n<ol>\n<li><p>First define a <code>TrieNode</code> class, it has two attributes, one is <code>children</code>, the other is <code>isWord</code>. Attribute <code>children</code>  represents  the sub nodes of  parent node.  Since one node may have many different sub nodes, I set  <code>children</code>   into <code>dict()</code> or <code>collections.defaultdict()</code>.  Attribute <code>isWord</code> means weather this character is the end of inserted word, it will be used in  <code>trie.serach()</code>. we initialize <code>isWord = False</code> , then if the character is the end of word, we set it into <code>True</code>.    </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TrieNode</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.children  = &#123;&#125; <span class=\"comment\"># store characters of a word according ro their indices</span></span><br><span class=\"line\">        <span class=\"comment\"># self.children  = collections.defaultdict(TrieNode)</span></span><br><span class=\"line\">        self.isWord = <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Define <code>__init__</code> in class <code>Trie</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.root = TrieNode() <span class=\"comment\"># root node is an empty node.</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Define <code>insert</code> in class <code>Trie</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span>(<span class=\"params\">self, word: str</span>) -&gt; <span class=\"keyword\">None</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a word into the trie.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        node  = self.root <span class=\"comment\"># begin from root node in Trie</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> w <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node.children:</span><br><span class=\"line\">                node.children[w] = TrieNode() <span class=\"comment\"># store character in node.children</span></span><br><span class=\"line\">            node  = node.children[w] <span class=\"comment\"># update current node into its children node</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        node.isWord = <span class=\"literal\">True</span> <span class=\"comment\"># this node represent the last character of word</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Define <code>search</code> in class <code>Trie</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span>(<span class=\"params\">self, word: str</span>) -&gt; bool:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Returns if the word is in the trie.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        node  = self.root <span class=\"comment\"># begin from root node, which is empty</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"comment\"># if character w not in inserted word, return False</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> w <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node.children: <span class=\"keyword\">return</span> <span class=\"literal\">False</span> </span><br><span class=\"line\">            node = node.children[w] <span class=\"comment\"># update current node</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.isWord <span class=\"comment\"># judge if it is the end character</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Define <code>startsWith</code> in class <code>Trie</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">startsWith</span>(<span class=\"params\">self, prefix: str</span>) -&gt; bool:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Returns if there is any word in the trie that starts with the given prefix.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        node = self.root <span class=\"comment\"># begin from root node, which is empty</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> prefix:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> w <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> node.children: <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            node = node.children[w]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><strong>Second method using <code>dict()</code> from python</strong></li>\n</ul>\n<p>Instead of creating new <code>TrieNode</code> class, we just use <code>dict</code> here. Each <code>dict</code> represents a node.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Trie</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># use dict to implement Trie</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Initialize your data structure here.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        self.root = &#123;&#125; <span class=\"comment\"># root node</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert</span>(<span class=\"params\">self, word: str</span>) -&gt; <span class=\"keyword\">None</span>:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Inserts a word into the trie.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        p = self.root <span class=\"comment\"># begin from root node</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> word:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> w <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> p:</span><br><span class=\"line\">                p[w] = &#123;&#125; <span class=\"comment\"># add new node into current node</span></span><br><span class=\"line\">            p = p[w] <span class=\"comment\"># update current node</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\"># set &#x27;#&#x27; as the end signal, add into current node</span></span><br><span class=\"line\">        p[<span class=\"string\">&#x27;#&#x27;</span>] = <span class=\"literal\">True</span> </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find</span>(<span class=\"params\">self, prefix</span>):</span> <span class=\"comment\"># helper fuction to judge if the prefix in Trie</span></span><br><span class=\"line\">        p = self.root</span><br><span class=\"line\">        <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> prefix:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> w <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> p: <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">            p = p[w]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> p</span><br><span class=\"line\">           </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">search</span>(<span class=\"params\">self, word: str</span>) -&gt; bool:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Returns if the word is in the trie.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.find(word) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span> <span class=\"keyword\">and</span> <span class=\"string\">&#x27;#&#x27;</span> <span class=\"keyword\">in</span> self.find(word)  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">startsWith</span>(<span class=\"params\">self, prefix: str</span>) -&gt; bool:</span></span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        Returns if there is any word in the trie that starts with the given prefix.</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.find(prefix) <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>"},{"title":"解决搭建博客中tags和categories页面404","date":"2020-08-05T17:05:38.000Z","_content":"#### 问题：\n使用 `hexo + next-theme + Github Page`搭建博客在收尾阶段碰到一点小问题，菜单栏的`Tags`和 `Categories` 链接无法正常显示，而是直接跳转到404页面。\n\n#### 解决方法：\n\n<!-- more -->\n\n* hexo 默认 `source` 文件中是没有 `tags` 和 `categories` 对应的page文件的，我们需要先手动进行创建，使用命令行:\n```bash\n   hexo new page categories\n   hexo new page tags\n```\n* 接下来设置在`source` 目录下的`tags\\index.md` 和 `categories\\index.md` 文件。 在文件最上方的 `front-matter`（顶部代码片段）中加上对应的`type` 类型。 比如对于`tags\\index.md` 加上``` type: tags```,  对于`categories\\index.md`加上 ```type: categories```。\n<br/>\n\n* 测试： 使用 ```hexo new xxx``` 新建一个博客文章，在文件最上方的 `front-matter`（顶部代码片段）中加上对应的`tags` 和 `categories`, 比如：\n    ```js\n    tags: hello world\n    categories: hello world\n    ```\n<br/>\n\n* 使用 ``` hexo g ```重新生成静态文件，再重新部署 ``` hexo d```，打开博客，可以看到菜单中 `Tags` 和 `Categories` 成功生成。 \n\n\n\n","source":"_posts/解决搭建博客中tags和categories页面404.md","raw":"---\ntitle: 解决搭建博客中tags和categories页面404\ndate: 2020-08-05 19:05:38\ntags: hexo\ncategories: hexo\n---\n#### 问题：\n使用 `hexo + next-theme + Github Page`搭建博客在收尾阶段碰到一点小问题，菜单栏的`Tags`和 `Categories` 链接无法正常显示，而是直接跳转到404页面。\n\n#### 解决方法：\n\n<!-- more -->\n\n* hexo 默认 `source` 文件中是没有 `tags` 和 `categories` 对应的page文件的，我们需要先手动进行创建，使用命令行:\n```bash\n   hexo new page categories\n   hexo new page tags\n```\n* 接下来设置在`source` 目录下的`tags\\index.md` 和 `categories\\index.md` 文件。 在文件最上方的 `front-matter`（顶部代码片段）中加上对应的`type` 类型。 比如对于`tags\\index.md` 加上``` type: tags```,  对于`categories\\index.md`加上 ```type: categories```。\n<br/>\n\n* 测试： 使用 ```hexo new xxx``` 新建一个博客文章，在文件最上方的 `front-matter`（顶部代码片段）中加上对应的`tags` 和 `categories`, 比如：\n    ```js\n    tags: hello world\n    categories: hello world\n    ```\n<br/>\n\n* 使用 ``` hexo g ```重新生成静态文件，再重新部署 ``` hexo d```，打开博客，可以看到菜单中 `Tags` 和 `Categories` 成功生成。 \n\n\n\n","slug":"解决搭建博客中tags和categories页面404","published":1,"updated":"2020-08-06T16:31:03.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckdjex8te0008psto29so741u","content":"<h4 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h4><p>使用 <code>hexo + next-theme + Github Page</code>搭建博客在收尾阶段碰到一点小问题，菜单栏的<code>Tags</code>和 <code>Categories</code> 链接无法正常显示，而是直接跳转到404页面。</p>\n<h4 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h4><a id=\"more\"></a>\n\n<ul>\n<li><p>hexo 默认 <code>source</code> 文件中是没有 <code>tags</code> 和 <code>categories</code> 对应的page文件的，我们需要先手动进行创建，使用命令行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure></li>\n<li><p>接下来设置在<code>source</code> 目录下的<code>tags\\index.md</code> 和 <code>categories\\index.md</code> 文件。 在文件最上方的 <code>front-matter</code>（顶部代码片段）中加上对应的<code>type</code> 类型。 比如对于<code>tags\\index.md</code> 加上<code> type: tags</code>,  对于<code>categories\\index.md</code>加上 <code>type: categories</code>。</p>\n<br/>\n</li>\n<li><p>测试： 使用 <code>hexo new xxx</code> 新建一个博客文章，在文件最上方的 <code>front-matter</code>（顶部代码片段）中加上对应的<code>tags</code> 和 <code>categories</code>, 比如：</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags: hello world</span><br><span class=\"line\">categories: hello world</span><br></pre></td></tr></table></figure>\n<br/>\n</li>\n<li><p>使用 <code>hexo g</code>重新生成静态文件，再重新部署 <code> hexo d</code>，打开博客，可以看到菜单中 <code>Tags</code> 和 <code>Categories</code> 成功生成。 </p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h4><p>使用 <code>hexo + next-theme + Github Page</code>搭建博客在收尾阶段碰到一点小问题，菜单栏的<code>Tags</code>和 <code>Categories</code> 链接无法正常显示，而是直接跳转到404页面。</p>\n<h4 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h4>","more":"<ul>\n<li><p>hexo 默认 <code>source</code> 文件中是没有 <code>tags</code> 和 <code>categories</code> 对应的page文件的，我们需要先手动进行创建，使用命令行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure></li>\n<li><p>接下来设置在<code>source</code> 目录下的<code>tags\\index.md</code> 和 <code>categories\\index.md</code> 文件。 在文件最上方的 <code>front-matter</code>（顶部代码片段）中加上对应的<code>type</code> 类型。 比如对于<code>tags\\index.md</code> 加上<code> type: tags</code>,  对于<code>categories\\index.md</code>加上 <code>type: categories</code>。</p>\n<br/>\n</li>\n<li><p>测试： 使用 <code>hexo new xxx</code> 新建一个博客文章，在文件最上方的 <code>front-matter</code>（顶部代码片段）中加上对应的<code>tags</code> 和 <code>categories</code>, 比如：</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tags: hello world</span><br><span class=\"line\">categories: hello world</span><br></pre></td></tr></table></figure>\n<br/>\n</li>\n<li><p>使用 <code>hexo g</code>重新生成静态文件，再重新部署 <code> hexo d</code>，打开博客，可以看到菜单中 <code>Tags</code> 和 <code>Categories</code> 成功生成。 </p>\n</li>\n</ul>"},{"title":"【leetcode】快速幂","date":"2020-08-07T12:48:40.000Z","mathjax":true,"_content":"\n### 问题：\n\n实现函数`double Power(double base, int exponent)`，求`base`的`exponent`次方。不得使用库函数，同时不需要考虑大数问题。\n\n示例 1:\n\n输入: `2.00000, 10`\n输出: `1024.00000`\n示例 2:\n\n输入: `2.10000`, `3`\n输出: `9.26100`\n示例 3:\n\n输入: `2.00000`,` -2`\n输出: `0.25000`\n解释: `2-2= 1/22 = 1/4 = 0.25`\n\n### 解决方法：\n\n这道题需要使用**快速幂**求解，时间复杂度为 O($\\log_2(n)$) 。\n\n如果我们按照常规思路，令$x = x * x$，重复 $n$ 次， 时间复杂度为 O($n$)， 会超时。\n\n<!-- more -->\n\n快速幂是将 $n$ 变成二进制数，如 $ n = 9 = (1001)$， 求解 $2$ 的 $9$ 次方就变成：\n\n$2^9 = 2^{2^0\\times1+2^1\\times0+2^2\\times0+2^3\\times1}= 2^{2^0\\times1}\\times2^{2^1\\times0}\\times2^{2^2\\times0}\\times2^{2^3\\times1} = 2^{2^0\\times1}\\times1\\times1\\times2^{2^3\\times1} = 2^{2^0}\\times2^{2^3} $\n\n由此可见，我们只需要将 $n$ 二进制数位上为 $1$ 对应的数相乘即可。至于这些数是怎么来的，是按照 $x = x \\times x$ 依次得到：\n\n>  $ x =2 \\Rightarrow 2^{2^0} $\n>\n> $ x = x \\times x = 4 \\Rightarrow 2^{2^1}$\n>\n> $ x = x \\times x = 16 \\Rightarrow 2^{2^2}$\n>\n> $ x = x \\times x = 16 \\times 16 \\Rightarrow 2^{2^3}$\n\n我们依次得到对应的 $x$ ，然后当 $x$ 对应 $n$ 的二进制数位是 $1$ 时 $result = result \\times x $  。 在循环的过程中，我们通过 `n & 1`来判断 $x$ 对应 $n$ 的二进制数位，  ` n >>= 1, x = x * x` 对应着下次循环中的 $x$ 和 $n$ 。\n\n当 $n$ 小于 $0$ 时， 我们令 $ x = \\frac{1}{x}$, $n = -n$.  代码如下\n\nPython\n\n```python\nclass Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if x == 0: return 0\n        if n == 0: return 1\n        if n < 0:\n            n = -n\n            x = 1/x\n        ans  = 1\n        while n > 0:\n            if n & 1 == 1: ans *= x\n            x *= x\n            n >>= 1\n        return ans\n```\n\nC++\n\n```c++\nclass Solution {\npublic:\n    double myPow(double x, int n) {\n        if (x==0) return 0;\n        if (n==0) return 1;\n        long pow  = n;\n        if (pow < 0){\n            x = 1/x;\n            pow = -pow;\n        }\n        double ans = 1;\n        while (pow > 0){\n            if (pow&1 == 1) ans *= x;\n            x *= x;\n            pow >>= 1;\n        } \n        return ans;\n    }\n};\n```\n\n\n\n","source":"_posts/快速幂.md","raw":"---\ntitle: 【leetcode】快速幂\ndate: 2020-08-07 20:48:40\ntags: leetcode\ncategories: Data structure & Algorithm\nmathjax: true\n---\n\n### 问题：\n\n实现函数`double Power(double base, int exponent)`，求`base`的`exponent`次方。不得使用库函数，同时不需要考虑大数问题。\n\n示例 1:\n\n输入: `2.00000, 10`\n输出: `1024.00000`\n示例 2:\n\n输入: `2.10000`, `3`\n输出: `9.26100`\n示例 3:\n\n输入: `2.00000`,` -2`\n输出: `0.25000`\n解释: `2-2= 1/22 = 1/4 = 0.25`\n\n### 解决方法：\n\n这道题需要使用**快速幂**求解，时间复杂度为 O($\\log_2(n)$) 。\n\n如果我们按照常规思路，令$x = x * x$，重复 $n$ 次， 时间复杂度为 O($n$)， 会超时。\n\n<!-- more -->\n\n快速幂是将 $n$ 变成二进制数，如 $ n = 9 = (1001)$， 求解 $2$ 的 $9$ 次方就变成：\n\n$2^9 = 2^{2^0\\times1+2^1\\times0+2^2\\times0+2^3\\times1}= 2^{2^0\\times1}\\times2^{2^1\\times0}\\times2^{2^2\\times0}\\times2^{2^3\\times1} = 2^{2^0\\times1}\\times1\\times1\\times2^{2^3\\times1} = 2^{2^0}\\times2^{2^3} $\n\n由此可见，我们只需要将 $n$ 二进制数位上为 $1$ 对应的数相乘即可。至于这些数是怎么来的，是按照 $x = x \\times x$ 依次得到：\n\n>  $ x =2 \\Rightarrow 2^{2^0} $\n>\n> $ x = x \\times x = 4 \\Rightarrow 2^{2^1}$\n>\n> $ x = x \\times x = 16 \\Rightarrow 2^{2^2}$\n>\n> $ x = x \\times x = 16 \\times 16 \\Rightarrow 2^{2^3}$\n\n我们依次得到对应的 $x$ ，然后当 $x$ 对应 $n$ 的二进制数位是 $1$ 时 $result = result \\times x $  。 在循环的过程中，我们通过 `n & 1`来判断 $x$ 对应 $n$ 的二进制数位，  ` n >>= 1, x = x * x` 对应着下次循环中的 $x$ 和 $n$ 。\n\n当 $n$ 小于 $0$ 时， 我们令 $ x = \\frac{1}{x}$, $n = -n$.  代码如下\n\nPython\n\n```python\nclass Solution:\n    def myPow(self, x: float, n: int) -> float:\n        if x == 0: return 0\n        if n == 0: return 1\n        if n < 0:\n            n = -n\n            x = 1/x\n        ans  = 1\n        while n > 0:\n            if n & 1 == 1: ans *= x\n            x *= x\n            n >>= 1\n        return ans\n```\n\nC++\n\n```c++\nclass Solution {\npublic:\n    double myPow(double x, int n) {\n        if (x==0) return 0;\n        if (n==0) return 1;\n        long pow  = n;\n        if (pow < 0){\n            x = 1/x;\n            pow = -pow;\n        }\n        double ans = 1;\n        while (pow > 0){\n            if (pow&1 == 1) ans *= x;\n            x *= x;\n            pow >>= 1;\n        } \n        return ans;\n    }\n};\n```\n\n\n\n","slug":"快速幂","published":1,"updated":"2020-10-01T16:25:06.683Z","_id":"ckdkmb6e70000u4to5jfn7uj0","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h3><p>实现函数<code>double Power(double base, int exponent)</code>，求<code>base</code>的<code>exponent</code>次方。不得使用库函数，同时不需要考虑大数问题。</p>\n<p>示例 1:</p>\n<p>输入: <code>2.00000, 10</code><br>输出: <code>1024.00000</code><br>示例 2:</p>\n<p>输入: <code>2.10000</code>, <code>3</code><br>输出: <code>9.26100</code><br>示例 3:</p>\n<p>输入: <code>2.00000</code>,<code> -2</code><br>输出: <code>0.25000</code><br>解释: <code>2-2= 1/22 = 1/4 = 0.25</code></p>\n<h3 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h3><p>这道题需要使用<strong>快速幂</strong>求解，时间复杂度为 O($\\log_2(n)$) 。</p>\n<p>如果我们按照常规思路，令$x = x * x$，重复 $n$ 次， 时间复杂度为 O($n$)， 会超时。</p>\n<a id=\"more\"></a>\n\n<p>快速幂是将 $n$ 变成二进制数，如 $ n = 9 = (1001)$， 求解 $2$ 的 $9$ 次方就变成：</p>\n<p>$2^9 = 2^{2^0\\times1+2^1\\times0+2^2\\times0+2^3\\times1}= 2^{2^0\\times1}\\times2^{2^1\\times0}\\times2^{2^2\\times0}\\times2^{2^3\\times1} = 2^{2^0\\times1}\\times1\\times1\\times2^{2^3\\times1} = 2^{2^0}\\times2^{2^3} $</p>\n<p>由此可见，我们只需要将 $n$ 二进制数位上为 $1$ 对应的数相乘即可。至于这些数是怎么来的，是按照 $x = x \\times x$ 依次得到：</p>\n<blockquote>\n<p> $ x =2 \\Rightarrow 2^{2^0} $</p>\n<p>$ x = x \\times x = 4 \\Rightarrow 2^{2^1}$</p>\n<p>$ x = x \\times x = 16 \\Rightarrow 2^{2^2}$</p>\n<p>$ x = x \\times x = 16 \\times 16 \\Rightarrow 2^{2^3}$</p>\n</blockquote>\n<p>我们依次得到对应的 $x$ ，然后当 $x$ 对应 $n$ 的二进制数位是 $1$ 时 $result = result \\times x $  。 在循环的过程中，我们通过 <code>n &amp; 1</code>来判断 $x$ 对应 $n$ 的二进制数位，  <code> n &gt;&gt;= 1, x = x * x</code> 对应着下次循环中的 $x$ 和 $n$ 。</p>\n<p>当 $n$ 小于 $0$ 时， 我们令 $ x = \\frac{1}{x}$, $n = -n$.  代码如下</p>\n<p>Python</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myPow</span>(<span class=\"params\">self, x: float, n: int</span>) -&gt; float:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> x == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            n = -n</span><br><span class=\"line\">            x = <span class=\"number\">1</span>/x</span><br><span class=\"line\">        ans  = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> n &amp; <span class=\"number\">1</span> == <span class=\"number\">1</span>: ans *= x</span><br><span class=\"line\">            x *= x</span><br><span class=\"line\">            n &gt;&gt;= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n\n<p>C++</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">myPow</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"built_in\">pow</span>  = n;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">pow</span> &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            x = <span class=\"number\">1</span>/x;</span><br><span class=\"line\">            <span class=\"built_in\">pow</span> = -<span class=\"built_in\">pow</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">pow</span> &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">pow</span>&amp;<span class=\"number\">1</span> == <span class=\"number\">1</span>) ans *= x;</span><br><span class=\"line\">            x *= x;</span><br><span class=\"line\">            <span class=\"built_in\">pow</span> &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"<h3 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h3><p>实现函数<code>double Power(double base, int exponent)</code>，求<code>base</code>的<code>exponent</code>次方。不得使用库函数，同时不需要考虑大数问题。</p>\n<p>示例 1:</p>\n<p>输入: <code>2.00000, 10</code><br>输出: <code>1024.00000</code><br>示例 2:</p>\n<p>输入: <code>2.10000</code>, <code>3</code><br>输出: <code>9.26100</code><br>示例 3:</p>\n<p>输入: <code>2.00000</code>,<code> -2</code><br>输出: <code>0.25000</code><br>解释: <code>2-2= 1/22 = 1/4 = 0.25</code></p>\n<h3 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h3><p>这道题需要使用<strong>快速幂</strong>求解，时间复杂度为 O($\\log_2(n)$) 。</p>\n<p>如果我们按照常规思路，令$x = x * x$，重复 $n$ 次， 时间复杂度为 O($n$)， 会超时。</p>","more":"<p>快速幂是将 $n$ 变成二进制数，如 $ n = 9 = (1001)$， 求解 $2$ 的 $9$ 次方就变成：</p>\n<p>$2^9 = 2^{2^0\\times1+2^1\\times0+2^2\\times0+2^3\\times1}= 2^{2^0\\times1}\\times2^{2^1\\times0}\\times2^{2^2\\times0}\\times2^{2^3\\times1} = 2^{2^0\\times1}\\times1\\times1\\times2^{2^3\\times1} = 2^{2^0}\\times2^{2^3} $</p>\n<p>由此可见，我们只需要将 $n$ 二进制数位上为 $1$ 对应的数相乘即可。至于这些数是怎么来的，是按照 $x = x \\times x$ 依次得到：</p>\n<blockquote>\n<p> $ x =2 \\Rightarrow 2^{2^0} $</p>\n<p>$ x = x \\times x = 4 \\Rightarrow 2^{2^1}$</p>\n<p>$ x = x \\times x = 16 \\Rightarrow 2^{2^2}$</p>\n<p>$ x = x \\times x = 16 \\times 16 \\Rightarrow 2^{2^3}$</p>\n</blockquote>\n<p>我们依次得到对应的 $x$ ，然后当 $x$ 对应 $n$ 的二进制数位是 $1$ 时 $result = result \\times x $  。 在循环的过程中，我们通过 <code>n &amp; 1</code>来判断 $x$ 对应 $n$ 的二进制数位，  <code> n &gt;&gt;= 1, x = x * x</code> 对应着下次循环中的 $x$ 和 $n$ 。</p>\n<p>当 $n$ 小于 $0$ 时， 我们令 $ x = \\frac{1}{x}$, $n = -n$.  代码如下</p>\n<p>Python</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myPow</span>(<span class=\"params\">self, x: float, n: int</span>) -&gt; float:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> x == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> n &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            n = -n</span><br><span class=\"line\">            x = <span class=\"number\">1</span>/x</span><br><span class=\"line\">        ans  = <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> n &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> n &amp; <span class=\"number\">1</span> == <span class=\"number\">1</span>: ans *= x</span><br><span class=\"line\">            x *= x</span><br><span class=\"line\">            n &gt;&gt;= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></figure>\n\n<p>C++</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">myPow</span><span class=\"params\">(<span class=\"keyword\">double</span> x, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"built_in\">pow</span>  = n;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">pow</span> &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            x = <span class=\"number\">1</span>/x;</span><br><span class=\"line\">            <span class=\"built_in\">pow</span> = -<span class=\"built_in\">pow</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"built_in\">pow</span> &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">pow</span>&amp;<span class=\"number\">1</span> == <span class=\"number\">1</span>) ans *= x;</span><br><span class=\"line\">            x *= x;</span><br><span class=\"line\">            <span class=\"built_in\">pow</span> &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"【leetcode】Populating Next Right Pointers in Each Node","date":"2020-08-25T10:50:33.000Z","_content":"\n### Problem:\n\nYou are given a **perfect binary tree** where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n\n```\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n```\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.\n\nInitially, all next pointers are set to `NULL`.\n\n <!-- more -->\n\n**Follow up:**\n\n- You may only use constant extra space.\n- Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.\n\n \n\n**Example 1:**\n\n![img](https://assets.leetcode.com/uploads/2019/02/14/116_sample.png)\n\n```\nInput: root = [1,2,3,4,5,6,7]\nOutput: [1,#,2,3,#,4,5,6,7,#]\nExplanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n```\n\n### Methods:\n\n* **first method**\n\n  使用递归， 前序遍历。 \n\n  先将同一个节点下的左子节点`next` 指向右子节点：`root.left.next = root.right`\n\n  再类似于链表操作，因为`node.next`初始全为`NULL`, 而且在前一次的递归中`node.next`已经被赋值，如果`node.next`仍然为空，代表是这一层的最末尾节点，不需要进行操作。 否则对节点的右子节点赋值：`root.right.next = root.next.left`。 \n\n  之所以使用前序遍历，是因为要先对`root.next`赋值，之后才能对`root.left.next` 和`root.right.next`赋值，`root.right.next`的赋值依赖于`root.next`。\n\n  ```python\n  \"\"\"\n  # Definition for a Node.\n  class Node:\n      def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n          self.val = val\n          self.left = left\n          self.right = right\n          self.next = next\n  \"\"\"\n  \n  class Solution:\n      def connect(self, root: 'Node') -> 'Node':\n          if not root or not root.left: return root\n          root.left.next = root.right\n          if root.next:\n              root.right.next = root.next.left\n          self.connect(root.left)\n          self.connect(root.right)\n          return root\n          \n  ```\n\n* **second method**\n\n  迭代法，链表操作，每次从每层最左边的节点开始遍历。\n\n  ```python\n  \"\"\"\n  # Definition for a Node.\n  class Node:\n      def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n          self.val = val\n          self.left = left\n          self.right = right\n          self.next = next\n  \"\"\"\n  \n  class Solution:\n      def connect(self, root: 'Node') -> 'Node':\n          if not root: return\n          leftmost = root #最左边的node\n          while leftmost.left:\n              curr = leftmost #当前node\n              while curr:\n                  curr.left.next = curr.right\n                  if curr.next: curr.right.next = curr.next.left\n                  curr = curr.next\n              leftmost = leftmost.left\n          return root\n  ```\n\n  \n\n  ","source":"_posts/populate-tree.md","raw":"---\ntitle: 【leetcode】Populating Next Right Pointers in Each Node\ndate: 2020-08-25 18:50:33\ntags: leetcode\ncategories: Data structure & Algorithm\n---\n\n### Problem:\n\nYou are given a **perfect binary tree** where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n\n```\nstruct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n```\n\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.\n\nInitially, all next pointers are set to `NULL`.\n\n <!-- more -->\n\n**Follow up:**\n\n- You may only use constant extra space.\n- Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.\n\n \n\n**Example 1:**\n\n![img](https://assets.leetcode.com/uploads/2019/02/14/116_sample.png)\n\n```\nInput: root = [1,2,3,4,5,6,7]\nOutput: [1,#,2,3,#,4,5,6,7,#]\nExplanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n```\n\n### Methods:\n\n* **first method**\n\n  使用递归， 前序遍历。 \n\n  先将同一个节点下的左子节点`next` 指向右子节点：`root.left.next = root.right`\n\n  再类似于链表操作，因为`node.next`初始全为`NULL`, 而且在前一次的递归中`node.next`已经被赋值，如果`node.next`仍然为空，代表是这一层的最末尾节点，不需要进行操作。 否则对节点的右子节点赋值：`root.right.next = root.next.left`。 \n\n  之所以使用前序遍历，是因为要先对`root.next`赋值，之后才能对`root.left.next` 和`root.right.next`赋值，`root.right.next`的赋值依赖于`root.next`。\n\n  ```python\n  \"\"\"\n  # Definition for a Node.\n  class Node:\n      def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n          self.val = val\n          self.left = left\n          self.right = right\n          self.next = next\n  \"\"\"\n  \n  class Solution:\n      def connect(self, root: 'Node') -> 'Node':\n          if not root or not root.left: return root\n          root.left.next = root.right\n          if root.next:\n              root.right.next = root.next.left\n          self.connect(root.left)\n          self.connect(root.right)\n          return root\n          \n  ```\n\n* **second method**\n\n  迭代法，链表操作，每次从每层最左边的节点开始遍历。\n\n  ```python\n  \"\"\"\n  # Definition for a Node.\n  class Node:\n      def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):\n          self.val = val\n          self.left = left\n          self.right = right\n          self.next = next\n  \"\"\"\n  \n  class Solution:\n      def connect(self, root: 'Node') -> 'Node':\n          if not root: return\n          leftmost = root #最左边的node\n          while leftmost.left:\n              curr = leftmost #当前node\n              while curr:\n                  curr.left.next = curr.right\n                  if curr.next: curr.right.next = curr.next.left\n                  curr = curr.next\n              leftmost = leftmost.left\n          return root\n  ```\n\n  \n\n  ","slug":"populate-tree","published":1,"updated":"2020-10-01T16:25:26.202Z","_id":"ckea7m09k0000d0togbvr7g35","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h3><p>You are given a <strong>perfect binary tree</strong> where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Node &#123;</span><br><span class=\"line\">  int val;</span><br><span class=\"line\">  Node *left;</span><br><span class=\"line\">  Node *right;</span><br><span class=\"line\">  Node *next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>\n<p>Initially, all next pointers are set to <code>NULL</code>.</p>\n <a id=\"more\"></a>\n\n<p><strong>Follow up:</strong></p>\n<ul>\n<li>You may only use constant extra space.</li>\n<li>Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.</li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2019/02/14/116_sample.png\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: root &#x3D; [1,2,3,4,5,6,7]</span><br><span class=\"line\">Output: [1,#,2,3,#,4,5,6,7,#]</span><br><span class=\"line\">Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Methods\"><a href=\"#Methods\" class=\"headerlink\" title=\"Methods:\"></a>Methods:</h3><ul>\n<li><p><strong>first method</strong></p>\n<p>使用递归， 前序遍历。 </p>\n<p>先将同一个节点下的左子节点<code>next</code> 指向右子节点：<code>root.left.next = root.right</code></p>\n<p>再类似于链表操作，因为<code>node.next</code>初始全为<code>NULL</code>, 而且在前一次的递归中<code>node.next</code>已经被赋值，如果<code>node.next</code>仍然为空，代表是这一层的最末尾节点，不需要进行操作。 否则对节点的右子节点赋值：<code>root.right.next = root.next.left</code>。 </p>\n<p>之所以使用前序遍历，是因为要先对<code>root.next</code>赋值，之后才能对<code>root.left.next</code> 和<code>root.right.next</code>赋值，<code>root.right.next</code>的赋值依赖于<code>root.next</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"># Definition for a Node.</span></span><br><span class=\"line\"><span class=\"string\">class Node:</span></span><br><span class=\"line\"><span class=\"string\">    def __init__(self, val: int = 0, left: &#x27;Node&#x27; = None, right: &#x27;Node&#x27; = None, next: &#x27;Node&#x27; = None):</span></span><br><span class=\"line\"><span class=\"string\">        self.val = val</span></span><br><span class=\"line\"><span class=\"string\">        self.left = left</span></span><br><span class=\"line\"><span class=\"string\">        self.right = right</span></span><br><span class=\"line\"><span class=\"string\">        self.next = next</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span>(<span class=\"params\">self, root: <span class=\"string\">&#x27;Node&#x27;</span></span>) -&gt; &#x27;Node&#x27;:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> root.left: <span class=\"keyword\">return</span> root</span><br><span class=\"line\">        root.left.next = root.right</span><br><span class=\"line\">        <span class=\"keyword\">if</span> root.next:</span><br><span class=\"line\">            root.right.next = root.next.left</span><br><span class=\"line\">        self.connect(root.left)</span><br><span class=\"line\">        self.connect(root.right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>second method</strong></p>\n<p>迭代法，链表操作，每次从每层最左边的节点开始遍历。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"># Definition for a Node.</span></span><br><span class=\"line\"><span class=\"string\">class Node:</span></span><br><span class=\"line\"><span class=\"string\">    def __init__(self, val: int = 0, left: &#x27;Node&#x27; = None, right: &#x27;Node&#x27; = None, next: &#x27;Node&#x27; = None):</span></span><br><span class=\"line\"><span class=\"string\">        self.val = val</span></span><br><span class=\"line\"><span class=\"string\">        self.left = left</span></span><br><span class=\"line\"><span class=\"string\">        self.right = right</span></span><br><span class=\"line\"><span class=\"string\">        self.next = next</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span>(<span class=\"params\">self, root: <span class=\"string\">&#x27;Node&#x27;</span></span>) -&gt; &#x27;Node&#x27;:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root: <span class=\"keyword\">return</span></span><br><span class=\"line\">        leftmost = root <span class=\"comment\">#最左边的node</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> leftmost.left:</span><br><span class=\"line\">            curr = leftmost <span class=\"comment\">#当前node</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> curr:</span><br><span class=\"line\">                curr.left.next = curr.right</span><br><span class=\"line\">                <span class=\"keyword\">if</span> curr.next: curr.right.next = curr.next.left</span><br><span class=\"line\">                curr = curr.next</span><br><span class=\"line\">            leftmost = leftmost.left</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"Problem\"><a href=\"#Problem\" class=\"headerlink\" title=\"Problem:\"></a>Problem:</h3><p>You are given a <strong>perfect binary tree</strong> where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Node &#123;</span><br><span class=\"line\">  int val;</span><br><span class=\"line\">  Node *left;</span><br><span class=\"line\">  Node *right;</span><br><span class=\"line\">  Node *next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p>\n<p>Initially, all next pointers are set to <code>NULL</code>.</p>","more":"<p><strong>Follow up:</strong></p>\n<ul>\n<li>You may only use constant extra space.</li>\n<li>Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.</li>\n</ul>\n<p><strong>Example 1:</strong></p>\n<p><img src=\"https://assets.leetcode.com/uploads/2019/02/14/116_sample.png\" alt=\"img\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: root &#x3D; [1,2,3,4,5,6,7]</span><br><span class=\"line\">Output: [1,#,2,3,#,4,5,6,7,#]</span><br><span class=\"line\">Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with &#39;#&#39; signifying the end of each level.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Methods\"><a href=\"#Methods\" class=\"headerlink\" title=\"Methods:\"></a>Methods:</h3><ul>\n<li><p><strong>first method</strong></p>\n<p>使用递归， 前序遍历。 </p>\n<p>先将同一个节点下的左子节点<code>next</code> 指向右子节点：<code>root.left.next = root.right</code></p>\n<p>再类似于链表操作，因为<code>node.next</code>初始全为<code>NULL</code>, 而且在前一次的递归中<code>node.next</code>已经被赋值，如果<code>node.next</code>仍然为空，代表是这一层的最末尾节点，不需要进行操作。 否则对节点的右子节点赋值：<code>root.right.next = root.next.left</code>。 </p>\n<p>之所以使用前序遍历，是因为要先对<code>root.next</code>赋值，之后才能对<code>root.left.next</code> 和<code>root.right.next</code>赋值，<code>root.right.next</code>的赋值依赖于<code>root.next</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"># Definition for a Node.</span></span><br><span class=\"line\"><span class=\"string\">class Node:</span></span><br><span class=\"line\"><span class=\"string\">    def __init__(self, val: int = 0, left: &#x27;Node&#x27; = None, right: &#x27;Node&#x27; = None, next: &#x27;Node&#x27; = None):</span></span><br><span class=\"line\"><span class=\"string\">        self.val = val</span></span><br><span class=\"line\"><span class=\"string\">        self.left = left</span></span><br><span class=\"line\"><span class=\"string\">        self.right = right</span></span><br><span class=\"line\"><span class=\"string\">        self.next = next</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span>(<span class=\"params\">self, root: <span class=\"string\">&#x27;Node&#x27;</span></span>) -&gt; &#x27;Node&#x27;:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> root.left: <span class=\"keyword\">return</span> root</span><br><span class=\"line\">        root.left.next = root.right</span><br><span class=\"line\">        <span class=\"keyword\">if</span> root.next:</span><br><span class=\"line\">            root.right.next = root.next.left</span><br><span class=\"line\">        self.connect(root.left)</span><br><span class=\"line\">        self.connect(root.right)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>second method</strong></p>\n<p>迭代法，链表操作，每次从每层最左边的节点开始遍历。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"># Definition for a Node.</span></span><br><span class=\"line\"><span class=\"string\">class Node:</span></span><br><span class=\"line\"><span class=\"string\">    def __init__(self, val: int = 0, left: &#x27;Node&#x27; = None, right: &#x27;Node&#x27; = None, next: &#x27;Node&#x27; = None):</span></span><br><span class=\"line\"><span class=\"string\">        self.val = val</span></span><br><span class=\"line\"><span class=\"string\">        self.left = left</span></span><br><span class=\"line\"><span class=\"string\">        self.right = right</span></span><br><span class=\"line\"><span class=\"string\">        self.next = next</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connect</span>(<span class=\"params\">self, root: <span class=\"string\">&#x27;Node&#x27;</span></span>) -&gt; &#x27;Node&#x27;:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root: <span class=\"keyword\">return</span></span><br><span class=\"line\">        leftmost = root <span class=\"comment\">#最左边的node</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> leftmost.left:</span><br><span class=\"line\">            curr = leftmost <span class=\"comment\">#当前node</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> curr:</span><br><span class=\"line\">                curr.left.next = curr.right</span><br><span class=\"line\">                <span class=\"keyword\">if</span> curr.next: curr.right.next = curr.next.left</span><br><span class=\"line\">                curr = curr.next</span><br><span class=\"line\">            leftmost = leftmost.left</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>"},{"title":"【天池数据竞赛】贷款违约预测","date":"2020-09-14T18:12:45.000Z","mathjax":true,"_content":"\n**赛题地址：**\n\n[零基础入门数据挖掘 - 贷款违约预测](https://tianchi.aliyun.com/competition/entrance/531830/introduction)\n\n## Pipeline:\n\n对于这种csv表格式数据有一套固定的流程， 多用传统机器学习方法搭建模型。\n\n<!-- more -->\n\n* **EDA数据分析**：\n  1. 数据总体了解：大小，维度，特征 等\n  2. 查看数据中的缺省值和唯一值\n  3. 深入查看数据类型：数值型（连续还是离散），类别型或对象型，并进行分析\n  4. 分析特征和特征之间的关系，特征和目标变量的关系\n  5. 将结果可视化以便更好分析     \n* **特征工程**：（重要部分）\n  1. 对特征进行预处理：缺失值填充，时间格式处理，对象类型数据转换\n  2. 异常值处理，去除噪音：${3\\sigma}$，箱型图过滤\n  3. 数据分箱\n  4. 卡方交互：特征间组合，特征间衍生\n  5. 特征编码：one-hot, label-encode\n  6. 特征选择\n  7. 必要时还要进行归一化处理，降维，去除相关性高的特征等\n* **建模调参**：（重要部分）\n  1. 逻辑回归模型需要预先处理缺失值和异常值，必要时要做归一化处理\n  2. xgboost 和 lightgbm 都是决策树模型，会自动处理缺失值。其中lightgbm也可以处理类别类型数据\n  3. 构造模型，划分验证集和测试集\n  4. 集成学习方法：bagging, boosting\n  5. 模型评估：AUC指标\n  6. 模型调参：（最耗时耗力的一步）网格搜索（sklearn 提供GridSearchCV), 贝叶斯调参\n  7. 一般来说，调参并不会让模型性能有特别大的飞跃，但是会有一些性能上的提升\n  8. 注意不要过拟合\n* **模型融合**：\n  1. 简单加权，取平均或按权重分配\n  2. 简单投票或者加权投票\n  3. stacking\\blending\n  4. 其他融合方式...\n\n我的baseline地址：[here](https://github.com/ichbinhandsome/TIANCHI/tree/master/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E9%87%91%E8%9E%8D%E9%A3%8E%E6%8E%A7-%E8%B4%B7%E6%AC%BE%E8%BF%9D%E7%BA%A6%E9%A2%84%E6%B5%8B)\n\n我采用了lightgbm，xgboost，catboost 这三种决策树模型，AUC最好的是0.7317。之后又再此基础上做了多次尝试，主要是在特征工程方面，比如利用随机森林填补缺省值Nan，去除噪音，删除一些不相关的特征等，发现了过拟合问题。还是得再从模型融合的方向下手，能够显著提升模型性能的是特征工程和模型融合。\n\n\n\n\n\n\n\n\n\n","source":"_posts/datawahle01.md","raw":"---\ntitle: 【天池数据竞赛】贷款违约预测\ndate: 2020-09-15 02:12:45\ntags: TIANCHI\ncategories: Machine Learning\nmathjax: true\n---\n\n**赛题地址：**\n\n[零基础入门数据挖掘 - 贷款违约预测](https://tianchi.aliyun.com/competition/entrance/531830/introduction)\n\n## Pipeline:\n\n对于这种csv表格式数据有一套固定的流程， 多用传统机器学习方法搭建模型。\n\n<!-- more -->\n\n* **EDA数据分析**：\n  1. 数据总体了解：大小，维度，特征 等\n  2. 查看数据中的缺省值和唯一值\n  3. 深入查看数据类型：数值型（连续还是离散），类别型或对象型，并进行分析\n  4. 分析特征和特征之间的关系，特征和目标变量的关系\n  5. 将结果可视化以便更好分析     \n* **特征工程**：（重要部分）\n  1. 对特征进行预处理：缺失值填充，时间格式处理，对象类型数据转换\n  2. 异常值处理，去除噪音：${3\\sigma}$，箱型图过滤\n  3. 数据分箱\n  4. 卡方交互：特征间组合，特征间衍生\n  5. 特征编码：one-hot, label-encode\n  6. 特征选择\n  7. 必要时还要进行归一化处理，降维，去除相关性高的特征等\n* **建模调参**：（重要部分）\n  1. 逻辑回归模型需要预先处理缺失值和异常值，必要时要做归一化处理\n  2. xgboost 和 lightgbm 都是决策树模型，会自动处理缺失值。其中lightgbm也可以处理类别类型数据\n  3. 构造模型，划分验证集和测试集\n  4. 集成学习方法：bagging, boosting\n  5. 模型评估：AUC指标\n  6. 模型调参：（最耗时耗力的一步）网格搜索（sklearn 提供GridSearchCV), 贝叶斯调参\n  7. 一般来说，调参并不会让模型性能有特别大的飞跃，但是会有一些性能上的提升\n  8. 注意不要过拟合\n* **模型融合**：\n  1. 简单加权，取平均或按权重分配\n  2. 简单投票或者加权投票\n  3. stacking\\blending\n  4. 其他融合方式...\n\n我的baseline地址：[here](https://github.com/ichbinhandsome/TIANCHI/tree/master/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E9%87%91%E8%9E%8D%E9%A3%8E%E6%8E%A7-%E8%B4%B7%E6%AC%BE%E8%BF%9D%E7%BA%A6%E9%A2%84%E6%B5%8B)\n\n我采用了lightgbm，xgboost，catboost 这三种决策树模型，AUC最好的是0.7317。之后又再此基础上做了多次尝试，主要是在特征工程方面，比如利用随机森林填补缺省值Nan，去除噪音，删除一些不相关的特征等，发现了过拟合问题。还是得再从模型融合的方向下手，能够显著提升模型性能的是特征工程和模型融合。\n\n\n\n\n\n\n\n\n\n","slug":"datawahle01","published":1,"updated":"2020-10-01T16:30:04.686Z","_id":"ckf37likw0000skto3ckd5k8m","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>赛题地址：</strong></p>\n<p><a href=\"https://tianchi.aliyun.com/competition/entrance/531830/introduction\">零基础入门数据挖掘 - 贷款违约预测</a></p>\n<h2 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline:\"></a>Pipeline:</h2><p>对于这种csv表格式数据有一套固定的流程， 多用传统机器学习方法搭建模型。</p>\n<a id=\"more\"></a>\n\n<ul>\n<li><strong>EDA数据分析</strong>：<ol>\n<li>数据总体了解：大小，维度，特征 等</li>\n<li>查看数据中的缺省值和唯一值</li>\n<li>深入查看数据类型：数值型（连续还是离散），类别型或对象型，并进行分析</li>\n<li>分析特征和特征之间的关系，特征和目标变量的关系</li>\n<li>将结果可视化以便更好分析     </li>\n</ol>\n</li>\n<li><strong>特征工程</strong>：（重要部分）<ol>\n<li>对特征进行预处理：缺失值填充，时间格式处理，对象类型数据转换</li>\n<li>异常值处理，去除噪音：${3\\sigma}$，箱型图过滤</li>\n<li>数据分箱</li>\n<li>卡方交互：特征间组合，特征间衍生</li>\n<li>特征编码：one-hot, label-encode</li>\n<li>特征选择</li>\n<li>必要时还要进行归一化处理，降维，去除相关性高的特征等</li>\n</ol>\n</li>\n<li><strong>建模调参</strong>：（重要部分）<ol>\n<li>逻辑回归模型需要预先处理缺失值和异常值，必要时要做归一化处理</li>\n<li>xgboost 和 lightgbm 都是决策树模型，会自动处理缺失值。其中lightgbm也可以处理类别类型数据</li>\n<li>构造模型，划分验证集和测试集</li>\n<li>集成学习方法：bagging, boosting</li>\n<li>模型评估：AUC指标</li>\n<li>模型调参：（最耗时耗力的一步）网格搜索（sklearn 提供GridSearchCV), 贝叶斯调参</li>\n<li>一般来说，调参并不会让模型性能有特别大的飞跃，但是会有一些性能上的提升</li>\n<li>注意不要过拟合</li>\n</ol>\n</li>\n<li><strong>模型融合</strong>：<ol>\n<li>简单加权，取平均或按权重分配</li>\n<li>简单投票或者加权投票</li>\n<li>stacking\\blending</li>\n<li>其他融合方式…</li>\n</ol>\n</li>\n</ul>\n<p>我的baseline地址：<a href=\"https://github.com/ichbinhandsome/TIANCHI/tree/master/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E9%87%91%E8%9E%8D%E9%A3%8E%E6%8E%A7-%E8%B4%B7%E6%AC%BE%E8%BF%9D%E7%BA%A6%E9%A2%84%E6%B5%8B\">here</a></p>\n<p>我采用了lightgbm，xgboost，catboost 这三种决策树模型，AUC最好的是0.7317。之后又再此基础上做了多次尝试，主要是在特征工程方面，比如利用随机森林填补缺省值Nan，去除噪音，删除一些不相关的特征等，发现了过拟合问题。还是得再从模型融合的方向下手，能够显著提升模型性能的是特征工程和模型融合。</p>\n","site":{"data":{}},"excerpt":"<p><strong>赛题地址：</strong></p>\n<p><a href=\"https://tianchi.aliyun.com/competition/entrance/531830/introduction\">零基础入门数据挖掘 - 贷款违约预测</a></p>\n<h2 id=\"Pipeline\"><a href=\"#Pipeline\" class=\"headerlink\" title=\"Pipeline:\"></a>Pipeline:</h2><p>对于这种csv表格式数据有一套固定的流程， 多用传统机器学习方法搭建模型。</p>","more":"<ul>\n<li><strong>EDA数据分析</strong>：<ol>\n<li>数据总体了解：大小，维度，特征 等</li>\n<li>查看数据中的缺省值和唯一值</li>\n<li>深入查看数据类型：数值型（连续还是离散），类别型或对象型，并进行分析</li>\n<li>分析特征和特征之间的关系，特征和目标变量的关系</li>\n<li>将结果可视化以便更好分析     </li>\n</ol>\n</li>\n<li><strong>特征工程</strong>：（重要部分）<ol>\n<li>对特征进行预处理：缺失值填充，时间格式处理，对象类型数据转换</li>\n<li>异常值处理，去除噪音：${3\\sigma}$，箱型图过滤</li>\n<li>数据分箱</li>\n<li>卡方交互：特征间组合，特征间衍生</li>\n<li>特征编码：one-hot, label-encode</li>\n<li>特征选择</li>\n<li>必要时还要进行归一化处理，降维，去除相关性高的特征等</li>\n</ol>\n</li>\n<li><strong>建模调参</strong>：（重要部分）<ol>\n<li>逻辑回归模型需要预先处理缺失值和异常值，必要时要做归一化处理</li>\n<li>xgboost 和 lightgbm 都是决策树模型，会自动处理缺失值。其中lightgbm也可以处理类别类型数据</li>\n<li>构造模型，划分验证集和测试集</li>\n<li>集成学习方法：bagging, boosting</li>\n<li>模型评估：AUC指标</li>\n<li>模型调参：（最耗时耗力的一步）网格搜索（sklearn 提供GridSearchCV), 贝叶斯调参</li>\n<li>一般来说，调参并不会让模型性能有特别大的飞跃，但是会有一些性能上的提升</li>\n<li>注意不要过拟合</li>\n</ol>\n</li>\n<li><strong>模型融合</strong>：<ol>\n<li>简单加权，取平均或按权重分配</li>\n<li>简单投票或者加权投票</li>\n<li>stacking\\blending</li>\n<li>其他融合方式…</li>\n</ol>\n</li>\n</ul>\n<p>我的baseline地址：<a href=\"https://github.com/ichbinhandsome/TIANCHI/tree/master/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E9%87%91%E8%9E%8D%E9%A3%8E%E6%8E%A7-%E8%B4%B7%E6%AC%BE%E8%BF%9D%E7%BA%A6%E9%A2%84%E6%B5%8B\">here</a></p>\n<p>我采用了lightgbm，xgboost，catboost 这三种决策树模型，AUC最好的是0.7317。之后又再此基础上做了多次尝试，主要是在特征工程方面，比如利用随机森林填补缺省值Nan，去除噪音，删除一些不相关的特征等，发现了过拟合问题。还是得再从模型融合的方向下手，能够显著提升模型性能的是特征工程和模型融合。</p>"},{"title":"【leetcode】KMP算法","date":"2020-10-06T10:00:40.000Z","mathjax":true,"_content":"\n资料链接：[leetcode 文章讲解](https://leetcode-cn.com/problems/implement-strstr/solution/bang-ni-ba-kmpsuan-fa-xue-ge-tong-tou-ming-ming-ba/)\n\n视频链接：[huahua 视频讲解](https://www.youtube.com/watch?v=uKr9qIZMtzw)\n\n*主串*（在主串中寻找匹配串），*匹配串*（需要被匹配的串）\n\nKMP 算法主要目的是将字符串匹配控制在线性时间复杂度 $O(m+n)$ 内， 如果采用暴力算法的话时间复杂度为$O((m-n)*n)$ , 其中 $m$ 为主串的长度，$n$ 为匹配串的长度。\n\n**主要思想**：善于利用匹配串中的信息，避免重复判断和主串上匹配指针回退。\n\n比如匹配串为 **ABCABE**, 当我们再匹配的过程中在 **E** 这个位置上出现不匹配，而之前的 **ABCAB** 都已经匹配成功。如果是暴力算法的我们需要先回退主串中的匹配指针到开始位置（即第一个 **A** 出现的位置），并且在其下一个位置处再从头对 **ABCABE** 进行匹配。但是很显然我们并不需要回退匹配指针和从 **ABCABE** 的头部开始匹配，我们只需要在主串的当前位置处对 **CABE** 再进行匹配即可，这样就利用了匹配串里面的信息，避免了重复操作。KMP 算法就是利用匹配串的这一特性，而且 KMP 最大的一个特点就是主串上的匹配指针从来不走回头路。\n\n<!-- more -->\n\n**方法实现**：\n\n现在问题在于我们如何利用匹配中的信息。 KMP 算法的第一步就是对匹配串进行建表，这个表在通常被称作为`next`表，它存储了匹配串的一些信息，通过这些信息我们能够得知在 **ABCABE** 出现 **E** 位置上不匹配时，我们只需要从 **C** 的位置再开始匹配，而非从头开始。第二步就是在主串中对匹配串匹配，碰到不匹配时，查找`next`表，回退匹配串上的指针，再移动匹配串和主串上的指针进行匹配，而主串上的匹配指针一直都不会回退，当匹配串指针回退到开始位置仍与主串不匹配时，主串上的匹配指针前进。\n\n * 构造 `next` 表：利用匹配串的前缀和后缀，分别构造对应位置上的前缀子串和后缀子串最长相同的长度（不包括这个位置上的元素）【*之所以不包括此位置上的元素是为了在调用`next`表时比较方便，参见 **ABAE** 的解释*】。比如 **ABAE**，在 **E** 这个位置上对应的长度是 $1$ ，因为对于 **ABA** 来说前缀是 **AB** 后缀是 **BA** ，它两最长的的相同部分为 **A**， 所以长度为 $1$。同理， **B** 位置上就是 $0$。 当 **E** 位置上出现不匹配时，我们查找 `next` 表，发现其对应的值为 $1$, 所以我们移动匹配串上的指针到索引为`1` 的位置上，即 **B** 的位置上，在判断是否匹配，因为 **A** 已经被匹配过了。\n\n   *代码实现*：(相当于自己和自己匹配)\n\n   ```python\n   def build(p : str) -> List[int]:\n       n = len(p)\n       nxt = [0, 0]\n       j = 0\n       for i in range(1, n):\n           while j > 0 and p[i] != p[j]:\n               j = nxt[j]\n           if p[i] == p[j]:\n               j += 1\n           nxt.append(j)\n       return nxt\n   ```\n\n   * 匹配（主串和匹配串）\n\n     *代码实现*：\n\n     ```python\n     def match(s: str, p: str) -> int:\n         n, m = len(p), len(s)\n         nxt = build(p)\n         j = 0\n         for i in range(m):\n             while j > 0 and s[i] != p[j]:\n                 j = nxt[j]\n             if s[i] == p[j]:\n                 j += 1\n             if j == n:\n                 return i-n+1\n         return -1\n     ```\n\n   ​\t\t\t\n\n**Leetcode : [实现 strStr()](https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnr003/)**\n\n*Solution*:\n\n````python\nclass Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        def build(p):\n            nxt = [0, 0]\n            j = 0\n            n = len(p)\n            for i in range(1, n):\n                while j > 0 and p[i] != p[j]:\n                    j = nxt[j]\n                if p[i] == p[j]: j += 1\n                nxt.append(j)\n            return nxt\n        if len(needle) == 0: return 0\n        nxt = build(needle)\n        n, m = len(haystack), len(needle)\n        j = 0\n        for i in range(n):\n            while j > 0 and haystack[i] != needle[j]:\n                j = nxt[j]\n            if haystack[i] == needle[j]: j += 1\n            if j == m: return i-m+1\n        return -1\n\n````\n\n````c++\nclass Solution {\npublic:\n    vector<int> build(string p){\n        vector<int> nxt = {0,0};\n        int j = 0;\n        for (int i = 1; i < p.size(); i++){\n            while (j > 0 && p[i] != p[j]){\n                j = nxt[j];\n            }\n            if (p[i] == p[j]){\n                ++j;\n            }\n            nxt.push_back(j);\n        }\n        return nxt;\n    }\n    int strStr(string haystack, string needle) {\n        if (needle.size() == 0) return 0;\n        vector<int> nxt = build(needle);\n        int m = haystack.size(), n = needle.size();\n        int j = 0;\n        for (int i = 0; i < m; i++){\n            while (j > 0 && haystack[i] != needle[j]){\n                j = nxt[j];\n            }\n            if (haystack[i] == needle[j]) ++j;\n            if (j == n) return i - n + 1;\n        }\n        return -1;\n    }\n};\n````\n\n\n\n\n\n  ","source":"_posts/kmp.md","raw":"---\ntitle: 【leetcode】KMP算法\ndate: 2020-10-06 18:00:40\ntags: leetcode\ncategories: Data structure & Algorithm\nmathjax: true\n---\n\n资料链接：[leetcode 文章讲解](https://leetcode-cn.com/problems/implement-strstr/solution/bang-ni-ba-kmpsuan-fa-xue-ge-tong-tou-ming-ming-ba/)\n\n视频链接：[huahua 视频讲解](https://www.youtube.com/watch?v=uKr9qIZMtzw)\n\n*主串*（在主串中寻找匹配串），*匹配串*（需要被匹配的串）\n\nKMP 算法主要目的是将字符串匹配控制在线性时间复杂度 $O(m+n)$ 内， 如果采用暴力算法的话时间复杂度为$O((m-n)*n)$ , 其中 $m$ 为主串的长度，$n$ 为匹配串的长度。\n\n**主要思想**：善于利用匹配串中的信息，避免重复判断和主串上匹配指针回退。\n\n比如匹配串为 **ABCABE**, 当我们再匹配的过程中在 **E** 这个位置上出现不匹配，而之前的 **ABCAB** 都已经匹配成功。如果是暴力算法的我们需要先回退主串中的匹配指针到开始位置（即第一个 **A** 出现的位置），并且在其下一个位置处再从头对 **ABCABE** 进行匹配。但是很显然我们并不需要回退匹配指针和从 **ABCABE** 的头部开始匹配，我们只需要在主串的当前位置处对 **CABE** 再进行匹配即可，这样就利用了匹配串里面的信息，避免了重复操作。KMP 算法就是利用匹配串的这一特性，而且 KMP 最大的一个特点就是主串上的匹配指针从来不走回头路。\n\n<!-- more -->\n\n**方法实现**：\n\n现在问题在于我们如何利用匹配中的信息。 KMP 算法的第一步就是对匹配串进行建表，这个表在通常被称作为`next`表，它存储了匹配串的一些信息，通过这些信息我们能够得知在 **ABCABE** 出现 **E** 位置上不匹配时，我们只需要从 **C** 的位置再开始匹配，而非从头开始。第二步就是在主串中对匹配串匹配，碰到不匹配时，查找`next`表，回退匹配串上的指针，再移动匹配串和主串上的指针进行匹配，而主串上的匹配指针一直都不会回退，当匹配串指针回退到开始位置仍与主串不匹配时，主串上的匹配指针前进。\n\n * 构造 `next` 表：利用匹配串的前缀和后缀，分别构造对应位置上的前缀子串和后缀子串最长相同的长度（不包括这个位置上的元素）【*之所以不包括此位置上的元素是为了在调用`next`表时比较方便，参见 **ABAE** 的解释*】。比如 **ABAE**，在 **E** 这个位置上对应的长度是 $1$ ，因为对于 **ABA** 来说前缀是 **AB** 后缀是 **BA** ，它两最长的的相同部分为 **A**， 所以长度为 $1$。同理， **B** 位置上就是 $0$。 当 **E** 位置上出现不匹配时，我们查找 `next` 表，发现其对应的值为 $1$, 所以我们移动匹配串上的指针到索引为`1` 的位置上，即 **B** 的位置上，在判断是否匹配，因为 **A** 已经被匹配过了。\n\n   *代码实现*：(相当于自己和自己匹配)\n\n   ```python\n   def build(p : str) -> List[int]:\n       n = len(p)\n       nxt = [0, 0]\n       j = 0\n       for i in range(1, n):\n           while j > 0 and p[i] != p[j]:\n               j = nxt[j]\n           if p[i] == p[j]:\n               j += 1\n           nxt.append(j)\n       return nxt\n   ```\n\n   * 匹配（主串和匹配串）\n\n     *代码实现*：\n\n     ```python\n     def match(s: str, p: str) -> int:\n         n, m = len(p), len(s)\n         nxt = build(p)\n         j = 0\n         for i in range(m):\n             while j > 0 and s[i] != p[j]:\n                 j = nxt[j]\n             if s[i] == p[j]:\n                 j += 1\n             if j == n:\n                 return i-n+1\n         return -1\n     ```\n\n   ​\t\t\t\n\n**Leetcode : [实现 strStr()](https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnr003/)**\n\n*Solution*:\n\n````python\nclass Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        def build(p):\n            nxt = [0, 0]\n            j = 0\n            n = len(p)\n            for i in range(1, n):\n                while j > 0 and p[i] != p[j]:\n                    j = nxt[j]\n                if p[i] == p[j]: j += 1\n                nxt.append(j)\n            return nxt\n        if len(needle) == 0: return 0\n        nxt = build(needle)\n        n, m = len(haystack), len(needle)\n        j = 0\n        for i in range(n):\n            while j > 0 and haystack[i] != needle[j]:\n                j = nxt[j]\n            if haystack[i] == needle[j]: j += 1\n            if j == m: return i-m+1\n        return -1\n\n````\n\n````c++\nclass Solution {\npublic:\n    vector<int> build(string p){\n        vector<int> nxt = {0,0};\n        int j = 0;\n        for (int i = 1; i < p.size(); i++){\n            while (j > 0 && p[i] != p[j]){\n                j = nxt[j];\n            }\n            if (p[i] == p[j]){\n                ++j;\n            }\n            nxt.push_back(j);\n        }\n        return nxt;\n    }\n    int strStr(string haystack, string needle) {\n        if (needle.size() == 0) return 0;\n        vector<int> nxt = build(needle);\n        int m = haystack.size(), n = needle.size();\n        int j = 0;\n        for (int i = 0; i < m; i++){\n            while (j > 0 && haystack[i] != needle[j]){\n                j = nxt[j];\n            }\n            if (haystack[i] == needle[j]) ++j;\n            if (j == n) return i - n + 1;\n        }\n        return -1;\n    }\n};\n````\n\n\n\n\n\n  ","slug":"kmp","published":1,"updated":"2020-10-06T12:03:08.243Z","_id":"ckfxsjwas00008kto1ozoav08","comments":1,"layout":"post","photos":[],"link":"","content":"<p>资料链接：<a href=\"https://leetcode-cn.com/problems/implement-strstr/solution/bang-ni-ba-kmpsuan-fa-xue-ge-tong-tou-ming-ming-ba/\">leetcode 文章讲解</a></p>\n<p>视频链接：<a href=\"https://www.youtube.com/watch?v=uKr9qIZMtzw\">huahua 视频讲解</a></p>\n<p><em>主串</em>（在主串中寻找匹配串），<em>匹配串</em>（需要被匹配的串）</p>\n<p>KMP 算法主要目的是将字符串匹配控制在线性时间复杂度 $O(m+n)$ 内， 如果采用暴力算法的话时间复杂度为$O((m-n)*n)$ , 其中 $m$ 为主串的长度，$n$ 为匹配串的长度。</p>\n<p><strong>主要思想</strong>：善于利用匹配串中的信息，避免重复判断和主串上匹配指针回退。</p>\n<p>比如匹配串为 <strong>ABCABE</strong>, 当我们再匹配的过程中在 <strong>E</strong> 这个位置上出现不匹配，而之前的 <strong>ABCAB</strong> 都已经匹配成功。如果是暴力算法的我们需要先回退主串中的匹配指针到开始位置（即第一个 <strong>A</strong> 出现的位置），并且在其下一个位置处再从头对 <strong>ABCABE</strong> 进行匹配。但是很显然我们并不需要回退匹配指针和从 <strong>ABCABE</strong> 的头部开始匹配，我们只需要在主串的当前位置处对 <strong>CABE</strong> 再进行匹配即可，这样就利用了匹配串里面的信息，避免了重复操作。KMP 算法就是利用匹配串的这一特性，而且 KMP 最大的一个特点就是主串上的匹配指针从来不走回头路。</p>\n<a id=\"more\"></a>\n\n<p><strong>方法实现</strong>：</p>\n<p>现在问题在于我们如何利用匹配中的信息。 KMP 算法的第一步就是对匹配串进行建表，这个表在通常被称作为<code>next</code>表，它存储了匹配串的一些信息，通过这些信息我们能够得知在 <strong>ABCABE</strong> 出现 <strong>E</strong> 位置上不匹配时，我们只需要从 <strong>C</strong> 的位置再开始匹配，而非从头开始。第二步就是在主串中对匹配串匹配，碰到不匹配时，查找<code>next</code>表，回退匹配串上的指针，再移动匹配串和主串上的指针进行匹配，而主串上的匹配指针一直都不会回退，当匹配串指针回退到开始位置仍与主串不匹配时，主串上的匹配指针前进。</p>\n<ul>\n<li><p>构造 <code>next</code> 表：利用匹配串的前缀和后缀，分别构造对应位置上的前缀子串和后缀子串最长相同的长度（不包括这个位置上的元素）【<em>之所以不包括此位置上的元素是为了在调用<code>next</code>表时比较方便，参见 <strong>ABAE</strong> 的解释</em>】。比如 <strong>ABAE</strong>，在 <strong>E</strong> 这个位置上对应的长度是 $1$ ，因为对于 <strong>ABA</strong> 来说前缀是 <strong>AB</strong> 后缀是 <strong>BA</strong> ，它两最长的的相同部分为 <strong>A</strong>， 所以长度为 $1$。同理， <strong>B</strong> 位置上就是 $0$。 当 <strong>E</strong> 位置上出现不匹配时，我们查找 <code>next</code> 表，发现其对应的值为 $1$, 所以我们移动匹配串上的指针到索引为<code>1</code> 的位置上，即 <strong>B</strong> 的位置上，在判断是否匹配，因为 <strong>A</strong> 已经被匹配过了。</p>\n<p><em>代码实现</em>：(相当于自己和自己匹配)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build</span>(<span class=\"params\">p : str</span>) -&gt; List[int]:</span></span><br><span class=\"line\">    n = len(p)</span><br><span class=\"line\">    nxt = [<span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">    j = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> p[i] != p[j]:</span><br><span class=\"line\">            j = nxt[j]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> p[i] == p[j]:</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        nxt.append(j)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nxt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>匹配（主串和匹配串）</p>\n<p><em>代码实现</em>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">match</span>(<span class=\"params\">s: str, p: str</span>) -&gt; int:</span></span><br><span class=\"line\">    n, m = len(p), len(s)</span><br><span class=\"line\">    nxt = build(p)</span><br><span class=\"line\">    j = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> s[i] != p[j]:</span><br><span class=\"line\">            j = nxt[j]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> s[i] == p[j]:</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j == n:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i-n+<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>​            </p>\n</li>\n</ul>\n<p><strong>Leetcode : <a href=\"https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnr003/\">实现 strStr()</a></strong></p>\n<p><em>Solution</em>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">strStr</span>(<span class=\"params\">self, haystack: str, needle: str</span>) -&gt; int:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build</span>(<span class=\"params\">p</span>):</span></span><br><span class=\"line\">            nxt = [<span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">            j = <span class=\"number\">0</span></span><br><span class=\"line\">            n = len(p)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">                <span class=\"keyword\">while</span> j &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> p[i] != p[j]:</span><br><span class=\"line\">                    j = nxt[j]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p[i] == p[j]: j += <span class=\"number\">1</span></span><br><span class=\"line\">                nxt.append(j)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nxt</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(needle) == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        nxt = build(needle)</span><br><span class=\"line\">        n, m = len(haystack), len(needle)</span><br><span class=\"line\">        j = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            <span class=\"keyword\">while</span> j &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> haystack[i] != needle[j]:</span><br><span class=\"line\">                j = nxt[j]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> haystack[i] == needle[j]: j += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> j == m: <span class=\"keyword\">return</span> i-m+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">build</span><span class=\"params\">(<span class=\"built_in\">string</span> p)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; nxt = &#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; p.<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; p[i] != p[j])&#123;</span><br><span class=\"line\">                j = nxt[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p[i] == p[j])&#123;</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            nxt.push_back(j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nxt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(<span class=\"built_in\">string</span> haystack, <span class=\"built_in\">string</span> needle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (needle.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; nxt = build(needle);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = haystack.<span class=\"built_in\">size</span>(), n = needle.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; haystack[i] != needle[j])&#123;</span><br><span class=\"line\">                j = nxt[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (haystack[i] == needle[j]) ++j;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == n) <span class=\"keyword\">return</span> i - n + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p>资料链接：<a href=\"https://leetcode-cn.com/problems/implement-strstr/solution/bang-ni-ba-kmpsuan-fa-xue-ge-tong-tou-ming-ming-ba/\">leetcode 文章讲解</a></p>\n<p>视频链接：<a href=\"https://www.youtube.com/watch?v=uKr9qIZMtzw\">huahua 视频讲解</a></p>\n<p><em>主串</em>（在主串中寻找匹配串），<em>匹配串</em>（需要被匹配的串）</p>\n<p>KMP 算法主要目的是将字符串匹配控制在线性时间复杂度 $O(m+n)$ 内， 如果采用暴力算法的话时间复杂度为$O((m-n)*n)$ , 其中 $m$ 为主串的长度，$n$ 为匹配串的长度。</p>\n<p><strong>主要思想</strong>：善于利用匹配串中的信息，避免重复判断和主串上匹配指针回退。</p>\n<p>比如匹配串为 <strong>ABCABE</strong>, 当我们再匹配的过程中在 <strong>E</strong> 这个位置上出现不匹配，而之前的 <strong>ABCAB</strong> 都已经匹配成功。如果是暴力算法的我们需要先回退主串中的匹配指针到开始位置（即第一个 <strong>A</strong> 出现的位置），并且在其下一个位置处再从头对 <strong>ABCABE</strong> 进行匹配。但是很显然我们并不需要回退匹配指针和从 <strong>ABCABE</strong> 的头部开始匹配，我们只需要在主串的当前位置处对 <strong>CABE</strong> 再进行匹配即可，这样就利用了匹配串里面的信息，避免了重复操作。KMP 算法就是利用匹配串的这一特性，而且 KMP 最大的一个特点就是主串上的匹配指针从来不走回头路。</p>","more":"<p><strong>方法实现</strong>：</p>\n<p>现在问题在于我们如何利用匹配中的信息。 KMP 算法的第一步就是对匹配串进行建表，这个表在通常被称作为<code>next</code>表，它存储了匹配串的一些信息，通过这些信息我们能够得知在 <strong>ABCABE</strong> 出现 <strong>E</strong> 位置上不匹配时，我们只需要从 <strong>C</strong> 的位置再开始匹配，而非从头开始。第二步就是在主串中对匹配串匹配，碰到不匹配时，查找<code>next</code>表，回退匹配串上的指针，再移动匹配串和主串上的指针进行匹配，而主串上的匹配指针一直都不会回退，当匹配串指针回退到开始位置仍与主串不匹配时，主串上的匹配指针前进。</p>\n<ul>\n<li><p>构造 <code>next</code> 表：利用匹配串的前缀和后缀，分别构造对应位置上的前缀子串和后缀子串最长相同的长度（不包括这个位置上的元素）【<em>之所以不包括此位置上的元素是为了在调用<code>next</code>表时比较方便，参见 <strong>ABAE</strong> 的解释</em>】。比如 <strong>ABAE</strong>，在 <strong>E</strong> 这个位置上对应的长度是 $1$ ，因为对于 <strong>ABA</strong> 来说前缀是 <strong>AB</strong> 后缀是 <strong>BA</strong> ，它两最长的的相同部分为 <strong>A</strong>， 所以长度为 $1$。同理， <strong>B</strong> 位置上就是 $0$。 当 <strong>E</strong> 位置上出现不匹配时，我们查找 <code>next</code> 表，发现其对应的值为 $1$, 所以我们移动匹配串上的指针到索引为<code>1</code> 的位置上，即 <strong>B</strong> 的位置上，在判断是否匹配，因为 <strong>A</strong> 已经被匹配过了。</p>\n<p><em>代码实现</em>：(相当于自己和自己匹配)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build</span>(<span class=\"params\">p : str</span>) -&gt; List[int]:</span></span><br><span class=\"line\">    n = len(p)</span><br><span class=\"line\">    nxt = [<span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">    j = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> p[i] != p[j]:</span><br><span class=\"line\">            j = nxt[j]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> p[i] == p[j]:</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        nxt.append(j)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nxt</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>匹配（主串和匹配串）</p>\n<p><em>代码实现</em>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">match</span>(<span class=\"params\">s: str, p: str</span>) -&gt; int:</span></span><br><span class=\"line\">    n, m = len(p), len(s)</span><br><span class=\"line\">    nxt = build(p)</span><br><span class=\"line\">    j = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(m):</span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> s[i] != p[j]:</span><br><span class=\"line\">            j = nxt[j]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> s[i] == p[j]:</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j == n:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i-n+<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>​            </p>\n</li>\n</ul>\n<p><strong>Leetcode : <a href=\"https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnr003/\">实现 strStr()</a></strong></p>\n<p><em>Solution</em>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">strStr</span>(<span class=\"params\">self, haystack: str, needle: str</span>) -&gt; int:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build</span>(<span class=\"params\">p</span>):</span></span><br><span class=\"line\">            nxt = [<span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">            j = <span class=\"number\">0</span></span><br><span class=\"line\">            n = len(p)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">                <span class=\"keyword\">while</span> j &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> p[i] != p[j]:</span><br><span class=\"line\">                    j = nxt[j]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> p[i] == p[j]: j += <span class=\"number\">1</span></span><br><span class=\"line\">                nxt.append(j)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nxt</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(needle) == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        nxt = build(needle)</span><br><span class=\"line\">        n, m = len(haystack), len(needle)</span><br><span class=\"line\">        j = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            <span class=\"keyword\">while</span> j &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> haystack[i] != needle[j]:</span><br><span class=\"line\">                j = nxt[j]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> haystack[i] == needle[j]: j += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> j == m: <span class=\"keyword\">return</span> i-m+<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">build</span><span class=\"params\">(<span class=\"built_in\">string</span> p)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; nxt = &#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; p.<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; p[i] != p[j])&#123;</span><br><span class=\"line\">                j = nxt[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p[i] == p[j])&#123;</span><br><span class=\"line\">                ++j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            nxt.push_back(j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nxt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(<span class=\"built_in\">string</span> haystack, <span class=\"built_in\">string</span> needle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (needle.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; nxt = build(needle);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = haystack.<span class=\"built_in\">size</span>(), n = needle.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; haystack[i] != needle[j])&#123;</span><br><span class=\"line\">                j = nxt[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (haystack[i] == needle[j]) ++j;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == n) <span class=\"keyword\">return</span> i - n + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"Docker Introduction","date":"2020-10-30T09:54:08.000Z","_content":"\n### Docker 简介\n\nDocker 是一个开源，轻量级的应用容器引擎，基于GO语言开发，用于创建、管理和编排容器。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。**Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。**它是目前最流行的 Linux 容器解决方案。Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\n\n<!-- more -->\n\n1. **虚拟机和容器的区别与联系**\n\n   * 虚拟机需要有额外的虚拟机管理应用和虚拟机操作系统层，操作系统层不仅占用空间而且运行速度也相对慢\n\n   * Docker容器是在本机操作系统层面上实现虚拟化，因此很轻量，速度接近原生系统速度\n\n   * 传统的虚拟机需要模拟整台机器包括硬件，每台虚拟机都需要有自己的操作系统，虚拟机一旦被开启，预分配给他的资源将全部被占用。每一个虚拟机包括应用，必要的二进制和库，以及一个完整的用户操作系统\n\n   * 容器技术和我们的宿主机共享硬件资源及操作系统，可以实现资源的动态分配。容器包含应用和其所有的依赖包，但是与其他容器共享内核。容器在宿主机操作系统中，在用户空间以分离的进程运行。容器内没有自己的内核，也没有进行硬件虚拟。\n\n     ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/68edf099da1ec2b442759b136d97d95.png)\n\n     ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/245f0b186036d5814ad0ca0a599ead4.png)\n\n     ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/67d348ec911d8f6ccab45f3183a76c7.png)\n\n     ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/62eed5796896de9224f843390e64784.jpg)\n\n     ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/bf26e3f822828ad852ddb96857d84b6.jpg)\n\n     \n\n2. **Docker 的应用场景和特点**\n\n   * Build, Ship and Run\n   * Build once，Run anywhere\n\n3. **Docker 的基本概念**\n\n   - **镜像**：Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变；\t\n\n     镜像（类）= 文件系统+数据，可以用开发语言中的类比作镜像，对象比作容器\n\n   - **容器**：容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间容器可以被。创建、启动、停止、删除和暂停等等，说到镜像与容器之间的关系，可以类比面向对象程序设计中的类和实例；\n\n     容器是镜像的运行实例，可以使用同一个镜像运行多个实例。\n\n     *从读写角度来说，镜像是只读的，容器是在镜像上添加了一层可读写的文件系统*\n\n   - **仓库**：镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。一个 Docker Registry 中可以包含多个仓库；每个仓库可以包含多个标签；每个标签对应一个镜像，其中标签可以理解为镜像的版本号\n\n4. **Docker 的常用命令**\n\n   * `docker pull 【镜像名】` 从docker-hub 中拉取镜像\n\n   * `docker search image_name` - 从 Docker Hub仓库中检索镜像\n\n   * `docker run 【镜像名】` 运行镜像\n\n   * `docker image ls `, `docker container ls`  获取镜像， 容器列表\n\n   * `exit` 从正在运行的容器中退出\n\n   * `docker ps ` 查看所有正在运行的容器\n\n   * `docker container rm [container ID]` 删除容器\n\n   * docker 端口映射，开启 bash 进程 `-it `\n\n   * 制作自己的 docker 容器， 使用 dockerfile ：\n\n     1. 编写 Dockerfile 文件\n\n     2. `docker image build -t [文件名]` 创建image 文件\n\n     3. `docker container run`命令从image 文件生成容器\n\n     4. 镜像文件的发布 参考：http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html\n\n     5. [commit 命令](https://hijiangtao.github.io/2018/04/17/Docker-in-Action/)\n\n        [从 docker 到 K8S](https://www.qikqiak.com/k8s-book/)\n\n","source":"_posts/docker.md","raw":"---\ntitle: Docker Introduction\ndate: 2020-10-30 17:54:08\ntags: tools\ncategories: tools \n---\n\n### Docker 简介\n\nDocker 是一个开源，轻量级的应用容器引擎，基于GO语言开发，用于创建、管理和编排容器。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。**Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。**它是目前最流行的 Linux 容器解决方案。Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。\n\n<!-- more -->\n\n1. **虚拟机和容器的区别与联系**\n\n   * 虚拟机需要有额外的虚拟机管理应用和虚拟机操作系统层，操作系统层不仅占用空间而且运行速度也相对慢\n\n   * Docker容器是在本机操作系统层面上实现虚拟化，因此很轻量，速度接近原生系统速度\n\n   * 传统的虚拟机需要模拟整台机器包括硬件，每台虚拟机都需要有自己的操作系统，虚拟机一旦被开启，预分配给他的资源将全部被占用。每一个虚拟机包括应用，必要的二进制和库，以及一个完整的用户操作系统\n\n   * 容器技术和我们的宿主机共享硬件资源及操作系统，可以实现资源的动态分配。容器包含应用和其所有的依赖包，但是与其他容器共享内核。容器在宿主机操作系统中，在用户空间以分离的进程运行。容器内没有自己的内核，也没有进行硬件虚拟。\n\n     ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/68edf099da1ec2b442759b136d97d95.png)\n\n     ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/245f0b186036d5814ad0ca0a599ead4.png)\n\n     ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/67d348ec911d8f6ccab45f3183a76c7.png)\n\n     ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/62eed5796896de9224f843390e64784.jpg)\n\n     ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/bf26e3f822828ad852ddb96857d84b6.jpg)\n\n     \n\n2. **Docker 的应用场景和特点**\n\n   * Build, Ship and Run\n   * Build once，Run anywhere\n\n3. **Docker 的基本概念**\n\n   - **镜像**：Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变；\t\n\n     镜像（类）= 文件系统+数据，可以用开发语言中的类比作镜像，对象比作容器\n\n   - **容器**：容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间容器可以被。创建、启动、停止、删除和暂停等等，说到镜像与容器之间的关系，可以类比面向对象程序设计中的类和实例；\n\n     容器是镜像的运行实例，可以使用同一个镜像运行多个实例。\n\n     *从读写角度来说，镜像是只读的，容器是在镜像上添加了一层可读写的文件系统*\n\n   - **仓库**：镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。一个 Docker Registry 中可以包含多个仓库；每个仓库可以包含多个标签；每个标签对应一个镜像，其中标签可以理解为镜像的版本号\n\n4. **Docker 的常用命令**\n\n   * `docker pull 【镜像名】` 从docker-hub 中拉取镜像\n\n   * `docker search image_name` - 从 Docker Hub仓库中检索镜像\n\n   * `docker run 【镜像名】` 运行镜像\n\n   * `docker image ls `, `docker container ls`  获取镜像， 容器列表\n\n   * `exit` 从正在运行的容器中退出\n\n   * `docker ps ` 查看所有正在运行的容器\n\n   * `docker container rm [container ID]` 删除容器\n\n   * docker 端口映射，开启 bash 进程 `-it `\n\n   * 制作自己的 docker 容器， 使用 dockerfile ：\n\n     1. 编写 Dockerfile 文件\n\n     2. `docker image build -t [文件名]` 创建image 文件\n\n     3. `docker container run`命令从image 文件生成容器\n\n     4. 镜像文件的发布 参考：http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html\n\n     5. [commit 命令](https://hijiangtao.github.io/2018/04/17/Docker-in-Action/)\n\n        [从 docker 到 K8S](https://www.qikqiak.com/k8s-book/)\n\n","slug":"docker","published":1,"updated":"2020-10-30T10:50:33.842Z","_id":"ckgw39c340000kwto7akw25ha","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Docker-简介\"><a href=\"#Docker-简介\" class=\"headerlink\" title=\"Docker 简介\"></a>Docker 简介</h3><p>Docker 是一个开源，轻量级的应用容器引擎，基于GO语言开发，用于创建、管理和编排容器。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。<strong>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。</strong>它是目前最流行的 Linux 容器解决方案。Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>\n<a id=\"more\"></a>\n\n<ol>\n<li><p><strong>虚拟机和容器的区别与联系</strong></p>\n<ul>\n<li><p>虚拟机需要有额外的虚拟机管理应用和虚拟机操作系统层，操作系统层不仅占用空间而且运行速度也相对慢</p>\n</li>\n<li><p>Docker容器是在本机操作系统层面上实现虚拟化，因此很轻量，速度接近原生系统速度</p>\n</li>\n<li><p>传统的虚拟机需要模拟整台机器包括硬件，每台虚拟机都需要有自己的操作系统，虚拟机一旦被开启，预分配给他的资源将全部被占用。每一个虚拟机包括应用，必要的二进制和库，以及一个完整的用户操作系统</p>\n</li>\n<li><p>容器技术和我们的宿主机共享硬件资源及操作系统，可以实现资源的动态分配。容器包含应用和其所有的依赖包，但是与其他容器共享内核。容器在宿主机操作系统中，在用户空间以分离的进程运行。容器内没有自己的内核，也没有进行硬件虚拟。</p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/68edf099da1ec2b442759b136d97d95.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/245f0b186036d5814ad0ca0a599ead4.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/67d348ec911d8f6ccab45f3183a76c7.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/62eed5796896de9224f843390e64784.jpg\"></p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/bf26e3f822828ad852ddb96857d84b6.jpg\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p><strong>Docker 的应用场景和特点</strong></p>\n<ul>\n<li>Build, Ship and Run</li>\n<li>Build once，Run anywhere</li>\n</ul>\n</li>\n<li><p><strong>Docker 的基本概念</strong></p>\n<ul>\n<li><p><strong>镜像</strong>：Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变；    </p>\n<p>镜像（类）= 文件系统+数据，可以用开发语言中的类比作镜像，对象比作容器</p>\n</li>\n<li><p><strong>容器</strong>：容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间容器可以被。创建、启动、停止、删除和暂停等等，说到镜像与容器之间的关系，可以类比面向对象程序设计中的类和实例；</p>\n<p>容器是镜像的运行实例，可以使用同一个镜像运行多个实例。</p>\n<p><em>从读写角度来说，镜像是只读的，容器是在镜像上添加了一层可读写的文件系统</em></p>\n</li>\n<li><p><strong>仓库</strong>：镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。一个 Docker Registry 中可以包含多个仓库；每个仓库可以包含多个标签；每个标签对应一个镜像，其中标签可以理解为镜像的版本号</p>\n</li>\n</ul>\n</li>\n<li><p><strong>Docker 的常用命令</strong></p>\n<ul>\n<li><p><code>docker pull 【镜像名】</code> 从docker-hub 中拉取镜像</p>\n</li>\n<li><p><code>docker search image_name</code> - 从 Docker Hub仓库中检索镜像</p>\n</li>\n<li><p><code>docker run 【镜像名】</code> 运行镜像</p>\n</li>\n<li><p><code>docker image ls </code>, <code>docker container ls</code>  获取镜像， 容器列表</p>\n</li>\n<li><p><code>exit</code> 从正在运行的容器中退出</p>\n</li>\n<li><p><code>docker ps </code> 查看所有正在运行的容器</p>\n</li>\n<li><p><code>docker container rm [container ID]</code> 删除容器</p>\n</li>\n<li><p>docker 端口映射，开启 bash 进程 <code>-it </code></p>\n</li>\n<li><p>制作自己的 docker 容器， 使用 dockerfile ：</p>\n<ol>\n<li><p>编写 Dockerfile 文件</p>\n</li>\n<li><p><code>docker image build -t [文件名]</code> 创建image 文件</p>\n</li>\n<li><p><code>docker container run</code>命令从image 文件生成容器</p>\n</li>\n<li><p>镜像文件的发布 参考：<a href=\"http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html\">http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</a></p>\n</li>\n<li><p><a href=\"https://hijiangtao.github.io/2018/04/17/Docker-in-Action/\">commit 命令</a></p>\n<p><a href=\"https://www.qikqiak.com/k8s-book/\">从 docker 到 K8S</a></p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h3 id=\"Docker-简介\"><a href=\"#Docker-简介\" class=\"headerlink\" title=\"Docker 简介\"></a>Docker 简介</h3><p>Docker 是一个开源，轻量级的应用容器引擎，基于GO语言开发，用于创建、管理和编排容器。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。<strong>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。</strong>它是目前最流行的 Linux 容器解决方案。Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p>","more":"<ol>\n<li><p><strong>虚拟机和容器的区别与联系</strong></p>\n<ul>\n<li><p>虚拟机需要有额外的虚拟机管理应用和虚拟机操作系统层，操作系统层不仅占用空间而且运行速度也相对慢</p>\n</li>\n<li><p>Docker容器是在本机操作系统层面上实现虚拟化，因此很轻量，速度接近原生系统速度</p>\n</li>\n<li><p>传统的虚拟机需要模拟整台机器包括硬件，每台虚拟机都需要有自己的操作系统，虚拟机一旦被开启，预分配给他的资源将全部被占用。每一个虚拟机包括应用，必要的二进制和库，以及一个完整的用户操作系统</p>\n</li>\n<li><p>容器技术和我们的宿主机共享硬件资源及操作系统，可以实现资源的动态分配。容器包含应用和其所有的依赖包，但是与其他容器共享内核。容器在宿主机操作系统中，在用户空间以分离的进程运行。容器内没有自己的内核，也没有进行硬件虚拟。</p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/68edf099da1ec2b442759b136d97d95.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/245f0b186036d5814ad0ca0a599ead4.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/67d348ec911d8f6ccab45f3183a76c7.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/62eed5796896de9224f843390e64784.jpg\"></p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/bf26e3f822828ad852ddb96857d84b6.jpg\"></p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p><strong>Docker 的应用场景和特点</strong></p>\n<ul>\n<li>Build, Ship and Run</li>\n<li>Build once，Run anywhere</li>\n</ul>\n</li>\n<li><p><strong>Docker 的基本概念</strong></p>\n<ul>\n<li><p><strong>镜像</strong>：Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变；    </p>\n<p>镜像（类）= 文件系统+数据，可以用开发语言中的类比作镜像，对象比作容器</p>\n</li>\n<li><p><strong>容器</strong>：容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间容器可以被。创建、启动、停止、删除和暂停等等，说到镜像与容器之间的关系，可以类比面向对象程序设计中的类和实例；</p>\n<p>容器是镜像的运行实例，可以使用同一个镜像运行多个实例。</p>\n<p><em>从读写角度来说，镜像是只读的，容器是在镜像上添加了一层可读写的文件系统</em></p>\n</li>\n<li><p><strong>仓库</strong>：镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。一个 Docker Registry 中可以包含多个仓库；每个仓库可以包含多个标签；每个标签对应一个镜像，其中标签可以理解为镜像的版本号</p>\n</li>\n</ul>\n</li>\n<li><p><strong>Docker 的常用命令</strong></p>\n<ul>\n<li><p><code>docker pull 【镜像名】</code> 从docker-hub 中拉取镜像</p>\n</li>\n<li><p><code>docker search image_name</code> - 从 Docker Hub仓库中检索镜像</p>\n</li>\n<li><p><code>docker run 【镜像名】</code> 运行镜像</p>\n</li>\n<li><p><code>docker image ls </code>, <code>docker container ls</code>  获取镜像， 容器列表</p>\n</li>\n<li><p><code>exit</code> 从正在运行的容器中退出</p>\n</li>\n<li><p><code>docker ps </code> 查看所有正在运行的容器</p>\n</li>\n<li><p><code>docker container rm [container ID]</code> 删除容器</p>\n</li>\n<li><p>docker 端口映射，开启 bash 进程 <code>-it </code></p>\n</li>\n<li><p>制作自己的 docker 容器， 使用 dockerfile ：</p>\n<ol>\n<li><p>编写 Dockerfile 文件</p>\n</li>\n<li><p><code>docker image build -t [文件名]</code> 创建image 文件</p>\n</li>\n<li><p><code>docker container run</code>命令从image 文件生成容器</p>\n</li>\n<li><p>镜像文件的发布 参考：<a href=\"http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html\">http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html</a></p>\n</li>\n<li><p><a href=\"https://hijiangtao.github.io/2018/04/17/Docker-in-Action/\">commit 命令</a></p>\n<p><a href=\"https://www.qikqiak.com/k8s-book/\">从 docker 到 K8S</a></p>\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>"},{"title":"【leetcode】Quick select","date":"2020-10-31T08:11:58.000Z","mathjax":true,"_content":"\n### Introduction\n\nQuick select is a transformation of quicksort, we can use it to find the $k-th$ element in a list if it exists. The  average time complexity of this algorithm is $O(n)$. We all know that the average time complexity of quick sort is $O(nlogn)$.\n\nThis kind of problem can also be solved by using Max_heap or Min_heap, the time complexity is $O(nlogk)$.\n\n<!-- more -->\n\n### Quick Select\n\n*Input*: `array nums`, `int k`. (find `k-th` smallest element in an unsorted array)\n*Output*: `int target`\n\n> 1. Choose an element from the array as pivot, exchange the position of pivot and number at the end of the array.\n>    - *The pivot can either be the end element or a random chosen element. A random chosen pivot can make the algorithm much possibly run in average case time.*\n> 2. Partition the array into 2 parts in which the numbers in left subarray is less than (or equal to) the pivot and the numbers in right subarray is greater than (or equal to) the pivot.\n> 3. Exchange pivot (at the end of the array now) with the first element in the right part.\n> 4. Compare k with length of the left subarray, say, len.\n>    - if `k == len + 1`， then pivot is the target.\n>    - if `k <= len`, repeat from step 1 on the left subarray.\n>    - if `k > len, k = k - len`, repeat from step 1 on the right subarray.\n\n*implementation*\n\n```python\n#快速选择 找到第（k+1）小的数\ndef quickselect(nums, left, right, k):\n    if left > right:\n        return\n    #随机选取哨兵,可以一定程度上降低时间复杂度\n    random_index = random.randint(left, right)\n    nums[left], nums[random_index] = nums[random_index], nums[left]\n    pivot = nums[left]\n    # 快速选择模板 为了找到哨兵pivot 在数组中的位置\n    i , j = left + 1, right\n    while i <= j:\n        while i <= j and nums[i] <= pivot: i += 1\n        while i <= j and nums[j] > pivot: j -= 1\n        if i <= j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n    nums[left], nums[j] = nums[j], nums[left]\n    # j 为 pivot 在数组中的位置索引\n    if j == k:\n        return nums[j]\n    elif j < k:\n        return quickselect(nums, j+1, right, k)\n    else:\n        return quickselect(nums, left, j-1, k)\n```\n\n### Quick Sort\n\n```python\ndef quicksort(nums, left, right):\n    if left > right:\n        return\n    pivot = nums[left]\n    i, j = left+1, right\n    while i <= j:\n        while i <= j and nums[i] <= pivot: i += 1\n        while i <= j and nums[j] >= pivot: j -= 1\n        if i <= j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n    nums[left], nums[j] = nums[j], nums[left]\n    #与快速选择的主要区别在于：快速排序需要再对两边同时递归，从而对整个数组进行排序。而快速选择只需要判断k的位置然后选择一边进行递归，类似于二分查找的操作，它只想找到第k个元素而不关系其他元素在数组中怎么排列，从而降低了时间复杂度\n    quicksort(nums, left, j-1)\n    quicksort(nums, j+1, right)\n```\n\n### Leetcode examples:\n\n* [Kth Largest Element in an Array](https://leetcode.com/problems/kth-largest-element-in-an-array/)\n* [Top K Frequent Elements](https://leetcode.com/problems/top-k-frequent-elements/)","source":"_posts/快速选择.md","raw":"---\ntitle: 【leetcode】Quick select\ndate: 2020-10-31 16:11:58\ntags: leetcode\ncategories: Data structure & Algorithm\nmathjax: true\n---\n\n### Introduction\n\nQuick select is a transformation of quicksort, we can use it to find the $k-th$ element in a list if it exists. The  average time complexity of this algorithm is $O(n)$. We all know that the average time complexity of quick sort is $O(nlogn)$.\n\nThis kind of problem can also be solved by using Max_heap or Min_heap, the time complexity is $O(nlogk)$.\n\n<!-- more -->\n\n### Quick Select\n\n*Input*: `array nums`, `int k`. (find `k-th` smallest element in an unsorted array)\n*Output*: `int target`\n\n> 1. Choose an element from the array as pivot, exchange the position of pivot and number at the end of the array.\n>    - *The pivot can either be the end element or a random chosen element. A random chosen pivot can make the algorithm much possibly run in average case time.*\n> 2. Partition the array into 2 parts in which the numbers in left subarray is less than (or equal to) the pivot and the numbers in right subarray is greater than (or equal to) the pivot.\n> 3. Exchange pivot (at the end of the array now) with the first element in the right part.\n> 4. Compare k with length of the left subarray, say, len.\n>    - if `k == len + 1`， then pivot is the target.\n>    - if `k <= len`, repeat from step 1 on the left subarray.\n>    - if `k > len, k = k - len`, repeat from step 1 on the right subarray.\n\n*implementation*\n\n```python\n#快速选择 找到第（k+1）小的数\ndef quickselect(nums, left, right, k):\n    if left > right:\n        return\n    #随机选取哨兵,可以一定程度上降低时间复杂度\n    random_index = random.randint(left, right)\n    nums[left], nums[random_index] = nums[random_index], nums[left]\n    pivot = nums[left]\n    # 快速选择模板 为了找到哨兵pivot 在数组中的位置\n    i , j = left + 1, right\n    while i <= j:\n        while i <= j and nums[i] <= pivot: i += 1\n        while i <= j and nums[j] > pivot: j -= 1\n        if i <= j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n    nums[left], nums[j] = nums[j], nums[left]\n    # j 为 pivot 在数组中的位置索引\n    if j == k:\n        return nums[j]\n    elif j < k:\n        return quickselect(nums, j+1, right, k)\n    else:\n        return quickselect(nums, left, j-1, k)\n```\n\n### Quick Sort\n\n```python\ndef quicksort(nums, left, right):\n    if left > right:\n        return\n    pivot = nums[left]\n    i, j = left+1, right\n    while i <= j:\n        while i <= j and nums[i] <= pivot: i += 1\n        while i <= j and nums[j] >= pivot: j -= 1\n        if i <= j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n    nums[left], nums[j] = nums[j], nums[left]\n    #与快速选择的主要区别在于：快速排序需要再对两边同时递归，从而对整个数组进行排序。而快速选择只需要判断k的位置然后选择一边进行递归，类似于二分查找的操作，它只想找到第k个元素而不关系其他元素在数组中怎么排列，从而降低了时间复杂度\n    quicksort(nums, left, j-1)\n    quicksort(nums, j+1, right)\n```\n\n### Leetcode examples:\n\n* [Kth Largest Element in an Array](https://leetcode.com/problems/kth-largest-element-in-an-array/)\n* [Top K Frequent Elements](https://leetcode.com/problems/top-k-frequent-elements/)","slug":"快速选择","published":1,"updated":"2020-10-31T09:10:21.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgxgtlag0000cstoefegcvmn","content":"<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p>Quick select is a transformation of quicksort, we can use it to find the $k-th$ element in a list if it exists. The  average time complexity of this algorithm is $O(n)$. We all know that the average time complexity of quick sort is $O(nlogn)$.</p>\n<p>This kind of problem can also be solved by using Max_heap or Min_heap, the time complexity is $O(nlogk)$.</p>\n<a id=\"more\"></a>\n\n<h3 id=\"Quick-Select\"><a href=\"#Quick-Select\" class=\"headerlink\" title=\"Quick Select\"></a>Quick Select</h3><p><em>Input</em>: <code>array nums</code>, <code>int k</code>. (find <code>k-th</code> smallest element in an unsorted array)<br><em>Output</em>: <code>int target</code></p>\n<blockquote>\n<ol>\n<li>Choose an element from the array as pivot, exchange the position of pivot and number at the end of the array.<ul>\n<li><em>The pivot can either be the end element or a random chosen element. A random chosen pivot can make the algorithm much possibly run in average case time.</em></li>\n</ul>\n</li>\n<li>Partition the array into 2 parts in which the numbers in left subarray is less than (or equal to) the pivot and the numbers in right subarray is greater than (or equal to) the pivot.</li>\n<li>Exchange pivot (at the end of the array now) with the first element in the right part.</li>\n<li>Compare k with length of the left subarray, say, len.<ul>\n<li>if <code>k == len + 1</code>， then pivot is the target.</li>\n<li>if <code>k &lt;= len</code>, repeat from step 1 on the left subarray.</li>\n<li>if <code>k &gt; len, k = k - len</code>, repeat from step 1 on the right subarray.</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p><em>implementation</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#快速选择 找到第（k+1）小的数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quickselect</span>(<span class=\"params\">nums, left, right, k</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &gt; right:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\">#随机选取哨兵,可以一定程度上降低时间复杂度</span></span><br><span class=\"line\">    random_index = random.randint(left, right)</span><br><span class=\"line\">    nums[left], nums[random_index] = nums[random_index], nums[left]</span><br><span class=\"line\">    pivot = nums[left]</span><br><span class=\"line\">    <span class=\"comment\"># 快速选择模板 为了找到哨兵pivot 在数组中的位置</span></span><br><span class=\"line\">    i , j = left + <span class=\"number\">1</span>, right</span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= j:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt;= j <span class=\"keyword\">and</span> nums[i] &lt;= pivot: i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt;= j <span class=\"keyword\">and</span> nums[j] &gt; pivot: j -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &lt;= j:</span><br><span class=\"line\">            nums[i], nums[j] = nums[j], nums[i]</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">    nums[left], nums[j] = nums[j], nums[left]</span><br><span class=\"line\">    <span class=\"comment\"># j 为 pivot 在数组中的位置索引</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> j == k:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[j]</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> j &lt; k:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> quickselect(nums, j+<span class=\"number\">1</span>, right, k)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> quickselect(nums, left, j<span class=\"number\">-1</span>, k)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Quick-Sort\"><a href=\"#Quick-Sort\" class=\"headerlink\" title=\"Quick Sort\"></a>Quick Sort</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quicksort</span>(<span class=\"params\">nums, left, right</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &gt; right:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    pivot = nums[left]</span><br><span class=\"line\">    i, j = left+<span class=\"number\">1</span>, right</span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= j:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt;= j <span class=\"keyword\">and</span> nums[i] &lt;= pivot: i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt;= j <span class=\"keyword\">and</span> nums[j] &gt;= pivot: j -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &lt;= j:</span><br><span class=\"line\">            nums[i], nums[j] = nums[j], nums[i]</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">    nums[left], nums[j] = nums[j], nums[left]</span><br><span class=\"line\">    <span class=\"comment\">#与快速选择的主要区别在于：快速排序需要再对两边同时递归，从而对整个数组进行排序。而快速选择只需要判断k的位置然后选择一边进行递归，类似于二分查找的操作，它只想找到第k个元素而不关系其他元素在数组中怎么排列，从而降低了时间复杂度</span></span><br><span class=\"line\">    quicksort(nums, left, j<span class=\"number\">-1</span>)</span><br><span class=\"line\">    quicksort(nums, j+<span class=\"number\">1</span>, right)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Leetcode-examples\"><a href=\"#Leetcode-examples\" class=\"headerlink\" title=\"Leetcode examples:\"></a>Leetcode examples:</h3><ul>\n<li><a href=\"https://leetcode.com/problems/kth-largest-element-in-an-array/\">Kth Largest Element in an Array</a></li>\n<li><a href=\"https://leetcode.com/problems/top-k-frequent-elements/\">Top K Frequent Elements</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p>Quick select is a transformation of quicksort, we can use it to find the $k-th$ element in a list if it exists. The  average time complexity of this algorithm is $O(n)$. We all know that the average time complexity of quick sort is $O(nlogn)$.</p>\n<p>This kind of problem can also be solved by using Max_heap or Min_heap, the time complexity is $O(nlogk)$.</p>","more":"<h3 id=\"Quick-Select\"><a href=\"#Quick-Select\" class=\"headerlink\" title=\"Quick Select\"></a>Quick Select</h3><p><em>Input</em>: <code>array nums</code>, <code>int k</code>. (find <code>k-th</code> smallest element in an unsorted array)<br><em>Output</em>: <code>int target</code></p>\n<blockquote>\n<ol>\n<li>Choose an element from the array as pivot, exchange the position of pivot and number at the end of the array.<ul>\n<li><em>The pivot can either be the end element or a random chosen element. A random chosen pivot can make the algorithm much possibly run in average case time.</em></li>\n</ul>\n</li>\n<li>Partition the array into 2 parts in which the numbers in left subarray is less than (or equal to) the pivot and the numbers in right subarray is greater than (or equal to) the pivot.</li>\n<li>Exchange pivot (at the end of the array now) with the first element in the right part.</li>\n<li>Compare k with length of the left subarray, say, len.<ul>\n<li>if <code>k == len + 1</code>， then pivot is the target.</li>\n<li>if <code>k &lt;= len</code>, repeat from step 1 on the left subarray.</li>\n<li>if <code>k &gt; len, k = k - len</code>, repeat from step 1 on the right subarray.</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<p><em>implementation</em></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#快速选择 找到第（k+1）小的数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quickselect</span>(<span class=\"params\">nums, left, right, k</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &gt; right:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"comment\">#随机选取哨兵,可以一定程度上降低时间复杂度</span></span><br><span class=\"line\">    random_index = random.randint(left, right)</span><br><span class=\"line\">    nums[left], nums[random_index] = nums[random_index], nums[left]</span><br><span class=\"line\">    pivot = nums[left]</span><br><span class=\"line\">    <span class=\"comment\"># 快速选择模板 为了找到哨兵pivot 在数组中的位置</span></span><br><span class=\"line\">    i , j = left + <span class=\"number\">1</span>, right</span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= j:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt;= j <span class=\"keyword\">and</span> nums[i] &lt;= pivot: i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt;= j <span class=\"keyword\">and</span> nums[j] &gt; pivot: j -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &lt;= j:</span><br><span class=\"line\">            nums[i], nums[j] = nums[j], nums[i]</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">    nums[left], nums[j] = nums[j], nums[left]</span><br><span class=\"line\">    <span class=\"comment\"># j 为 pivot 在数组中的位置索引</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> j == k:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[j]</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> j &lt; k:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> quickselect(nums, j+<span class=\"number\">1</span>, right, k)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> quickselect(nums, left, j<span class=\"number\">-1</span>, k)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Quick-Sort\"><a href=\"#Quick-Sort\" class=\"headerlink\" title=\"Quick Sort\"></a>Quick Sort</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quicksort</span>(<span class=\"params\">nums, left, right</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> left &gt; right:</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    pivot = nums[left]</span><br><span class=\"line\">    i, j = left+<span class=\"number\">1</span>, right</span><br><span class=\"line\">    <span class=\"keyword\">while</span> i &lt;= j:</span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt;= j <span class=\"keyword\">and</span> nums[i] &lt;= pivot: i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt;= j <span class=\"keyword\">and</span> nums[j] &gt;= pivot: j -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &lt;= j:</span><br><span class=\"line\">            nums[i], nums[j] = nums[j], nums[i]</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">    nums[left], nums[j] = nums[j], nums[left]</span><br><span class=\"line\">    <span class=\"comment\">#与快速选择的主要区别在于：快速排序需要再对两边同时递归，从而对整个数组进行排序。而快速选择只需要判断k的位置然后选择一边进行递归，类似于二分查找的操作，它只想找到第k个元素而不关系其他元素在数组中怎么排列，从而降低了时间复杂度</span></span><br><span class=\"line\">    quicksort(nums, left, j<span class=\"number\">-1</span>)</span><br><span class=\"line\">    quicksort(nums, j+<span class=\"number\">1</span>, right)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Leetcode-examples\"><a href=\"#Leetcode-examples\" class=\"headerlink\" title=\"Leetcode examples:\"></a>Leetcode examples:</h3><ul>\n<li><a href=\"https://leetcode.com/problems/kth-largest-element-in-an-array/\">Kth Largest Element in an Array</a></li>\n<li><a href=\"https://leetcode.com/problems/top-k-frequent-elements/\">Top K Frequent Elements</a></li>\n</ul>"},{"title":"【leetcode】快慢指针","date":"2020-11-06T08:03:51.000Z","mathjax":true,"_content":"\n### 什么是快慢指针？\n\n快慢指针是遍历操作时的一种技巧，通常是由一个快指针和一个慢指针组成，一般应用在链表操作上。以下示例是快指针走两步，慢指针走一步：\n\n``` python\nfast, slow = head # head是链表的头节点（单链表且无环）\nwhile fast and fast.next:\n    fast = fast.next.next\n    slow = slow.next\n#循环终止时slow指针指向链表的中间节点\n```\n\n<!-- more -->\n\n### 应用场景\n\n* [判断链表是否有环](https://leetcode-cn.com/problems/linked-list-cycle/)：\n\n  此时需要快慢指针来判断，当快慢两个指针都进入环内时，可以想象成两个人在操场跑圈，一个人的速度是另外一个人的两倍，跑了若干圈后，快的人总会在某个时间点和慢的人相遇，只要有速度差就会相遇，除非两个人速度一致都保持相对静止。所以当链表存在环时，快慢指针同时从起点出发，总会在某个时刻相遇。\n\n  ```python\n  # Definition for singly-linked list.\n  # class ListNode:\n  #     def __init__(self, x):\n  #         self.val = x\n  #         self.next = None\n  \n  class Solution:\n      def hasCycle(self, head: ListNode) -> bool:\n          fast, slow = head, head\n          while fast and fast.next:\n              fast = fast.next.next\n              slow = slow.next\n              if fast == slow:\n                  return True\n          return False\n  ```\n\n* [求有环链表环的起点](https://leetcode-cn.com/problems/linked-list-cycle-ii/)：\n\n  这个思路也是利用快慢指针，不过稍微复杂一点，需要我们在这里简单做一个数学证明。假设链表在某一点有环，此时从head到这个节点的距离为 $a$ ，环的周长设为 $b$，我们知道当快慢指针都进入环内进行循环跑动时，总会在某一点相遇，那么在相遇时快指针一定比慢指针多跑了 $n$ 圈（$n$ 为整数），多跑的长度为 $nb$。 令$f$ 为快指针跑过的距离， $s$ 为慢指针跑过的距离，因为 $f = 2s$ 恒成立且 $f-s=nb$ 推出 $s=nb$。注意，此时 $f$ 和 $s$ 都不一定处于环的入口洁结点处，因为要想到达环的起始结点处还必须得跑 $a$ 的距离， 使得 $s=nb+a$, 这样才符合慢指针从链表起点出发，先跑过 $a$ 进入环内，再跑了 $n$ 圈后又回到环的入口结点的条件。所以我们需要再提前保留一个指向链表头节点的指针，在快慢指针已经相遇的条件下，移动它，慢指针也跟着一起走，当它走过 $a$ 的距离来到环的入口结点时，慢指针走过的距离也变成了 $nb+a$, 也来到了环的入口结点处，两个指针相遇，此时指向的结点就是环的入口结点。\n\n  ```python\n  # Definition for singly-linked list.\n  # class ListNode:\n  #     def __init__(self, x):\n  #         self.val = x\n  #         self.next = None\n  \n  class Solution:\n      def detectCycle(self, head: ListNode) -> ListNode:\n          #环形链表的经典解法，快慢指针\n          #数学推导，当快慢指针在环内相遇时\n          if not head: return head\n          fast, slow, temp = head, head, head\n          while fast and fast.next:\n              fast = fast.next.next\n              slow = slow.next\n              if fast == slow:\n                  while temp != slow:\n                      temp = temp.next\n                      slow = slow.next\n                  return slow\n          return None\n  ```\n\n* [相交链表](https://leetcode-cn.com/problems/intersection-of-two-linked-lists/)\n\n  这道题的思路也较为奇特，虽然只是一道简单题，但是没有发散思维或者链表成环意识的话一时半会也很难想到。A 链表和 B 链表相交于某一点或者不相交，如果相交的话可以认为一个链表前半部分分叉成 A 和 B 两部分。这时候需要双指针 指针A 和 指针B，而非快慢指针。指针A 从 A 的头结点开始出发，当走到末尾时就指向 B 的头节点，指针B从B的头节点开始出发，当走到末尾时指向 A 的头节点。原理：假设 A和B 相交前的长度分别为 $a$ 和 $b$，相交后的长度为 $c$， 当指针A走过 $a+c+b$ 的距离时第二次回到了相交点， 此时指针B 走过的距离为 $b+c+a$（指针A和指针B同速），所以也到达了相交点，指针A 和指针B 相遇。\n\n  ```python\n   Definition for singly-linked list.\n  # class ListNode:\n  #     def __init__(self, x):\n  #         self.val = x\n  #         self.next = None\n  \n  class Solution:\n      def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:\n          #指针转移，走完A再走B，走完B再走A\n          if not headA or not headB: return None\n          curr_A, curr_B = headA, headB\n          #巧妙解法，避开好多限制条件\n          #如果A和B相交，则一定会有一个相交节点，此时curr_A 等于 curr_B\n          #如果这两个不相交，则 curr_A == curr_B == None 此时也退出循环\n          while curr_A != curr_B:\n              if curr_A:\n                  curr_A = curr_A.next\n              else:\n                  curr_A = headB\n              if curr_B:\n                  curr_B = curr_B.next\n              else:\n                  curr_B = headA\n          return curr_A\n  ```\n\n* [删除链表的倒数第N个节点](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/)\n\n  双指针，一个领先另一个N个节点，比较直观\n\n  ```python\n  # Definition for singly-linked list.\n  # class ListNode:\n  #     def __init__(self, val=0, next=None):\n  #         self.val = val\n  #         self.next = next\n  class Solution:\n      def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n          if not head: return \n          fast, slow = head, head\n          for i in range(n):\n              fast = fast.next\n          if not fast: return head.next\n          while fast and fast.next:\n              fast = fast.next\n              slow = slow.next\n          slow.next = slow.next.next\n          return head\n  ```\n\n  ","source":"_posts/FastAndSlow.md","raw":"---\ntitle: 【leetcode】快慢指针\ndate: 2020-11-06 16:03:51\ntags: leetcode\ncategories: Data structure & Algorithm\nmathjax: true\n---\n\n### 什么是快慢指针？\n\n快慢指针是遍历操作时的一种技巧，通常是由一个快指针和一个慢指针组成，一般应用在链表操作上。以下示例是快指针走两步，慢指针走一步：\n\n``` python\nfast, slow = head # head是链表的头节点（单链表且无环）\nwhile fast and fast.next:\n    fast = fast.next.next\n    slow = slow.next\n#循环终止时slow指针指向链表的中间节点\n```\n\n<!-- more -->\n\n### 应用场景\n\n* [判断链表是否有环](https://leetcode-cn.com/problems/linked-list-cycle/)：\n\n  此时需要快慢指针来判断，当快慢两个指针都进入环内时，可以想象成两个人在操场跑圈，一个人的速度是另外一个人的两倍，跑了若干圈后，快的人总会在某个时间点和慢的人相遇，只要有速度差就会相遇，除非两个人速度一致都保持相对静止。所以当链表存在环时，快慢指针同时从起点出发，总会在某个时刻相遇。\n\n  ```python\n  # Definition for singly-linked list.\n  # class ListNode:\n  #     def __init__(self, x):\n  #         self.val = x\n  #         self.next = None\n  \n  class Solution:\n      def hasCycle(self, head: ListNode) -> bool:\n          fast, slow = head, head\n          while fast and fast.next:\n              fast = fast.next.next\n              slow = slow.next\n              if fast == slow:\n                  return True\n          return False\n  ```\n\n* [求有环链表环的起点](https://leetcode-cn.com/problems/linked-list-cycle-ii/)：\n\n  这个思路也是利用快慢指针，不过稍微复杂一点，需要我们在这里简单做一个数学证明。假设链表在某一点有环，此时从head到这个节点的距离为 $a$ ，环的周长设为 $b$，我们知道当快慢指针都进入环内进行循环跑动时，总会在某一点相遇，那么在相遇时快指针一定比慢指针多跑了 $n$ 圈（$n$ 为整数），多跑的长度为 $nb$。 令$f$ 为快指针跑过的距离， $s$ 为慢指针跑过的距离，因为 $f = 2s$ 恒成立且 $f-s=nb$ 推出 $s=nb$。注意，此时 $f$ 和 $s$ 都不一定处于环的入口洁结点处，因为要想到达环的起始结点处还必须得跑 $a$ 的距离， 使得 $s=nb+a$, 这样才符合慢指针从链表起点出发，先跑过 $a$ 进入环内，再跑了 $n$ 圈后又回到环的入口结点的条件。所以我们需要再提前保留一个指向链表头节点的指针，在快慢指针已经相遇的条件下，移动它，慢指针也跟着一起走，当它走过 $a$ 的距离来到环的入口结点时，慢指针走过的距离也变成了 $nb+a$, 也来到了环的入口结点处，两个指针相遇，此时指向的结点就是环的入口结点。\n\n  ```python\n  # Definition for singly-linked list.\n  # class ListNode:\n  #     def __init__(self, x):\n  #         self.val = x\n  #         self.next = None\n  \n  class Solution:\n      def detectCycle(self, head: ListNode) -> ListNode:\n          #环形链表的经典解法，快慢指针\n          #数学推导，当快慢指针在环内相遇时\n          if not head: return head\n          fast, slow, temp = head, head, head\n          while fast and fast.next:\n              fast = fast.next.next\n              slow = slow.next\n              if fast == slow:\n                  while temp != slow:\n                      temp = temp.next\n                      slow = slow.next\n                  return slow\n          return None\n  ```\n\n* [相交链表](https://leetcode-cn.com/problems/intersection-of-two-linked-lists/)\n\n  这道题的思路也较为奇特，虽然只是一道简单题，但是没有发散思维或者链表成环意识的话一时半会也很难想到。A 链表和 B 链表相交于某一点或者不相交，如果相交的话可以认为一个链表前半部分分叉成 A 和 B 两部分。这时候需要双指针 指针A 和 指针B，而非快慢指针。指针A 从 A 的头结点开始出发，当走到末尾时就指向 B 的头节点，指针B从B的头节点开始出发，当走到末尾时指向 A 的头节点。原理：假设 A和B 相交前的长度分别为 $a$ 和 $b$，相交后的长度为 $c$， 当指针A走过 $a+c+b$ 的距离时第二次回到了相交点， 此时指针B 走过的距离为 $b+c+a$（指针A和指针B同速），所以也到达了相交点，指针A 和指针B 相遇。\n\n  ```python\n   Definition for singly-linked list.\n  # class ListNode:\n  #     def __init__(self, x):\n  #         self.val = x\n  #         self.next = None\n  \n  class Solution:\n      def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:\n          #指针转移，走完A再走B，走完B再走A\n          if not headA or not headB: return None\n          curr_A, curr_B = headA, headB\n          #巧妙解法，避开好多限制条件\n          #如果A和B相交，则一定会有一个相交节点，此时curr_A 等于 curr_B\n          #如果这两个不相交，则 curr_A == curr_B == None 此时也退出循环\n          while curr_A != curr_B:\n              if curr_A:\n                  curr_A = curr_A.next\n              else:\n                  curr_A = headB\n              if curr_B:\n                  curr_B = curr_B.next\n              else:\n                  curr_B = headA\n          return curr_A\n  ```\n\n* [删除链表的倒数第N个节点](https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/)\n\n  双指针，一个领先另一个N个节点，比较直观\n\n  ```python\n  # Definition for singly-linked list.\n  # class ListNode:\n  #     def __init__(self, val=0, next=None):\n  #         self.val = val\n  #         self.next = next\n  class Solution:\n      def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:\n          if not head: return \n          fast, slow = head, head\n          for i in range(n):\n              fast = fast.next\n          if not fast: return head.next\n          while fast and fast.next:\n              fast = fast.next\n              slow = slow.next\n          slow.next = slow.next.next\n          return head\n  ```\n\n  ","slug":"FastAndSlow","published":1,"updated":"2020-11-06T14:21:43.414Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckh6clb600000zotoc23hhb59","content":"<h3 id=\"什么是快慢指针？\"><a href=\"#什么是快慢指针？\" class=\"headerlink\" title=\"什么是快慢指针？\"></a>什么是快慢指针？</h3><p>快慢指针是遍历操作时的一种技巧，通常是由一个快指针和一个慢指针组成，一般应用在链表操作上。以下示例是快指针走两步，慢指针走一步：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fast, slow = head <span class=\"comment\"># head是链表的头节点（单链表且无环）</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> fast <span class=\"keyword\">and</span> fast.next:</span><br><span class=\"line\">    fast = fast.next.next</span><br><span class=\"line\">    slow = slow.next</span><br><span class=\"line\"><span class=\"comment\">#循环终止时slow指针指向链表的中间节点</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li><p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\">判断链表是否有环</a>：</p>\n<p>此时需要快慢指针来判断，当快慢两个指针都进入环内时，可以想象成两个人在操场跑圈，一个人的速度是另外一个人的两倍，跑了若干圈后，快的人总会在某个时间点和慢的人相遇，只要有速度差就会相遇，除非两个人速度一致都保持相对静止。所以当链表存在环时，快慢指针同时从起点出发，总会在某个时刻相遇。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hasCycle</span>(<span class=\"params\">self, head: ListNode</span>) -&gt; bool:</span></span><br><span class=\"line\">        fast, slow = head, head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> fast <span class=\"keyword\">and</span> fast.next:</span><br><span class=\"line\">            fast = fast.next.next</span><br><span class=\"line\">            slow = slow.next</span><br><span class=\"line\">            <span class=\"keyword\">if</span> fast == slow:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle-ii/\">求有环链表环的起点</a>：</p>\n<p>这个思路也是利用快慢指针，不过稍微复杂一点，需要我们在这里简单做一个数学证明。假设链表在某一点有环，此时从head到这个节点的距离为 $a$ ，环的周长设为 $b$，我们知道当快慢指针都进入环内进行循环跑动时，总会在某一点相遇，那么在相遇时快指针一定比慢指针多跑了 $n$ 圈（$n$ 为整数），多跑的长度为 $nb$。 令$f$ 为快指针跑过的距离， $s$ 为慢指针跑过的距离，因为 $f = 2s$ 恒成立且 $f-s=nb$ 推出 $s=nb$。注意，此时 $f$ 和 $s$ 都不一定处于环的入口洁结点处，因为要想到达环的起始结点处还必须得跑 $a$ 的距离， 使得 $s=nb+a$, 这样才符合慢指针从链表起点出发，先跑过 $a$ 进入环内，再跑了 $n$ 圈后又回到环的入口结点的条件。所以我们需要再提前保留一个指向链表头节点的指针，在快慢指针已经相遇的条件下，移动它，慢指针也跟着一起走，当它走过 $a$ 的距离来到环的入口结点时，慢指针走过的距离也变成了 $nb+a$, 也来到了环的入口结点处，两个指针相遇，此时指向的结点就是环的入口结点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectCycle</span>(<span class=\"params\">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class=\"line\">        <span class=\"comment\">#环形链表的经典解法，快慢指针</span></span><br><span class=\"line\">        <span class=\"comment\">#数学推导，当快慢指针在环内相遇时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> head: <span class=\"keyword\">return</span> head</span><br><span class=\"line\">        fast, slow, temp = head, head, head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> fast <span class=\"keyword\">and</span> fast.next:</span><br><span class=\"line\">            fast = fast.next.next</span><br><span class=\"line\">            slow = slow.next</span><br><span class=\"line\">            <span class=\"keyword\">if</span> fast == slow:</span><br><span class=\"line\">                <span class=\"keyword\">while</span> temp != slow:</span><br><span class=\"line\">                    temp = temp.next</span><br><span class=\"line\">                    slow = slow.next</span><br><span class=\"line\">                <span class=\"keyword\">return</span> slow</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/\">相交链表</a></p>\n<p>这道题的思路也较为奇特，虽然只是一道简单题，但是没有发散思维或者链表成环意识的话一时半会也很难想到。A 链表和 B 链表相交于某一点或者不相交，如果相交的话可以认为一个链表前半部分分叉成 A 和 B 两部分。这时候需要双指针 指针A 和 指针B，而非快慢指针。指针A 从 A 的头结点开始出发，当走到末尾时就指向 B 的头节点，指针B从B的头节点开始出发，当走到末尾时指向 A 的头节点。原理：假设 A和B 相交前的长度分别为 $a$ 和 $b$，相交后的长度为 $c$， 当指针A走过 $a+c+b$ 的距离时第二次回到了相交点， 此时指针B 走过的距离为 $b+c+a$（指针A和指针B同速），所以也到达了相交点，指针A 和指针B 相遇。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Definition <span class=\"keyword\">for</span> singly-linked list.</span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getIntersectionNode</span>(<span class=\"params\">self, headA: ListNode, headB: ListNode</span>) -&gt; ListNode:</span></span><br><span class=\"line\">        <span class=\"comment\">#指针转移，走完A再走B，走完B再走A</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> headA <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> headB: <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        curr_A, curr_B = headA, headB</span><br><span class=\"line\">        <span class=\"comment\">#巧妙解法，避开好多限制条件</span></span><br><span class=\"line\">        <span class=\"comment\">#如果A和B相交，则一定会有一个相交节点，此时curr_A 等于 curr_B</span></span><br><span class=\"line\">        <span class=\"comment\">#如果这两个不相交，则 curr_A == curr_B == None 此时也退出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> curr_A != curr_B:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> curr_A:</span><br><span class=\"line\">                curr_A = curr_A.next</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                curr_A = headB</span><br><span class=\"line\">            <span class=\"keyword\">if</span> curr_B:</span><br><span class=\"line\">                curr_B = curr_B.next</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                curr_B = headA</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr_A</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/\">删除链表的倒数第N个节点</a></p>\n<p>双指针，一个领先另一个N个节点，比较直观</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, val=0, next=None):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = next</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">removeNthFromEnd</span>(<span class=\"params\">self, head: ListNode, n: int</span>) -&gt; ListNode:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> head: <span class=\"keyword\">return</span> </span><br><span class=\"line\">        fast, slow = head, head</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            fast = fast.next</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> fast: <span class=\"keyword\">return</span> head.next</span><br><span class=\"line\">        <span class=\"keyword\">while</span> fast <span class=\"keyword\">and</span> fast.next:</span><br><span class=\"line\">            fast = fast.next</span><br><span class=\"line\">            slow = slow.next</span><br><span class=\"line\">        slow.next = slow.next.next</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"什么是快慢指针？\"><a href=\"#什么是快慢指针？\" class=\"headerlink\" title=\"什么是快慢指针？\"></a>什么是快慢指针？</h3><p>快慢指针是遍历操作时的一种技巧，通常是由一个快指针和一个慢指针组成，一般应用在链表操作上。以下示例是快指针走两步，慢指针走一步：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fast, slow = head <span class=\"comment\"># head是链表的头节点（单链表且无环）</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> fast <span class=\"keyword\">and</span> fast.next:</span><br><span class=\"line\">    fast = fast.next.next</span><br><span class=\"line\">    slow = slow.next</span><br><span class=\"line\"><span class=\"comment\">#循环终止时slow指针指向链表的中间节点</span></span><br></pre></td></tr></table></figure>","more":"<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><ul>\n<li><p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\">判断链表是否有环</a>：</p>\n<p>此时需要快慢指针来判断，当快慢两个指针都进入环内时，可以想象成两个人在操场跑圈，一个人的速度是另外一个人的两倍，跑了若干圈后，快的人总会在某个时间点和慢的人相遇，只要有速度差就会相遇，除非两个人速度一致都保持相对静止。所以当链表存在环时，快慢指针同时从起点出发，总会在某个时刻相遇。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hasCycle</span>(<span class=\"params\">self, head: ListNode</span>) -&gt; bool:</span></span><br><span class=\"line\">        fast, slow = head, head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> fast <span class=\"keyword\">and</span> fast.next:</span><br><span class=\"line\">            fast = fast.next.next</span><br><span class=\"line\">            slow = slow.next</span><br><span class=\"line\">            <span class=\"keyword\">if</span> fast == slow:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle-ii/\">求有环链表环的起点</a>：</p>\n<p>这个思路也是利用快慢指针，不过稍微复杂一点，需要我们在这里简单做一个数学证明。假设链表在某一点有环，此时从head到这个节点的距离为 $a$ ，环的周长设为 $b$，我们知道当快慢指针都进入环内进行循环跑动时，总会在某一点相遇，那么在相遇时快指针一定比慢指针多跑了 $n$ 圈（$n$ 为整数），多跑的长度为 $nb$。 令$f$ 为快指针跑过的距离， $s$ 为慢指针跑过的距离，因为 $f = 2s$ 恒成立且 $f-s=nb$ 推出 $s=nb$。注意，此时 $f$ 和 $s$ 都不一定处于环的入口洁结点处，因为要想到达环的起始结点处还必须得跑 $a$ 的距离， 使得 $s=nb+a$, 这样才符合慢指针从链表起点出发，先跑过 $a$ 进入环内，再跑了 $n$ 圈后又回到环的入口结点的条件。所以我们需要再提前保留一个指向链表头节点的指针，在快慢指针已经相遇的条件下，移动它，慢指针也跟着一起走，当它走过 $a$ 的距离来到环的入口结点时，慢指针走过的距离也变成了 $nb+a$, 也来到了环的入口结点处，两个指针相遇，此时指向的结点就是环的入口结点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectCycle</span>(<span class=\"params\">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class=\"line\">        <span class=\"comment\">#环形链表的经典解法，快慢指针</span></span><br><span class=\"line\">        <span class=\"comment\">#数学推导，当快慢指针在环内相遇时</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> head: <span class=\"keyword\">return</span> head</span><br><span class=\"line\">        fast, slow, temp = head, head, head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> fast <span class=\"keyword\">and</span> fast.next:</span><br><span class=\"line\">            fast = fast.next.next</span><br><span class=\"line\">            slow = slow.next</span><br><span class=\"line\">            <span class=\"keyword\">if</span> fast == slow:</span><br><span class=\"line\">                <span class=\"keyword\">while</span> temp != slow:</span><br><span class=\"line\">                    temp = temp.next</span><br><span class=\"line\">                    slow = slow.next</span><br><span class=\"line\">                <span class=\"keyword\">return</span> slow</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/\">相交链表</a></p>\n<p>这道题的思路也较为奇特，虽然只是一道简单题，但是没有发散思维或者链表成环意识的话一时半会也很难想到。A 链表和 B 链表相交于某一点或者不相交，如果相交的话可以认为一个链表前半部分分叉成 A 和 B 两部分。这时候需要双指针 指针A 和 指针B，而非快慢指针。指针A 从 A 的头结点开始出发，当走到末尾时就指向 B 的头节点，指针B从B的头节点开始出发，当走到末尾时指向 A 的头节点。原理：假设 A和B 相交前的长度分别为 $a$ 和 $b$，相交后的长度为 $c$， 当指针A走过 $a+c+b$ 的距离时第二次回到了相交点， 此时指针B 走过的距离为 $b+c+a$（指针A和指针B同速），所以也到达了相交点，指针A 和指针B 相遇。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> Definition <span class=\"keyword\">for</span> singly-linked list.</span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, x):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = x</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getIntersectionNode</span>(<span class=\"params\">self, headA: ListNode, headB: ListNode</span>) -&gt; ListNode:</span></span><br><span class=\"line\">        <span class=\"comment\">#指针转移，走完A再走B，走完B再走A</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> headA <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> headB: <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        curr_A, curr_B = headA, headB</span><br><span class=\"line\">        <span class=\"comment\">#巧妙解法，避开好多限制条件</span></span><br><span class=\"line\">        <span class=\"comment\">#如果A和B相交，则一定会有一个相交节点，此时curr_A 等于 curr_B</span></span><br><span class=\"line\">        <span class=\"comment\">#如果这两个不相交，则 curr_A == curr_B == None 此时也退出循环</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> curr_A != curr_B:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> curr_A:</span><br><span class=\"line\">                curr_A = curr_A.next</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                curr_A = headB</span><br><span class=\"line\">            <span class=\"keyword\">if</span> curr_B:</span><br><span class=\"line\">                curr_B = curr_B.next</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                curr_B = headA</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curr_A</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/\">删除链表的倒数第N个节点</a></p>\n<p>双指针，一个领先另一个N个节点，比较直观</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"># class ListNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, val=0, next=None):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\">#         self.next = next</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">removeNthFromEnd</span>(<span class=\"params\">self, head: ListNode, n: int</span>) -&gt; ListNode:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> head: <span class=\"keyword\">return</span> </span><br><span class=\"line\">        fast, slow = head, head</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">            fast = fast.next</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> fast: <span class=\"keyword\">return</span> head.next</span><br><span class=\"line\">        <span class=\"keyword\">while</span> fast <span class=\"keyword\">and</span> fast.next:</span><br><span class=\"line\">            fast = fast.next</span><br><span class=\"line\">            slow = slow.next</span><br><span class=\"line\">        slow.next = slow.next.next</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>"},{"title":"近期面试经验总结","date":"2020-11-11T16:52:02.000Z","mathjax":true,"_content":"\n### OPPO\n\n<!-- more -->\n\n* 电话面试，实习生只有一轮，岗位是推荐部门的信息流推荐\n* 自我介绍，简历相关项目复述，追问（项目深挖）\n* 实习原因，想做什么方向\n* 对推荐系统的了解，阅读过哪些相关的资料\n* 更多的是关于个人背景的了解，机器学习和NLP相关知识问的不多，大都是简单地一笔带过\n* 一道编程题：给定一个数组，找到一个分割点将数组切分成两份，使得两个部分方差的和最小\n* 建议：认真准备简历内容，主动去讲述自己了解的知识然后延伸拓展，刷题\n* 结果：offer\n\n### 快手\n\n* 牛客网视频面试，实习生两轮，岗位是搜索部门的自然语言处理\n\n* 一面：\n\n  >* 自我介绍，简历深挖，个人背景\n  >* 简述 RNN 神经网络\n  >* NLP 相关的一些基础知识点，比如 word2vec，各种神经网络，问的比较浅\n  >* 三道编程题：\n  >   1. 经典跳台阶问题，一次上一个或者两个台阶，给n个台阶有几种上法（动态规划或者斐波那契数列）\n  >   2. 给两个不相交的有序链表，返回其公共部分数组（双指针）\n  >   3. 给定一个数组，里面有两个数出现了奇数次，其他数都出现了偶数次，返回那两个奇数次的数并排序（哈希表 or 分组异或）\n\n* 二面：\n\n  > * 自我介绍，简历深挖，个人背景\n  >\n  > * 什么是 Fasttext，和 word2vec 有什么区别\n  >\n  > * 负采样和 Hierachical Softmax，BERT原理\n  >\n  > * 两道编程题：\n  >\n  >   1. 给定一个排序好的字符列表，再给一个目标字符，在字符列表中找到第一个大于目标字符的字符，如果不存在则返回列表第一个字符（二分查找）\n  >2. 二叉树中序遍历的非递归实现（DFS，栈）\n\n* HR面：\n\n  >* 自我介绍，简历，在德国留学的体验\n  >* 好多都是个人相关得信息，就聊天，感觉不错\n  >* 几个有意思的问题：用三个词语描述自己并解释一下，最近遇到比较挫折的事情是什么\n\n* 建议：刷题，NLP前沿，机器学习自然语言处理基础知识\n\n* 结果：offer\n\n### 字节跳动\n\n* 牛客网视频面试，推荐算法实习生-Data部门，体验很不好\n* 自我介绍，在腾讯目前做什么，用到了哪些东西（没有问简历上的任何项目）\n* 数据结构中的堆和栈\n* 给一个N个节点得完全二叉树，树的高度是多少（$log(N+1)$）\n* 编程题：直方图接雨水（单调栈，按行填充），拓展：将空间复杂度降低到$O(1)$（按列填充）\n* 机器学习基础，逻辑回归的损失函数是什么\n* 知道哪些激活函数，他们之间得区别是什么（ReLU（leaky ReLU）, Sigmod, tahn)\n* 对推荐系统了解多少，你觉得应该怎么做推荐系统\n* 反问\n* 建议：体验很不好，面试面完之后让我等二面，过了一会又进来说今天就到这里，莫名其妙\n* 结果：一面拒\n\n","source":"_posts/exper.md","raw":"---\ntitle: 近期面试经验总结\ndate: 2020-11-12 00:52:02\ntags: 面试经历\ncategories: Experience\nmathjax: true\n---\n\n### OPPO\n\n<!-- more -->\n\n* 电话面试，实习生只有一轮，岗位是推荐部门的信息流推荐\n* 自我介绍，简历相关项目复述，追问（项目深挖）\n* 实习原因，想做什么方向\n* 对推荐系统的了解，阅读过哪些相关的资料\n* 更多的是关于个人背景的了解，机器学习和NLP相关知识问的不多，大都是简单地一笔带过\n* 一道编程题：给定一个数组，找到一个分割点将数组切分成两份，使得两个部分方差的和最小\n* 建议：认真准备简历内容，主动去讲述自己了解的知识然后延伸拓展，刷题\n* 结果：offer\n\n### 快手\n\n* 牛客网视频面试，实习生两轮，岗位是搜索部门的自然语言处理\n\n* 一面：\n\n  >* 自我介绍，简历深挖，个人背景\n  >* 简述 RNN 神经网络\n  >* NLP 相关的一些基础知识点，比如 word2vec，各种神经网络，问的比较浅\n  >* 三道编程题：\n  >   1. 经典跳台阶问题，一次上一个或者两个台阶，给n个台阶有几种上法（动态规划或者斐波那契数列）\n  >   2. 给两个不相交的有序链表，返回其公共部分数组（双指针）\n  >   3. 给定一个数组，里面有两个数出现了奇数次，其他数都出现了偶数次，返回那两个奇数次的数并排序（哈希表 or 分组异或）\n\n* 二面：\n\n  > * 自我介绍，简历深挖，个人背景\n  >\n  > * 什么是 Fasttext，和 word2vec 有什么区别\n  >\n  > * 负采样和 Hierachical Softmax，BERT原理\n  >\n  > * 两道编程题：\n  >\n  >   1. 给定一个排序好的字符列表，再给一个目标字符，在字符列表中找到第一个大于目标字符的字符，如果不存在则返回列表第一个字符（二分查找）\n  >2. 二叉树中序遍历的非递归实现（DFS，栈）\n\n* HR面：\n\n  >* 自我介绍，简历，在德国留学的体验\n  >* 好多都是个人相关得信息，就聊天，感觉不错\n  >* 几个有意思的问题：用三个词语描述自己并解释一下，最近遇到比较挫折的事情是什么\n\n* 建议：刷题，NLP前沿，机器学习自然语言处理基础知识\n\n* 结果：offer\n\n### 字节跳动\n\n* 牛客网视频面试，推荐算法实习生-Data部门，体验很不好\n* 自我介绍，在腾讯目前做什么，用到了哪些东西（没有问简历上的任何项目）\n* 数据结构中的堆和栈\n* 给一个N个节点得完全二叉树，树的高度是多少（$log(N+1)$）\n* 编程题：直方图接雨水（单调栈，按行填充），拓展：将空间复杂度降低到$O(1)$（按列填充）\n* 机器学习基础，逻辑回归的损失函数是什么\n* 知道哪些激活函数，他们之间得区别是什么（ReLU（leaky ReLU）, Sigmod, tahn)\n* 对推荐系统了解多少，你觉得应该怎么做推荐系统\n* 反问\n* 建议：体验很不好，面试面完之后让我等二面，过了一会又进来说今天就到这里，莫名其妙\n* 结果：一面拒\n\n","slug":"exper","published":1,"updated":"2020-11-17T09:03:29.993Z","_id":"ckhdo4sp50000ckto6w1o45nr","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"OPPO\"><a href=\"#OPPO\" class=\"headerlink\" title=\"OPPO\"></a>OPPO</h3><a id=\"more\"></a>\n\n<ul>\n<li>电话面试，实习生只有一轮，岗位是推荐部门的信息流推荐</li>\n<li>自我介绍，简历相关项目复述，追问（项目深挖）</li>\n<li>实习原因，想做什么方向</li>\n<li>对推荐系统的了解，阅读过哪些相关的资料</li>\n<li>更多的是关于个人背景的了解，机器学习和NLP相关知识问的不多，大都是简单地一笔带过</li>\n<li>一道编程题：给定一个数组，找到一个分割点将数组切分成两份，使得两个部分方差的和最小</li>\n<li>建议：认真准备简历内容，主动去讲述自己了解的知识然后延伸拓展，刷题</li>\n<li>结果：offer</li>\n</ul>\n<h3 id=\"快手\"><a href=\"#快手\" class=\"headerlink\" title=\"快手\"></a>快手</h3><ul>\n<li><p>牛客网视频面试，实习生两轮，岗位是搜索部门的自然语言处理</p>\n</li>\n<li><p>一面：</p>\n<blockquote>\n<ul>\n<li>自我介绍，简历深挖，个人背景</li>\n<li>简述 RNN 神经网络</li>\n<li>NLP 相关的一些基础知识点，比如 word2vec，各种神经网络，问的比较浅</li>\n<li>三道编程题：<ol>\n<li>经典跳台阶问题，一次上一个或者两个台阶，给n个台阶有几种上法（动态规划或者斐波那契数列）</li>\n<li>给两个不相交的有序链表，返回其公共部分数组（双指针）</li>\n<li>给定一个数组，里面有两个数出现了奇数次，其他数都出现了偶数次，返回那两个奇数次的数并排序（哈希表 or 分组异或）</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>二面：</p>\n<blockquote>\n<ul>\n<li><p>自我介绍，简历深挖，个人背景</p>\n</li>\n<li><p>什么是 Fasttext，和 word2vec 有什么区别</p>\n</li>\n<li><p>负采样和 Hierachical Softmax，BERT原理</p>\n</li>\n<li><p>两道编程题：</p>\n<ol>\n<li>给定一个排序好的字符列表，再给一个目标字符，在字符列表中找到第一个大于目标字符的字符，如果不存在则返回列表第一个字符（二分查找）</li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li>二叉树中序遍历的非递归实现（DFS，栈）</li>\n</ol>\n</blockquote>\n</li>\n<li><p>HR面：</p>\n<blockquote>\n<ul>\n<li>自我介绍，简历，在德国留学的体验</li>\n<li>好多都是个人相关得信息，就聊天，感觉不错</li>\n<li>几个有意思的问题：用三个词语描述自己并解释一下，最近遇到比较挫折的事情是什么</li>\n</ul>\n</blockquote>\n</li>\n<li><p>建议：刷题，NLP前沿，机器学习自然语言处理基础知识</p>\n</li>\n<li><p>结果：offer</p>\n</li>\n</ul>\n<h3 id=\"字节跳动\"><a href=\"#字节跳动\" class=\"headerlink\" title=\"字节跳动\"></a>字节跳动</h3><ul>\n<li>牛客网视频面试，推荐算法实习生-Data部门，体验很不好</li>\n<li>自我介绍，在腾讯目前做什么，用到了哪些东西（没有问简历上的任何项目）</li>\n<li>数据结构中的堆和栈</li>\n<li>给一个N个节点得完全二叉树，树的高度是多少（$log(N+1)$）</li>\n<li>编程题：直方图接雨水（单调栈，按行填充），拓展：将空间复杂度降低到$O(1)$（按列填充）</li>\n<li>机器学习基础，逻辑回归的损失函数是什么</li>\n<li>知道哪些激活函数，他们之间得区别是什么（ReLU（leaky ReLU）, Sigmod, tahn)</li>\n<li>对推荐系统了解多少，你觉得应该怎么做推荐系统</li>\n<li>反问</li>\n<li>建议：体验很不好，面试面完之后让我等二面，过了一会又进来说今天就到这里，莫名其妙</li>\n<li>结果：一面拒</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"OPPO\"><a href=\"#OPPO\" class=\"headerlink\" title=\"OPPO\"></a>OPPO</h3>","more":"<ul>\n<li>电话面试，实习生只有一轮，岗位是推荐部门的信息流推荐</li>\n<li>自我介绍，简历相关项目复述，追问（项目深挖）</li>\n<li>实习原因，想做什么方向</li>\n<li>对推荐系统的了解，阅读过哪些相关的资料</li>\n<li>更多的是关于个人背景的了解，机器学习和NLP相关知识问的不多，大都是简单地一笔带过</li>\n<li>一道编程题：给定一个数组，找到一个分割点将数组切分成两份，使得两个部分方差的和最小</li>\n<li>建议：认真准备简历内容，主动去讲述自己了解的知识然后延伸拓展，刷题</li>\n<li>结果：offer</li>\n</ul>\n<h3 id=\"快手\"><a href=\"#快手\" class=\"headerlink\" title=\"快手\"></a>快手</h3><ul>\n<li><p>牛客网视频面试，实习生两轮，岗位是搜索部门的自然语言处理</p>\n</li>\n<li><p>一面：</p>\n<blockquote>\n<ul>\n<li>自我介绍，简历深挖，个人背景</li>\n<li>简述 RNN 神经网络</li>\n<li>NLP 相关的一些基础知识点，比如 word2vec，各种神经网络，问的比较浅</li>\n<li>三道编程题：<ol>\n<li>经典跳台阶问题，一次上一个或者两个台阶，给n个台阶有几种上法（动态规划或者斐波那契数列）</li>\n<li>给两个不相交的有序链表，返回其公共部分数组（双指针）</li>\n<li>给定一个数组，里面有两个数出现了奇数次，其他数都出现了偶数次，返回那两个奇数次的数并排序（哈希表 or 分组异或）</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>二面：</p>\n<blockquote>\n<ul>\n<li><p>自我介绍，简历深挖，个人背景</p>\n</li>\n<li><p>什么是 Fasttext，和 word2vec 有什么区别</p>\n</li>\n<li><p>负采样和 Hierachical Softmax，BERT原理</p>\n</li>\n<li><p>两道编程题：</p>\n<ol>\n<li>给定一个排序好的字符列表，再给一个目标字符，在字符列表中找到第一个大于目标字符的字符，如果不存在则返回列表第一个字符（二分查找）</li>\n</ol>\n</li>\n</ul>\n<ol start=\"2\">\n<li>二叉树中序遍历的非递归实现（DFS，栈）</li>\n</ol>\n</blockquote>\n</li>\n<li><p>HR面：</p>\n<blockquote>\n<ul>\n<li>自我介绍，简历，在德国留学的体验</li>\n<li>好多都是个人相关得信息，就聊天，感觉不错</li>\n<li>几个有意思的问题：用三个词语描述自己并解释一下，最近遇到比较挫折的事情是什么</li>\n</ul>\n</blockquote>\n</li>\n<li><p>建议：刷题，NLP前沿，机器学习自然语言处理基础知识</p>\n</li>\n<li><p>结果：offer</p>\n</li>\n</ul>\n<h3 id=\"字节跳动\"><a href=\"#字节跳动\" class=\"headerlink\" title=\"字节跳动\"></a>字节跳动</h3><ul>\n<li>牛客网视频面试，推荐算法实习生-Data部门，体验很不好</li>\n<li>自我介绍，在腾讯目前做什么，用到了哪些东西（没有问简历上的任何项目）</li>\n<li>数据结构中的堆和栈</li>\n<li>给一个N个节点得完全二叉树，树的高度是多少（$log(N+1)$）</li>\n<li>编程题：直方图接雨水（单调栈，按行填充），拓展：将空间复杂度降低到$O(1)$（按列填充）</li>\n<li>机器学习基础，逻辑回归的损失函数是什么</li>\n<li>知道哪些激活函数，他们之间得区别是什么（ReLU（leaky ReLU）, Sigmod, tahn)</li>\n<li>对推荐系统了解多少，你觉得应该怎么做推荐系统</li>\n<li>反问</li>\n<li>建议：体验很不好，面试面完之后让我等二面，过了一会又进来说今天就到这里，莫名其妙</li>\n<li>结果：一面拒</li>\n</ul>"},{"title":"智能问答调研","date":"2020-11-13T11:55:15.000Z","_content":"\n## 主要流程\n\n**Query** ==> **Knowledge Base (Q-A Pair)** ==> **Answer**\n\n原则：**猜你所想，答你所问**\n\n相关领域：搜索+自然语言处理+推荐\n\n<!-- more -->\n\n## 相关概念\n\n### Query\n\n* 通常是指用户输入的查询语句，我们需要通过这个查询语句来定位其在知识库中所对应最可能答案\n\n* 对一个用户Query进行语言理解的输出就是三个部分，分别是Domain，即这个Query是哪个领域的，Intent，即这个Query在表达什么意图；Slot，即这个Query里包含了那些重要的信息，可以作为后续任务触发的参数\n\n  ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/test.png)\n\n* 难点：query的表示方法，对用户query的语义理解，当query 信息不足时展开多轮对话，在知识库中对query的答案定位，用户的表达方式灵活多样，即同一个语义有多种表达方式\n\n### Knowledge Base\n\n* 知识库一般是存储问题以及相应答案的数据库，里面的一个元素通常是二元组 <Question, Answer>\n* 可以按照问题的种类以及业务相关知识先将 <Question, Answer> 分成几大类\n* 知识库的构建往往是非常关键的，而且需要大量人力的投入\n* 问答对也可以再进行扩充和优化，因为不同的人可能会有不同问问题的方式，可以将问答对扩展为多对一关系，比如多个相似问题对应着一个答案\n* *进阶难点：将传统知识库转换成知识图谱，因果推理，关系抽取，实体抽取*\n\n### 对话系统\n\n![](https://raw.githubusercontent.com/ichbinhandsome/images/main/6e7cbfb05761ef09fd1d78fb649ee54.jpg)\n\n## 实现方案\n\n### 1. 基于问题相似度的匹配（召回+排序）\n\n* 用户的 query 本质上相当于一个问题，我们采用单论对话的方式，在知识库中快速找到和query相似的 TopK 个问答对，将其返回给客户（快速召回）\n\n* 方法：比较query和知识库中的问题，找到最相似的TopK，再进行排序\n\n  > a. 词语维度匹配：关键词匹配，编辑距离（字符级召回）\n  >\n  > b. 文本向量维度匹配：Bag-Of-Words， TF-IDF， LSA （潜在语义分析），Doc2vec，主题模型（向量级召回）\n\n  ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/640.png)\n\n  <center>去哪儿基本问答流程</center>\n\n* 缺陷：用户输入的问题往往不够精确，如果不进行处理就进行匹配的话可能会产生错误的答案；需要维护大量的同义词典库和匹配规则；召回需要耗费大量的时间\n\n* 进阶：微软的DSSM模型（句子级别上的神经网络语言模型）在解决短文本语义匹配上有很好的效果\n\n### 2. 问题分类\n\n* **意图识别**：可以先将知识库分为三个维度：”是什么“， ”为什么“， ”怎么做“。然后对用户的query做一个简单的文本分类（意图识别），对于这三个不同类别的意图采取不同的匹配策略，如：”是什么“往往是对专有名词术语解释，只需要做简单的文本匹配。”为什么“和”怎么做“ 可能就需要更为复杂的实现方法\n\n  ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/ss.png)\n\n  <center>美团语义识别流程</center>\n\n* **问题分类**：将知识库中不同意图下的问答对再根据业务场景进行划分，比如”saas相关“或者”paas相关“，也可以分割为更为精细的维度。当已经识别出用户的意图时，对query再次进行文本分类（使用BERT，FastText、TextCNN和Bi-LSTM），得到对应问题的子类，然后再进行语义匹配\n\n* 主要思想：召回+粗排+精排\n\n* 相关的语义匹配任务可以参考百度的 [AnyQ Framework](https://github.com/baidu/AnyQ)\n\n  ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/a8ab4ea73177a03414071cf40debc83.png)\n\n* 缺陷：需要大量的知识库问题对来训练模型，用户的问题可能涉及到了多个领域，单个query可能无法获取准确有效的信息\n\n### 3. 知识图谱+NER+信息检索\n\n* 主要流程：**知识图谱构建与存储**、语义解析、查询语句执行、答案与回复生成\n\n* 通过对传统的的知识库中的元素进行实体抽取，关系抽取，事件抽取来构建知识图谱\n\n* 先对用户的query进行意图识别\n\n* 再对query进行实体抽取和关系抽取（NER）\n\n* 再知识图谱中进行因果推理和信息检索\n\n  ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/6071194-2d459b530e39bf99.webp)\n\n### 4. 多轮对话\n\n* 意图分析+场景识别+槽位填充\n\n  ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/tt.png)\n\n  <center>滴滴客服中多轮对话模型</center>\n\n  多轮是一个更偏工程的过程。里面更多的算法是在做槽位解析，需要做好三件事，第一个就是填槽，如果对话过程中槽位未补全，在下轮对话过程中引导用户补全槽位信息。再者就是场景管理，需要维护海量用户的聊天信息。第三点就是可配置，多轮最后面都是一个业务问题，开发一个可配置的界面，让运营自行配置其需要的对话。多轮的逻辑是在知识库里配置的，DM是和业务无关的，只需要按配置的解析结果执行即可\n\n* 找到所有信息后再在知识库中进行检索匹配\n\n## 优化方案\n\n### input suggestion\n\n* 根据用户输入问题来自动生成后续的话，一方面节省用户时间，另一方面能更为精确地描述和匹配用户问题\n* 可以使用规则匹配使用字典树 Trie（需要维护大量规则），也可以语言模型预测\n\n待续...\n\n## 业界案列\n\n* [58同城智能问答实践](https://mp.weixin.qq.com/s/o7x1BigfIMJIJEGxlFlLow)\n* [美团智能客服实践](https://mp.weixin.qq.com/s/oU2FbqJEqnx4qp1HOmsuYA)\n* [知识图谱在美团中的应用](https://mp.weixin.qq.com/s/qn8k_6GmvTsW6TF786KWUw)\n* [滴滴客服实践](https://mp.weixin.qq.com/s/MSy8OHzR3avObmOq9uSSFQ)\n* [复杂多轮对话的关键功能点](https://mp.weixin.qq.com/s/sBXZVFGWPRtDI2tc4Z-Rnw)\n* [Domain+Intent+Slot 对话模式](https://mp.weixin.qq.com/s/g89KS05W7fQndvhFPtcpYA)","source":"_posts/smartQandA.md","raw":"---\ntitle: 智能问答调研\ndate: 2020-11-13 19:55:15\ntags: 智能问答\ncategories: NLP\n---\n\n## 主要流程\n\n**Query** ==> **Knowledge Base (Q-A Pair)** ==> **Answer**\n\n原则：**猜你所想，答你所问**\n\n相关领域：搜索+自然语言处理+推荐\n\n<!-- more -->\n\n## 相关概念\n\n### Query\n\n* 通常是指用户输入的查询语句，我们需要通过这个查询语句来定位其在知识库中所对应最可能答案\n\n* 对一个用户Query进行语言理解的输出就是三个部分，分别是Domain，即这个Query是哪个领域的，Intent，即这个Query在表达什么意图；Slot，即这个Query里包含了那些重要的信息，可以作为后续任务触发的参数\n\n  ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/test.png)\n\n* 难点：query的表示方法，对用户query的语义理解，当query 信息不足时展开多轮对话，在知识库中对query的答案定位，用户的表达方式灵活多样，即同一个语义有多种表达方式\n\n### Knowledge Base\n\n* 知识库一般是存储问题以及相应答案的数据库，里面的一个元素通常是二元组 <Question, Answer>\n* 可以按照问题的种类以及业务相关知识先将 <Question, Answer> 分成几大类\n* 知识库的构建往往是非常关键的，而且需要大量人力的投入\n* 问答对也可以再进行扩充和优化，因为不同的人可能会有不同问问题的方式，可以将问答对扩展为多对一关系，比如多个相似问题对应着一个答案\n* *进阶难点：将传统知识库转换成知识图谱，因果推理，关系抽取，实体抽取*\n\n### 对话系统\n\n![](https://raw.githubusercontent.com/ichbinhandsome/images/main/6e7cbfb05761ef09fd1d78fb649ee54.jpg)\n\n## 实现方案\n\n### 1. 基于问题相似度的匹配（召回+排序）\n\n* 用户的 query 本质上相当于一个问题，我们采用单论对话的方式，在知识库中快速找到和query相似的 TopK 个问答对，将其返回给客户（快速召回）\n\n* 方法：比较query和知识库中的问题，找到最相似的TopK，再进行排序\n\n  > a. 词语维度匹配：关键词匹配，编辑距离（字符级召回）\n  >\n  > b. 文本向量维度匹配：Bag-Of-Words， TF-IDF， LSA （潜在语义分析），Doc2vec，主题模型（向量级召回）\n\n  ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/640.png)\n\n  <center>去哪儿基本问答流程</center>\n\n* 缺陷：用户输入的问题往往不够精确，如果不进行处理就进行匹配的话可能会产生错误的答案；需要维护大量的同义词典库和匹配规则；召回需要耗费大量的时间\n\n* 进阶：微软的DSSM模型（句子级别上的神经网络语言模型）在解决短文本语义匹配上有很好的效果\n\n### 2. 问题分类\n\n* **意图识别**：可以先将知识库分为三个维度：”是什么“， ”为什么“， ”怎么做“。然后对用户的query做一个简单的文本分类（意图识别），对于这三个不同类别的意图采取不同的匹配策略，如：”是什么“往往是对专有名词术语解释，只需要做简单的文本匹配。”为什么“和”怎么做“ 可能就需要更为复杂的实现方法\n\n  ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/ss.png)\n\n  <center>美团语义识别流程</center>\n\n* **问题分类**：将知识库中不同意图下的问答对再根据业务场景进行划分，比如”saas相关“或者”paas相关“，也可以分割为更为精细的维度。当已经识别出用户的意图时，对query再次进行文本分类（使用BERT，FastText、TextCNN和Bi-LSTM），得到对应问题的子类，然后再进行语义匹配\n\n* 主要思想：召回+粗排+精排\n\n* 相关的语义匹配任务可以参考百度的 [AnyQ Framework](https://github.com/baidu/AnyQ)\n\n  ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/a8ab4ea73177a03414071cf40debc83.png)\n\n* 缺陷：需要大量的知识库问题对来训练模型，用户的问题可能涉及到了多个领域，单个query可能无法获取准确有效的信息\n\n### 3. 知识图谱+NER+信息检索\n\n* 主要流程：**知识图谱构建与存储**、语义解析、查询语句执行、答案与回复生成\n\n* 通过对传统的的知识库中的元素进行实体抽取，关系抽取，事件抽取来构建知识图谱\n\n* 先对用户的query进行意图识别\n\n* 再对query进行实体抽取和关系抽取（NER）\n\n* 再知识图谱中进行因果推理和信息检索\n\n  ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/6071194-2d459b530e39bf99.webp)\n\n### 4. 多轮对话\n\n* 意图分析+场景识别+槽位填充\n\n  ![](https://raw.githubusercontent.com/ichbinhandsome/images/main/tt.png)\n\n  <center>滴滴客服中多轮对话模型</center>\n\n  多轮是一个更偏工程的过程。里面更多的算法是在做槽位解析，需要做好三件事，第一个就是填槽，如果对话过程中槽位未补全，在下轮对话过程中引导用户补全槽位信息。再者就是场景管理，需要维护海量用户的聊天信息。第三点就是可配置，多轮最后面都是一个业务问题，开发一个可配置的界面，让运营自行配置其需要的对话。多轮的逻辑是在知识库里配置的，DM是和业务无关的，只需要按配置的解析结果执行即可\n\n* 找到所有信息后再在知识库中进行检索匹配\n\n## 优化方案\n\n### input suggestion\n\n* 根据用户输入问题来自动生成后续的话，一方面节省用户时间，另一方面能更为精确地描述和匹配用户问题\n* 可以使用规则匹配使用字典树 Trie（需要维护大量规则），也可以语言模型预测\n\n待续...\n\n## 业界案列\n\n* [58同城智能问答实践](https://mp.weixin.qq.com/s/o7x1BigfIMJIJEGxlFlLow)\n* [美团智能客服实践](https://mp.weixin.qq.com/s/oU2FbqJEqnx4qp1HOmsuYA)\n* [知识图谱在美团中的应用](https://mp.weixin.qq.com/s/qn8k_6GmvTsW6TF786KWUw)\n* [滴滴客服实践](https://mp.weixin.qq.com/s/MSy8OHzR3avObmOq9uSSFQ)\n* [复杂多轮对话的关键功能点](https://mp.weixin.qq.com/s/sBXZVFGWPRtDI2tc4Z-Rnw)\n* [Domain+Intent+Slot 对话模式](https://mp.weixin.qq.com/s/g89KS05W7fQndvhFPtcpYA)","slug":"smartQandA","published":1,"updated":"2020-11-13T12:17:09.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhg87t4b0000m4toedojeuh7","content":"<h2 id=\"主要流程\"><a href=\"#主要流程\" class=\"headerlink\" title=\"主要流程\"></a>主要流程</h2><p><strong>Query</strong> ==&gt; <strong>Knowledge Base (Q-A Pair)</strong> ==&gt; <strong>Answer</strong></p>\n<p>原则：<strong>猜你所想，答你所问</strong></p>\n<p>相关领域：搜索+自然语言处理+推荐</p>\n<a id=\"more\"></a>\n\n<h2 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h2><h3 id=\"Query\"><a href=\"#Query\" class=\"headerlink\" title=\"Query\"></a>Query</h3><ul>\n<li><p>通常是指用户输入的查询语句，我们需要通过这个查询语句来定位其在知识库中所对应最可能答案</p>\n</li>\n<li><p>对一个用户Query进行语言理解的输出就是三个部分，分别是Domain，即这个Query是哪个领域的，Intent，即这个Query在表达什么意图；Slot，即这个Query里包含了那些重要的信息，可以作为后续任务触发的参数</p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/test.png\"></p>\n</li>\n<li><p>难点：query的表示方法，对用户query的语义理解，当query 信息不足时展开多轮对话，在知识库中对query的答案定位，用户的表达方式灵活多样，即同一个语义有多种表达方式</p>\n</li>\n</ul>\n<h3 id=\"Knowledge-Base\"><a href=\"#Knowledge-Base\" class=\"headerlink\" title=\"Knowledge Base\"></a>Knowledge Base</h3><ul>\n<li>知识库一般是存储问题以及相应答案的数据库，里面的一个元素通常是二元组 &lt;Question, Answer&gt;</li>\n<li>可以按照问题的种类以及业务相关知识先将 &lt;Question, Answer&gt; 分成几大类</li>\n<li>知识库的构建往往是非常关键的，而且需要大量人力的投入</li>\n<li>问答对也可以再进行扩充和优化，因为不同的人可能会有不同问问题的方式，可以将问答对扩展为多对一关系，比如多个相似问题对应着一个答案</li>\n<li><em>进阶难点：将传统知识库转换成知识图谱，因果推理，关系抽取，实体抽取</em></li>\n</ul>\n<h3 id=\"对话系统\"><a href=\"#对话系统\" class=\"headerlink\" title=\"对话系统\"></a>对话系统</h3><p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/6e7cbfb05761ef09fd1d78fb649ee54.jpg\"></p>\n<h2 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h2><h3 id=\"1-基于问题相似度的匹配（召回-排序）\"><a href=\"#1-基于问题相似度的匹配（召回-排序）\" class=\"headerlink\" title=\"1. 基于问题相似度的匹配（召回+排序）\"></a>1. 基于问题相似度的匹配（召回+排序）</h3><ul>\n<li><p>用户的 query 本质上相当于一个问题，我们采用单论对话的方式，在知识库中快速找到和query相似的 TopK 个问答对，将其返回给客户（快速召回）</p>\n</li>\n<li><p>方法：比较query和知识库中的问题，找到最相似的TopK，再进行排序</p>\n<blockquote>\n<p>a. 词语维度匹配：关键词匹配，编辑距离（字符级召回）</p>\n<p>b. 文本向量维度匹配：Bag-Of-Words， TF-IDF， LSA （潜在语义分析），Doc2vec，主题模型（向量级召回）</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/640.png\"></p>\n<center>去哪儿基本问答流程</center>\n</li>\n<li><p>缺陷：用户输入的问题往往不够精确，如果不进行处理就进行匹配的话可能会产生错误的答案；需要维护大量的同义词典库和匹配规则；召回需要耗费大量的时间</p>\n</li>\n<li><p>进阶：微软的DSSM模型（句子级别上的神经网络语言模型）在解决短文本语义匹配上有很好的效果</p>\n</li>\n</ul>\n<h3 id=\"2-问题分类\"><a href=\"#2-问题分类\" class=\"headerlink\" title=\"2. 问题分类\"></a>2. 问题分类</h3><ul>\n<li><p><strong>意图识别</strong>：可以先将知识库分为三个维度：”是什么“， ”为什么“， ”怎么做“。然后对用户的query做一个简单的文本分类（意图识别），对于这三个不同类别的意图采取不同的匹配策略，如：”是什么“往往是对专有名词术语解释，只需要做简单的文本匹配。”为什么“和”怎么做“ 可能就需要更为复杂的实现方法</p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/ss.png\"></p>\n<center>美团语义识别流程</center>\n</li>\n<li><p><strong>问题分类</strong>：将知识库中不同意图下的问答对再根据业务场景进行划分，比如”saas相关“或者”paas相关“，也可以分割为更为精细的维度。当已经识别出用户的意图时，对query再次进行文本分类（使用BERT，FastText、TextCNN和Bi-LSTM），得到对应问题的子类，然后再进行语义匹配</p>\n</li>\n<li><p>主要思想：召回+粗排+精排</p>\n</li>\n<li><p>相关的语义匹配任务可以参考百度的 <a href=\"https://github.com/baidu/AnyQ\">AnyQ Framework</a></p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/a8ab4ea73177a03414071cf40debc83.png\"></p>\n</li>\n<li><p>缺陷：需要大量的知识库问题对来训练模型，用户的问题可能涉及到了多个领域，单个query可能无法获取准确有效的信息</p>\n</li>\n</ul>\n<h3 id=\"3-知识图谱-NER-信息检索\"><a href=\"#3-知识图谱-NER-信息检索\" class=\"headerlink\" title=\"3. 知识图谱+NER+信息检索\"></a>3. 知识图谱+NER+信息检索</h3><ul>\n<li><p>主要流程：<strong>知识图谱构建与存储</strong>、语义解析、查询语句执行、答案与回复生成</p>\n</li>\n<li><p>通过对传统的的知识库中的元素进行实体抽取，关系抽取，事件抽取来构建知识图谱</p>\n</li>\n<li><p>先对用户的query进行意图识别</p>\n</li>\n<li><p>再对query进行实体抽取和关系抽取（NER）</p>\n</li>\n<li><p>再知识图谱中进行因果推理和信息检索</p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/6071194-2d459b530e39bf99.webp\"></p>\n</li>\n</ul>\n<h3 id=\"4-多轮对话\"><a href=\"#4-多轮对话\" class=\"headerlink\" title=\"4. 多轮对话\"></a>4. 多轮对话</h3><ul>\n<li><p>意图分析+场景识别+槽位填充</p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/tt.png\"></p>\n<center>滴滴客服中多轮对话模型</center>\n\n<p>多轮是一个更偏工程的过程。里面更多的算法是在做槽位解析，需要做好三件事，第一个就是填槽，如果对话过程中槽位未补全，在下轮对话过程中引导用户补全槽位信息。再者就是场景管理，需要维护海量用户的聊天信息。第三点就是可配置，多轮最后面都是一个业务问题，开发一个可配置的界面，让运营自行配置其需要的对话。多轮的逻辑是在知识库里配置的，DM是和业务无关的，只需要按配置的解析结果执行即可</p>\n</li>\n<li><p>找到所有信息后再在知识库中进行检索匹配</p>\n</li>\n</ul>\n<h2 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h2><h3 id=\"input-suggestion\"><a href=\"#input-suggestion\" class=\"headerlink\" title=\"input suggestion\"></a>input suggestion</h3><ul>\n<li>根据用户输入问题来自动生成后续的话，一方面节省用户时间，另一方面能更为精确地描述和匹配用户问题</li>\n<li>可以使用规则匹配使用字典树 Trie（需要维护大量规则），也可以语言模型预测</li>\n</ul>\n<p>待续…</p>\n<h2 id=\"业界案列\"><a href=\"#业界案列\" class=\"headerlink\" title=\"业界案列\"></a>业界案列</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/o7x1BigfIMJIJEGxlFlLow\">58同城智能问答实践</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/oU2FbqJEqnx4qp1HOmsuYA\">美团智能客服实践</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/qn8k_6GmvTsW6TF786KWUw\">知识图谱在美团中的应用</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/MSy8OHzR3avObmOq9uSSFQ\">滴滴客服实践</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/sBXZVFGWPRtDI2tc4Z-Rnw\">复杂多轮对话的关键功能点</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/g89KS05W7fQndvhFPtcpYA\">Domain+Intent+Slot 对话模式</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"主要流程\"><a href=\"#主要流程\" class=\"headerlink\" title=\"主要流程\"></a>主要流程</h2><p><strong>Query</strong> ==&gt; <strong>Knowledge Base (Q-A Pair)</strong> ==&gt; <strong>Answer</strong></p>\n<p>原则：<strong>猜你所想，答你所问</strong></p>\n<p>相关领域：搜索+自然语言处理+推荐</p>","more":"<h2 id=\"相关概念\"><a href=\"#相关概念\" class=\"headerlink\" title=\"相关概念\"></a>相关概念</h2><h3 id=\"Query\"><a href=\"#Query\" class=\"headerlink\" title=\"Query\"></a>Query</h3><ul>\n<li><p>通常是指用户输入的查询语句，我们需要通过这个查询语句来定位其在知识库中所对应最可能答案</p>\n</li>\n<li><p>对一个用户Query进行语言理解的输出就是三个部分，分别是Domain，即这个Query是哪个领域的，Intent，即这个Query在表达什么意图；Slot，即这个Query里包含了那些重要的信息，可以作为后续任务触发的参数</p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/test.png\"></p>\n</li>\n<li><p>难点：query的表示方法，对用户query的语义理解，当query 信息不足时展开多轮对话，在知识库中对query的答案定位，用户的表达方式灵活多样，即同一个语义有多种表达方式</p>\n</li>\n</ul>\n<h3 id=\"Knowledge-Base\"><a href=\"#Knowledge-Base\" class=\"headerlink\" title=\"Knowledge Base\"></a>Knowledge Base</h3><ul>\n<li>知识库一般是存储问题以及相应答案的数据库，里面的一个元素通常是二元组 &lt;Question, Answer&gt;</li>\n<li>可以按照问题的种类以及业务相关知识先将 &lt;Question, Answer&gt; 分成几大类</li>\n<li>知识库的构建往往是非常关键的，而且需要大量人力的投入</li>\n<li>问答对也可以再进行扩充和优化，因为不同的人可能会有不同问问题的方式，可以将问答对扩展为多对一关系，比如多个相似问题对应着一个答案</li>\n<li><em>进阶难点：将传统知识库转换成知识图谱，因果推理，关系抽取，实体抽取</em></li>\n</ul>\n<h3 id=\"对话系统\"><a href=\"#对话系统\" class=\"headerlink\" title=\"对话系统\"></a>对话系统</h3><p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/6e7cbfb05761ef09fd1d78fb649ee54.jpg\"></p>\n<h2 id=\"实现方案\"><a href=\"#实现方案\" class=\"headerlink\" title=\"实现方案\"></a>实现方案</h2><h3 id=\"1-基于问题相似度的匹配（召回-排序）\"><a href=\"#1-基于问题相似度的匹配（召回-排序）\" class=\"headerlink\" title=\"1. 基于问题相似度的匹配（召回+排序）\"></a>1. 基于问题相似度的匹配（召回+排序）</h3><ul>\n<li><p>用户的 query 本质上相当于一个问题，我们采用单论对话的方式，在知识库中快速找到和query相似的 TopK 个问答对，将其返回给客户（快速召回）</p>\n</li>\n<li><p>方法：比较query和知识库中的问题，找到最相似的TopK，再进行排序</p>\n<blockquote>\n<p>a. 词语维度匹配：关键词匹配，编辑距离（字符级召回）</p>\n<p>b. 文本向量维度匹配：Bag-Of-Words， TF-IDF， LSA （潜在语义分析），Doc2vec，主题模型（向量级召回）</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/640.png\"></p>\n<center>去哪儿基本问答流程</center>\n</li>\n<li><p>缺陷：用户输入的问题往往不够精确，如果不进行处理就进行匹配的话可能会产生错误的答案；需要维护大量的同义词典库和匹配规则；召回需要耗费大量的时间</p>\n</li>\n<li><p>进阶：微软的DSSM模型（句子级别上的神经网络语言模型）在解决短文本语义匹配上有很好的效果</p>\n</li>\n</ul>\n<h3 id=\"2-问题分类\"><a href=\"#2-问题分类\" class=\"headerlink\" title=\"2. 问题分类\"></a>2. 问题分类</h3><ul>\n<li><p><strong>意图识别</strong>：可以先将知识库分为三个维度：”是什么“， ”为什么“， ”怎么做“。然后对用户的query做一个简单的文本分类（意图识别），对于这三个不同类别的意图采取不同的匹配策略，如：”是什么“往往是对专有名词术语解释，只需要做简单的文本匹配。”为什么“和”怎么做“ 可能就需要更为复杂的实现方法</p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/ss.png\"></p>\n<center>美团语义识别流程</center>\n</li>\n<li><p><strong>问题分类</strong>：将知识库中不同意图下的问答对再根据业务场景进行划分，比如”saas相关“或者”paas相关“，也可以分割为更为精细的维度。当已经识别出用户的意图时，对query再次进行文本分类（使用BERT，FastText、TextCNN和Bi-LSTM），得到对应问题的子类，然后再进行语义匹配</p>\n</li>\n<li><p>主要思想：召回+粗排+精排</p>\n</li>\n<li><p>相关的语义匹配任务可以参考百度的 <a href=\"https://github.com/baidu/AnyQ\">AnyQ Framework</a></p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/a8ab4ea73177a03414071cf40debc83.png\"></p>\n</li>\n<li><p>缺陷：需要大量的知识库问题对来训练模型，用户的问题可能涉及到了多个领域，单个query可能无法获取准确有效的信息</p>\n</li>\n</ul>\n<h3 id=\"3-知识图谱-NER-信息检索\"><a href=\"#3-知识图谱-NER-信息检索\" class=\"headerlink\" title=\"3. 知识图谱+NER+信息检索\"></a>3. 知识图谱+NER+信息检索</h3><ul>\n<li><p>主要流程：<strong>知识图谱构建与存储</strong>、语义解析、查询语句执行、答案与回复生成</p>\n</li>\n<li><p>通过对传统的的知识库中的元素进行实体抽取，关系抽取，事件抽取来构建知识图谱</p>\n</li>\n<li><p>先对用户的query进行意图识别</p>\n</li>\n<li><p>再对query进行实体抽取和关系抽取（NER）</p>\n</li>\n<li><p>再知识图谱中进行因果推理和信息检索</p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/6071194-2d459b530e39bf99.webp\"></p>\n</li>\n</ul>\n<h3 id=\"4-多轮对话\"><a href=\"#4-多轮对话\" class=\"headerlink\" title=\"4. 多轮对话\"></a>4. 多轮对话</h3><ul>\n<li><p>意图分析+场景识别+槽位填充</p>\n<p><img src=\"https://raw.githubusercontent.com/ichbinhandsome/images/main/tt.png\"></p>\n<center>滴滴客服中多轮对话模型</center>\n\n<p>多轮是一个更偏工程的过程。里面更多的算法是在做槽位解析，需要做好三件事，第一个就是填槽，如果对话过程中槽位未补全，在下轮对话过程中引导用户补全槽位信息。再者就是场景管理，需要维护海量用户的聊天信息。第三点就是可配置，多轮最后面都是一个业务问题，开发一个可配置的界面，让运营自行配置其需要的对话。多轮的逻辑是在知识库里配置的，DM是和业务无关的，只需要按配置的解析结果执行即可</p>\n</li>\n<li><p>找到所有信息后再在知识库中进行检索匹配</p>\n</li>\n</ul>\n<h2 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h2><h3 id=\"input-suggestion\"><a href=\"#input-suggestion\" class=\"headerlink\" title=\"input suggestion\"></a>input suggestion</h3><ul>\n<li>根据用户输入问题来自动生成后续的话，一方面节省用户时间，另一方面能更为精确地描述和匹配用户问题</li>\n<li>可以使用规则匹配使用字典树 Trie（需要维护大量规则），也可以语言模型预测</li>\n</ul>\n<p>待续…</p>\n<h2 id=\"业界案列\"><a href=\"#业界案列\" class=\"headerlink\" title=\"业界案列\"></a>业界案列</h2><ul>\n<li><a href=\"https://mp.weixin.qq.com/s/o7x1BigfIMJIJEGxlFlLow\">58同城智能问答实践</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/oU2FbqJEqnx4qp1HOmsuYA\">美团智能客服实践</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/qn8k_6GmvTsW6TF786KWUw\">知识图谱在美团中的应用</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/MSy8OHzR3avObmOq9uSSFQ\">滴滴客服实践</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/sBXZVFGWPRtDI2tc4Z-Rnw\">复杂多轮对话的关键功能点</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/g89KS05W7fQndvhFPtcpYA\">Domain+Intent+Slot 对话模式</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckdjex8t40001pstobfok2j6l","category_id":"ckdjex8tb0004pstocf8f5pr4","_id":"ckdjex8th000cpsto6460hn3s"},{"post_id":"ckdjex8t90003pstofkqd73vh","category_id":"ckdjex8tf0009pstoacq49b20","_id":"ckdjex8tj000hpsto48wxdlmx"},{"post_id":"ckdjex8td0007psto7yuk7fcc","category_id":"ckdjex8tf0009pstoacq49b20","_id":"ckdjex8tk000kpstogfus4u06"},{"post_id":"ckdjex8te0008psto29so741u","category_id":"ckdjex8tj000gpsto53wbgtoo","_id":"ckdjex8tk000mpsto2byebwzl"},{"post_id":"ckdkmb6e70000u4to5jfn7uj0","category_id":"ckdjex8tf0009pstoacq49b20","_id":"ckdkmb6ef0002u4toganqfade"},{"post_id":"ckea7m09k0000d0togbvr7g35","category_id":"ckdjex8tf0009pstoacq49b20","_id":"ckea7m09t0002d0to6jpu9ne1"},{"post_id":"ckf37likw0000skto3ckd5k8m","category_id":"ckf37lil40001sktobsm257o2","_id":"ckf37lil80004skto8e7zfn8c"},{"post_id":"ckfxsjwas00008kto1ozoav08","category_id":"ckdjex8tf0009pstoacq49b20","_id":"ckfxsjwb000028ktoaihd80fp"},{"post_id":"ckgw39c340000kwto7akw25ha","category_id":"ckgw39c3b0001kwto1xsv8bb4","_id":"ckgw39c3e0004kwtog590f45k"},{"post_id":"ckgxgtlag0000cstoefegcvmn","category_id":"ckdjex8tf0009pstoacq49b20","_id":"ckgxgtlao0002cstoav2v61xf"},{"post_id":"ckh6clb600000zotoc23hhb59","category_id":"ckdjex8tf0009pstoacq49b20","_id":"ckh6clb670002zotofzua3sk1"},{"post_id":"ckhdo4sp50000ckto6w1o45nr","category_id":"ckhdo4spc0001ckto7v8ual7h","_id":"ckhdo4sph0004cktod0uu9emo"},{"post_id":"ckhg87t4b0000m4toedojeuh7","category_id":"ckhg87t4i0001m4toeeyredcr","_id":"ckhg87t4n0004m4to4cwv01sq"}],"PostTag":[{"post_id":"ckdjex8t40001pstobfok2j6l","tag_id":"ckdjex8tc0005psto2kva3f0a","_id":"ckdjex8tg000bpstohfyk8ufw"},{"post_id":"ckdjex8t90003pstofkqd73vh","tag_id":"ckdjex8tg000apstohbrvgnhm","_id":"ckdjex8tj000fpstodzvh3ea6"},{"post_id":"ckdjex8td0007psto7yuk7fcc","tag_id":"ckdjex8tg000apstohbrvgnhm","_id":"ckdjex8tk000jpstof664533c"},{"post_id":"ckdjex8te0008psto29so741u","tag_id":"ckdjex8tj000ipsto5p122gs8","_id":"ckdjex8tk000lpstofrh28aj3"},{"post_id":"ckdkmb6e70000u4to5jfn7uj0","tag_id":"ckdjex8tg000apstohbrvgnhm","_id":"ckdkmb6ee0001u4to76d2f8id"},{"post_id":"ckea7m09k0000d0togbvr7g35","tag_id":"ckdjex8tg000apstohbrvgnhm","_id":"ckea7m09t0001d0to8quqacqx"},{"post_id":"ckf37likw0000skto3ckd5k8m","tag_id":"ckfr1642c0000n8to68k1ffps","_id":"ckfr1642h0001n8to8tk0649q"},{"post_id":"ckfxsjwas00008kto1ozoav08","tag_id":"ckdjex8tg000apstohbrvgnhm","_id":"ckfxsjwb000018ktoc8mxe4cd"},{"post_id":"ckgw39c340000kwto7akw25ha","tag_id":"ckgw39c3d0002kwto4cwb1qok","_id":"ckgw39c3e0003kwto8m189j31"},{"post_id":"ckgxgtlag0000cstoefegcvmn","tag_id":"ckdjex8tg000apstohbrvgnhm","_id":"ckgxgtlan0001csto9smo6z46"},{"post_id":"ckh6clb600000zotoc23hhb59","tag_id":"ckdjex8tg000apstohbrvgnhm","_id":"ckh6clb670001zotobn4ofpuo"},{"post_id":"ckhdo4sp50000ckto6w1o45nr","tag_id":"ckhdo4spg0002cktocadzht5j","_id":"ckhdo4sph0003cktofju66sty"},{"post_id":"ckhg87t4b0000m4toedojeuh7","tag_id":"ckhg87t4m0002m4to31vpagel","_id":"ckhg87t4n0003m4to3chtfpbi"}],"Tag":[{"name":"Hello World","_id":"ckdjex8tc0005psto2kva3f0a"},{"name":"leetcode","_id":"ckdjex8tg000apstohbrvgnhm"},{"name":"hexo","_id":"ckdjex8tj000ipsto5p122gs8"},{"name":"DataWhale","_id":"ckf37lil70002skto11r56krd"},{"name":"TIANCHI","_id":"ckfr1642c0000n8to68k1ffps"},{"name":"tools","_id":"ckgw39c3d0002kwto4cwb1qok"},{"name":"面试经历","_id":"ckhdo4spg0002cktocadzht5j"},{"name":"智能问答","_id":"ckhg87t4m0002m4to31vpagel"}]}}